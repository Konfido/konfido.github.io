{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/images/20180618110805000.png","path":"images/20180618110805000.png","modified":0,"renderable":0},{"_id":"source/images/20180618110805001.png","path":"images/20180618110805001.png","modified":0,"renderable":0},{"_id":"source/images/20190930140443835.png","path":"images/20190930140443835.png","modified":0,"renderable":0},{"_id":"source/images/20210430113414677.png","path":"images/20210430113414677.png","modified":0,"renderable":0},{"_id":"source/images/20210508171525893.png","path":"images/20210508171525893.png","modified":0,"renderable":0},{"_id":"source/images/20210512153630363.png","path":"images/20210512153630363.png","modified":0,"renderable":0},{"_id":"source/images/20210512153656860.png","path":"images/20210512153656860.png","modified":0,"renderable":0},{"_id":"source/images/20210518030009000.mp3","path":"images/20210518030009000.mp3","modified":0,"renderable":0},{"_id":"source/images/alipay.png","path":"images/alipay.png","modified":0,"renderable":0},{"_id":"source/images/alipay1.png","path":"images/alipay1.png","modified":0,"renderable":0},{"_id":"source/images/coffee.png","path":"images/coffee.png","modified":0,"renderable":0},{"_id":"source/images/coffee1.png","path":"images/coffee1.png","modified":0,"renderable":0},{"_id":"source/images/paypal.png","path":"images/paypal.png","modified":0,"renderable":0},{"_id":"source/images/wechatpay.png","path":"images/wechatpay.png","modified":0,"renderable":0},{"_id":"source/images/wechatpay1.png","path":"images/wechatpay1.png","modified":0,"renderable":0},{"_id":"themes/cactus/source/css/rtl.styl","path":"css/rtl.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/apple-touch-icon.svg","path":"images/apple-touch-icon.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon-32x32-null.ico","path":"images/favicon-32x32-null.ico","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon-32x32.ico","path":"images/favicon-32x32.ico","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon-round.png","path":"images/favicon-round.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/moshed-150x150.gif","path":"images/moshed-150x150.gif","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","path":"lib/clipboard/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","path":"lib/meslo-LG/MesloLGL-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGL-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","path":"lib/meslo-LG/MesloLGL-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","path":"lib/meslo-LG/MesloLGL-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGM-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","path":"lib/meslo-LG/MesloLGM-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","path":"lib/meslo-LG/MesloLGM-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","path":"lib/meslo-LG/MesloLGM-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","path":"lib/meslo-LG/MesloLGS-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGS-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","path":"lib/meslo-LG/MesloLGS-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","path":"lib/meslo-LG/MesloLGS-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","path":"lib/vazir-font/Vazir-Black.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","path":"lib/vazir-font/Vazir-Black.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","path":"lib/vazir-font/Vazir-Black.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","path":"lib/vazir-font/Vazir-Black.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","path":"lib/vazir-font/Vazir-Bold.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","path":"lib/vazir-font/Vazir-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","path":"lib/vazir-font/Vazir-Bold.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","path":"lib/vazir-font/Vazir-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","path":"lib/vazir-font/Vazir-Light.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","path":"lib/vazir-font/Vazir-Light.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","path":"lib/vazir-font/Vazir-Light.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","path":"lib/vazir-font/Vazir-Light.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","path":"lib/vazir-font/Vazir-Medium.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","path":"lib/vazir-font/Vazir-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","path":"lib/vazir-font/Vazir-Medium.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","path":"lib/vazir-font/Vazir-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","path":"lib/vazir-font/Vazir-Thin.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","path":"lib/vazir-font/Vazir-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","path":"lib/vazir-font/Vazir-Thin.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","path":"lib/vazir-font/Vazir-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","path":"lib/vazir-font/Vazir.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","path":"lib/vazir-font/Vazir.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","path":"lib/vazir-font/Vazir.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","path":"lib/vazir-font/Vazir.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","path":"lib/vazir-font/font-face.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","path":"lib/font-awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","path":"lib/font-awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","path":"lib/font-awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","path":"lib/font-awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","path":"lib/font-awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","path":"lib/font-awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","path":"lib/font-awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","path":"lib/font-awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","path":"lib/font-awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/js/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","path":"lib/justified-gallery/css/justifiedGallery.min.css","modified":0,"renderable":1}],"Cache":[{"_id":"source/_data/projects.json","hash":"d4948286827aee8653968976fbde9f1133a6e580","modified":1621440874762},{"_id":"source/about/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1621309906786},{"_id":"source/about/index.md","hash":"8f83880ce082bafde383fd6c586149b6d5408d9b","modified":1621310923904},{"_id":"source/_posts/Markdown Tables.md","hash":"ee6fe958b0b0e374f3afc87a4b6bf973d41d298f","modified":1621666177720},{"_id":"source/_posts/AppleScript.md","hash":"5b2caf78a48633ae7fb3b0b70127aa7ca4710679","modified":1621668305690},{"_id":"source/_posts/Hexo 同时使用两种主题.md","hash":"daadd24855cafc688d29312752c5d182f0489f99","modified":1621613546693},{"_id":"source/_posts/OAuth2.md","hash":"5d95852a79e1775d2cca1419217f8f1e52b0b249","modified":1621613563965},{"_id":"source/_posts/Shell script.md","hash":"79619f8df53161dbe1136d12aa1306da0b5d1e3b","modified":1621695224621},{"_id":"source/_posts/Python - 字符编码.md","hash":"dc0f9d89d6b9d1c3d7a72f6314b6af78c7612b20","modified":1621669610850},{"_id":"source/_posts/Win10笔记本触控板重生.md","hash":"f3881aa1d1b9e16f20656cfb336c7592027748e5","modified":1621613799216},{"_id":"source/_posts/pandas 数据处理.md","hash":"1698a8359a11af7bd5b9f203169224f86a40ea0e","modified":1621666217672},{"_id":"source/_posts/非root用户安装MongoDB.md","hash":"81c18e1bf0491ad3146e9cecabb42973330b48ed","modified":1621613509842},{"_id":"source/_posts/pdf2audio.md","hash":"d8a7d902d97c658a5b224b9ba105997cb68c01a6","modified":1621695179198},{"_id":"source/_posts/压缩已存数据的NTFS硬盘用于TimeMachine.md","hash":"7770964f41b0f31398b9ba5ccf2e22b7c2342878","modified":1621613532299},{"_id":"source/archives/index.md","hash":"4c731a02d3b01c3cc222c45bcfc7e07b36242eb0","modified":1552469799720},{"_id":"source/images/.DS_Store","hash":"b6c6d5f1a50ee70a42b0f62373a8fd9c1089669e","modified":1621604417992},{"_id":"source/categories/index.md","hash":"2730b66c7b53b5af4b93e1cc56d334a3325ad296","modified":1552483592453},{"_id":"source/images/20180618110805000.png","hash":"479a819de1f3f1feacadd3a9110850574e799b34","modified":1598345363264},{"_id":"source/images/20190930140443835.png","hash":"d7d5ea2ee36506976738acf6fff9f44e5dec0f89","modified":1598345356427},{"_id":"source/images/20180618110805001.png","hash":"6d4b17008fa372a4ee98e69dbb1ad8066a11e146","modified":1598345361434},{"_id":"source/images/20210508171525893.png","hash":"d5b1c5305a7b81992e044134f92f0b60b977efb9","modified":1620465326255},{"_id":"source/images/20210512153656860.png","hash":"7f121a442fda75d1e7fdccd60cac7b49d9f77eaa","modified":1620805016925},{"_id":"source/images/20210518030009000.mp3","hash":"05854db7e990ed2be4ac09389fafb02a4d685ba0","modified":1621277891638},{"_id":"source/images/20210512153630363.png","hash":"16a38d56f58bc4f38b6e8003b716661ab573b5ff","modified":1620804990701},{"_id":"source/images/alipay.png","hash":"6021334922c7a27bf628003a0eb63292196c2552","modified":1621602811940},{"_id":"source/images/coffee.png","hash":"0de6123ee7ae6415dde93be10862f16bb2477c91","modified":1621602721535},{"_id":"source/images/coffee1.png","hash":"306cf041605dd4e12762f8f4730a6b0bc928ee2e","modified":1621601857883},{"_id":"source/images/paypal.png","hash":"d1f569b259bc0d8188d25057a0e1e82132d6a775","modified":1621602440346},{"_id":"source/images/alipay1.png","hash":"2585404ec5b354a256727273eecd42a4485c245b","modified":1621600880743},{"_id":"source/images/wechatpay.png","hash":"17ba2ff9323522f5dda6a451b7cac7ceaf1919ff","modified":1621602782604},{"_id":"source/search/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1621076030019},{"_id":"source/images/wechatpay1.png","hash":"a5fb140ed713aecf357ea858468008c379460533","modified":1621601330090},{"_id":"source/scripts/open_in_editor.js","hash":"a8f0b142109d8178baf0d4bf4d00805ab5e55d3d","modified":1552799854488},{"_id":"source/search/index.md","hash":"ed82097a761d2fb842c5145dc00f413d9d3c0f74","modified":1621073006511},{"_id":"source/tags/index.md","hash":"91da2a5b25a43c285182990015780f43d7734170","modified":1621308965801},{"_id":"source/images/20210430113414677.png","hash":"216d5264bffd584a3d384c5750d0731a2d4ff26c","modified":1619753655287},{"_id":"themes/cactus/.gitignore","hash":"c5345a2c5fa6c136dbe2020a405e541b4755a259","modified":1621053213081},{"_id":"themes/cactus/.jshintrc","hash":"2548bd6ce44422edc7e6f9f68061ab47f26c4f57","modified":1621053213081},{"_id":"themes/cactus/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1621067135172},{"_id":"themes/cactus/_config.yml","hash":"e3e75340886f4bf4ad92ba839de040e2548344db","modified":1621648468341},{"_id":"themes/cactus/LICENSE","hash":"346ece39a983b0e7858c11f785cd846cef9eb875","modified":1621053213081},{"_id":"themes/cactus/.stylintrc","hash":"eb5f48e83657928cb0cbee031373b2cd36ca0083","modified":1621053213081},{"_id":"themes/cactus/layout/archive.ejs","hash":"5a23d506dd65f9b5fd1d44a73d5e04c935a899e2","modified":1621053213088},{"_id":"themes/cactus/layout/layout.ejs","hash":"8504004f2ed78914f806c6699d9bd722318cbe56","modified":1621053213088},{"_id":"themes/cactus/README.md","hash":"fb9d93da3cbf7ce6a10d57ac47a3aaafb2d9810e","modified":1621053213082},{"_id":"themes/cactus/gulpfile.js","hash":"0e55606323a45873506c08be6528478c08373e1e","modified":1621053213082},{"_id":"themes/cactus/layout/index.ejs","hash":"aa9406e6306b5313bd08e07ace68eea20c1412a9","modified":1621280187612},{"_id":"themes/cactus/languages/ca.yml","hash":"b79dd2c21dc6697c635e92db1f661a4b8d5d2305","modified":1621053213082},{"_id":"themes/cactus/layout/post.ejs","hash":"4f8827a0c2c278274b8048ce3ddaa9619427dc7d","modified":1621604887403},{"_id":"themes/cactus/languages/de.yml","hash":"43b2f4e078b042aaae0377a4235216a51ed82e0d","modified":1621053213082},{"_id":"themes/cactus/package.json","hash":"a6060fadd36114d8cb74e7ff4c7d073901b5edcd","modified":1621053213088},{"_id":"themes/cactus/languages/default.yml","hash":"34d68cb3e1301a5cfd8864af65fa360540a22df2","modified":1621603141786},{"_id":"themes/cactus/languages/en.yml","hash":"34d68cb3e1301a5cfd8864af65fa360540a22df2","modified":1621603141786},{"_id":"themes/cactus/languages/fa.yml","hash":"63f32e50953af1c4bd0308a4fca5862b5287c2cb","modified":1621053213083},{"_id":"themes/cactus/languages/es.yml","hash":"2b1fc8b0d636123e9ee39017fa20053bd1913a5a","modified":1621053213083},{"_id":"themes/cactus/layout/page.ejs","hash":"c5465d5315a7544aa466b01fd8cfb62917a8bb1d","modified":1621053213088},{"_id":"themes/cactus/languages/kr.yml","hash":"651fb83991c91b13b53ed55740e5402cf0f1c5e8","modified":1621053213083},{"_id":"themes/cactus/languages/it.yml","hash":"62800bcae1f2d2454f87f4bcf4d7593848424f61","modified":1621053213083},{"_id":"themes/cactus/languages/nl.yml","hash":"ac0573352ad2c737a7686bcca498b985e7bd6447","modified":1621053213083},{"_id":"themes/cactus/languages/pt-br.yml","hash":"4859aba788a050c2d5d0b997693b0c8c24b349f7","modified":1621053213084},{"_id":"themes/cactus/languages/fr.yml","hash":"5c07406998f19d219a5a7b65c0d88b6b023f85b2","modified":1621053213083},{"_id":"themes/cactus/languages/pl.yml","hash":"8a2d6dc874d86c38d42c2c861c39590647b5d536","modified":1621053213084},{"_id":"themes/cactus/languages/ru.yml","hash":"81b57fcd1977ef534f4bf303dbc1b4710cc7f057","modified":1621053213084},{"_id":"themes/cactus/languages/vi.yml","hash":"f84893c3ec3e45875c90069e14b17ed3016ed973","modified":1621053213084},{"_id":"themes/cactus/languages/tr.yml","hash":"2702914007e6bade9d6861078c0e179ac05bf48c","modified":1621053213084},{"_id":"themes/cactus/languages/zh-TW.yml","hash":"2f4e050c9b35a67f4a7278cec3a949533c2ac16a","modified":1621053213085},{"_id":"themes/cactus/scripts/cdn.js","hash":"887edec364d51efa7c524446483188c6ad05adaf","modified":1621053213089},{"_id":"themes/cactus/scripts/merge-configs.js","hash":"2048c3415d96b17b9d84aa44bc0c25f1210525f8","modified":1621053213089},{"_id":"themes/cactus/scripts/meta.js","hash":"654868666b6573b2cee7e750b47ad8a3c2ee13a0","modified":1621053213089},{"_id":"themes/cactus/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1621053213089},{"_id":"themes/cactus/languages/zh-CN.yml","hash":"9c99c638ff06cb1d8c728326c22118c159cbb96b","modified":1621604700768},{"_id":"themes/cactus/layout/_partial/head.ejs","hash":"95526bec071998144ee0b0fc33f39bb74e5e9c4f","modified":1621530179962},{"_id":"themes/cactus/layout/_partial/comments.ejs","hash":"113df466f14e307285bc8e9e36076f3e75fbf4d0","modified":1621321621700},{"_id":"themes/cactus/layout/_partial/footer.ejs","hash":"116424c97ec87f0d8124095e73d458eb6f4f12a0","modified":1621053213086},{"_id":"themes/cactus/layout/_partial/scripts.ejs","hash":"3f7bb42d40e96c5737ad85e85bb9e6c82dca51ea","modified":1621053213087},{"_id":"themes/cactus/layout/_partial/donation.ejs","hash":"b4af0b48061bc9eccc485eed552ea0fde0ec694e","modified":1621603090223},{"_id":"themes/cactus/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1621053213086},{"_id":"themes/cactus/layout/_partial/styles.ejs","hash":"c6bc7e8a422c5bb57f88fed1d1b0694d03e24e74","modified":1621053213088},{"_id":"themes/cactus/scripts/page_title.js","hash":"fa662dbdb82779af1b95e35ed7ccdf4866a53dee","modified":1621053213089},{"_id":"themes/cactus/layout/_partial/search.ejs","hash":"8b4bf9cf5db0ce762a31fc3baae0f2fc004bece4","modified":1621053213087},{"_id":"themes/cactus/layout/_partial/header.ejs","hash":"ab9648ad591d87d5a4a3482d909cef56c486fc4e","modified":1621053213086},{"_id":"themes/cactus/source/css/_fonts.styl","hash":"354809b5a64e8a47a66c66fd1a28ac597c1460a6","modified":1621053213091},{"_id":"themes/cactus/source/css/_extend.styl","hash":"6bc3ff9bd9e6825e058600ab043ba7c3e2098dd2","modified":1621092007281},{"_id":"themes/cactus/source/css/_mixins.styl","hash":"1a9e309523df9685e8d088dcff0a809c58e2c392","modified":1621053213109},{"_id":"themes/cactus/source/css/_util.styl","hash":"2bfeb2e2605dd5235693b00c71a212646d2e0410","modified":1621053213121},{"_id":"themes/cactus/source/css/rtl.styl","hash":"ff8700e1626feeb53d905a2df2777bda7d1eca50","modified":1621053213122},{"_id":"themes/cactus/source/css/_variables.styl","hash":"f074dd32c01e1e33d8e5fa8cf91faadb5698536c","modified":1621091049202},{"_id":"themes/cactus/source/css/style.styl","hash":"a772c88b6d4c020e949465198341aa3b5a9ad385","modified":1621570986778},{"_id":"themes/cactus/source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1621057678063},{"_id":"themes/cactus/source/images/apple-touch-icon.svg","hash":"3e5cb6fb0a60ebc3bf8ccf57a821f1a90a9b1947","modified":1550849012712},{"_id":"themes/cactus/source/images/logo.svg","hash":"3e5cb6fb0a60ebc3bf8ccf57a821f1a90a9b1947","modified":1550849012715},{"_id":"themes/cactus/source/images/favicon.ico","hash":"f95e022fa196a5765dce1624c62ae1aa75173f16","modified":1551939668862},{"_id":"themes/cactus/source/images/favicon-32x32-null.ico","hash":"e247305000df5165320017fc59363bcc02b08e68","modified":1550849012714},{"_id":"themes/cactus/layout/_partial/post/actions_desktop.ejs","hash":"b8016c193def987d4c7956486fc494d74fc14d70","modified":1621053213086},{"_id":"themes/cactus/source/js/main.js","hash":"619ac6529d140711e3b14f739a192bb31c4824ff","modified":1621053213126},{"_id":"themes/cactus/layout/_partial/post/actions_mobile.ejs","hash":"79b234ff3c264e66b2e71c819228e62bf92b48e4","modified":1621053213086},{"_id":"themes/cactus/layout/_partial/post/category.ejs","hash":"b5bfa049f17868fb09d9d2a7e1d5279fa0381d37","modified":1621053213086},{"_id":"themes/cactus/layout/_partial/post/date.ejs","hash":"6f2d1aa9562df343b797d25705f1945323c465fb","modified":1621053213087},{"_id":"themes/cactus/source/js/search.js","hash":"90860ff07187cf1cf21224b05e23b5e8fcf6efef","modified":1621053213126},{"_id":"themes/cactus/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1621053213087},{"_id":"themes/cactus/layout/_partial/post/share.ejs","hash":"1a294382bd14d979525b8ed934d807bc7d083e4d","modified":1621053213087},{"_id":"themes/cactus/layout/_partial/post/tag.ejs","hash":"e08fae30da060f49c087f6c121868b08eb55c795","modified":1621053213087},{"_id":"themes/cactus/source/css/_colors/classic.styl","hash":"0f0ec41a4165814ce69688425d5ac4d701b7cc70","modified":1621053213090},{"_id":"themes/cactus/source/css/_colors/dark.styl","hash":"9e1a129149c9d747d5d5fdfcc8837771ce940338","modified":1621053213090},{"_id":"themes/cactus/source/css/_colors/light.styl","hash":"d09f781cb02394850737b3a9efc6693307d5bf09","modified":1621053213090},{"_id":"themes/cactus/source/css/_colors/white.styl","hash":"2b25ad24573bded8b42f9d80112eab9fadbed1a5","modified":1621053213090},{"_id":"themes/cactus/layout/_partial/post/leancloud_visitors.ejs","hash":"0df714758e37f10fc263a9882c51b717e535129e","modified":1621572873463},{"_id":"themes/cactus/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1621053213091},{"_id":"themes/cactus/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1621053213087},{"_id":"themes/cactus/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1621053213091},{"_id":"themes/cactus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1621053213091},{"_id":"themes/cactus/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1621053213091},{"_id":"themes/cactus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1621053213092},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1621053213092},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1621053213092},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1621053213092},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1621053213093},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1621053213092},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1621053213093},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1621053213093},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1621053213093},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1621053213094},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1621053213094},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1621053213094},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1621053213094},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1621053213094},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1621053213094},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1621053213095},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1621053213095},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1621053213095},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1621053213095},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1621053213095},{"_id":"themes/cactus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1621053213096},{"_id":"themes/cactus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1621053213096},{"_id":"themes/cactus/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1621053213097},{"_id":"themes/cactus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1621053213097},{"_id":"themes/cactus/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1621053213097},{"_id":"themes/cactus/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1621053213098},{"_id":"themes/cactus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1621053213098},{"_id":"themes/cactus/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1621053213098},{"_id":"themes/cactus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1621053213099},{"_id":"themes/cactus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1621053213098},{"_id":"themes/cactus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1621053213099},{"_id":"themes/cactus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1621053213099},{"_id":"themes/cactus/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1621053213100},{"_id":"themes/cactus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1621053213099},{"_id":"themes/cactus/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1621053213100},{"_id":"themes/cactus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1621053213100},{"_id":"themes/cactus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1621053213101},{"_id":"themes/cactus/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1621053213101},{"_id":"themes/cactus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1621053213101},{"_id":"themes/cactus/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1621053213102},{"_id":"themes/cactus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1621053213102},{"_id":"themes/cactus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1621053213102},{"_id":"themes/cactus/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1621053213102},{"_id":"themes/cactus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1621053213103},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1621053213093},{"_id":"themes/cactus/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1621053213103},{"_id":"themes/cactus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1621053213103},{"_id":"themes/cactus/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1621053213104},{"_id":"themes/cactus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1621053213105},{"_id":"themes/cactus/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1621053213104},{"_id":"themes/cactus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1621053213104},{"_id":"themes/cactus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1621053213105},{"_id":"themes/cactus/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1621053213105},{"_id":"themes/cactus/source/css/_highlight/pojoaque.styl","hash":"4e7b6b046b8575ac749f6aec4e953a62ada27a36","modified":1621053213105},{"_id":"themes/cactus/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1621053213105},{"_id":"themes/cactus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1621053213106},{"_id":"themes/cactus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1621053213106},{"_id":"themes/cactus/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1621053213107},{"_id":"themes/cactus/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1621053213106},{"_id":"themes/cactus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1621053213107},{"_id":"themes/cactus/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1621053213107},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1621053213107},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1621053213108},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1621053213108},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1621053213107},{"_id":"themes/cactus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1621053213108},{"_id":"themes/cactus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1621053213109},{"_id":"themes/cactus/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1621053213109},{"_id":"themes/cactus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1621053213108},{"_id":"themes/cactus/source/css/_partial/archive.styl","hash":"31aef892437d5734a134c34f2a8a6610a8f671c3","modified":1621053213109},{"_id":"themes/cactus/source/css/_partial/article.styl","hash":"258370d8ab98e63804ead9bc030f633ca97a1235","modified":1621053213109},{"_id":"themes/cactus/source/css/_partial/comments.styl","hash":"acdf76b1302a8d82f66cad0e94400e8fcdb791af","modified":1621421342865},{"_id":"themes/cactus/source/css/_partial/categories.styl","hash":"a43f00e61b3507f130b8a3f8108a4eeca147c2a0","modified":1621053213110},{"_id":"themes/cactus/source/css/_partial/donation.styl","hash":"da68261c41db95a332dc95fb430fbd84ac2fef08","modified":1621603984229},{"_id":"themes/cactus/source/css/_partial/footer.styl","hash":"61c2c7c5f73a0022ec41830bea0812a97f522d7c","modified":1621053213117},{"_id":"themes/cactus/source/css/_partial/index.styl","hash":"59c99f4ea3a73bf47ce030df166c5e33d5de31fb","modified":1621053213118},{"_id":"themes/cactus/source/css/_partial/header.styl","hash":"7f18929e7f4ad6d20da374e8b9f85ce587220a87","modified":1621053213118},{"_id":"themes/cactus/source/css/_partial/pagination.styl","hash":"950bf517bbe7adb9a9aa4eb5ddec74ffc7598787","modified":1621053213118},{"_id":"themes/cactus/source/css/_partial/search.styl","hash":"159be002780c62a77f46947cf854a7342fba24f4","modified":1621053213121},{"_id":"themes/cactus/source/css/_partial/tags.styl","hash":"d571d5c7c960300d29c5f0ec3fe1140322ecd6b3","modified":1621053213121},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","hash":"f42d0a402f08adb3e1e8f85382aca3bd91b4ed17","modified":1621053213126},{"_id":"themes/cactus/source/css/_partial/tooltip.styl","hash":"2daff581ec3efaec840cbfdee512195919c32629","modified":1621053213121},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","hash":"9e8d954c46eaad8b8234fa906e9a268ee354dced","modified":1621053213216},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","hash":"f1c5d7523d21c2bf820d827c9d5df4184c3866dc","modified":1621053213217},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","hash":"9376516725e502f4375e06cc4fa7d940e2c93251","modified":1621053213220},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","hash":"8d4810991aa94f958aff20a9cd381caf338e3061","modified":1621053213220},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","hash":"cba77d3d16f7565f9ea79bd7657f4e00c7fe851f","modified":1621053213225},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","hash":"e520d5f6bf7ea3c1e4f2aef2abbbc6a6f9b697cb","modified":1621053213226},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","hash":"2e8e3c873e6d98acc3c10aa84997104b276e1e68","modified":1621053213229},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","hash":"976b7aa7c2c2c049c548a25b5914cfbda74b0453","modified":1621053213229},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","hash":"baa42f95b41411b9aeaa6c7594e5ccee10d42ac4","modified":1621053213232},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","hash":"f231111b3c778b7a5898ea88c0f150c0e72be468","modified":1621053213232},{"_id":"themes/cactus/source/css/_partial/post/actions_desktop.styl","hash":"a1f36f9a3fd5ffcd832bf39e9402678978035d48","modified":1621053213120},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","hash":"c798391d624b9bb44497a87ffc4f7eb52042dceb","modified":1621053213234},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","hash":"2a95709b15ee45fc2328051038ceedddf83235bb","modified":1621053213235},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","hash":"dc3c0ed67c9abb062b562e8553776f614d2946c2","modified":1621053213235},{"_id":"themes/cactus/source/css/_partial/post/actions_mobile.styl","hash":"0d2966c1d870392476864af8ee3ba312ba30cb82","modified":1621053213121},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","hash":"1b7f2fb5f3110512c9eb245958bc87f2e9992927","modified":1621053213127},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"3ad44eb5c276d1435408f253ca78da729a1aca90","modified":1621053213139},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"f3f0ea4847825806062a9b7a0f629671eb6b6408","modified":1621053213141},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"114f35e6d9053caca2ef6d1e34fea3f87a59245b","modified":1621053213141},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"830f8653e5f4a5331ac0b47c5701f65fe9f1bb32","modified":1621053213141},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"ad8f48b4022498078b089fcdd1e8b47faf496931","modified":1621053213166},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"82f2cbe45882f86427a9ff36ee93b2ba9a31452f","modified":1621053213166},{"_id":"themes/cactus/source/images/favicon-32x32.ico","hash":"aa94e1d78233415540d9c6ee836d8bb72824d97f","modified":1551941767827},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1621053213164},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","hash":"603acd29416644e4b4fb8646abeada1865ba6869","modified":1621053213213},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","hash":"23ee4a19421de9a0ca9dddc5435a8efe5bf28d87","modified":1621053213215},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","hash":"658c1da4f2a0124f6340058daa6873a86e6ba4fc","modified":1621053213220},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","hash":"9ef82b07f3adad7d644c9c3a6d35a0c727bd64e8","modified":1621053213218},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","hash":"b2372b67b9519fb4fa8e05de6c0ddae56845ff79","modified":1621053213225},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","hash":"32f51bf715663f5ca419e138617fc05f7055aef5","modified":1621053213222},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","hash":"17be9f699c30f0384004b46e991db8ac38a9992e","modified":1621053213228},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","hash":"31cdbcc7215d01c9dd2beb8a28f8b7a7de75b9f4","modified":1621053213229},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","hash":"2c0ebb336dd012da8d575cae0ee4d048b65fe6e1","modified":1621053213230},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","hash":"d53fcc2e2d6c9c77613afcd34058be1b75bb0fef","modified":1621053213231},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","hash":"c7a3f2f4d56c4c4ec69d395baf39b55198da0254","modified":1621053213234},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","hash":"bd3a7cb9eb70d36b4cfba8c5a05d234aefeefe3c","modified":1621053213233},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"91daac2bfba5e6a1a15ce44c53eab524d01c7fb0","modified":1621053213138},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"f356aa2e4d9b7245985d312d3bfba180f774e3b7","modified":1621053213138},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"b2c74520c3f506efbfefca867918e5ae28bd5222","modified":1621053213163},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"61f40daca6978e6e7ab761e748c2dd9d236c7586","modified":1621053213163},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"d4987ee41e0e4142d561f76b8ea8e034c4d5d9d2","modified":1621053213129},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f34ee061900ecd1ed3d3fd9f8f47f4e84c6d56bf","modified":1621053213137},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"1622937e49766e21eacf4ac7065b711f0fe580e1","modified":1621053213140},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"be6b63d528286b1be2328d871c9bae95d8d57174","modified":1621053213143},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"91b40a8f284159d9fff81dc522670ef68d562682","modified":1621053213160},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1621053213184},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1621053213201},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1621053213189},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1621053213182},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1621053213202},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1621053213210},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1621053213209},{"_id":"themes/cactus/source/images/favicon-round.png","hash":"758c6a5918edd0f2eb76b7b81f37b194a1e6c661","modified":1551941663927},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1621053213197},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1621053213199},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1621053213212},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1621053213206},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1621053213208},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"29e6c7e5a4d63d2c9563cd208456cb4f8a357868","modified":1621053213134},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"3a090431fdec61a25ed69b9e6f35a6656bde1595","modified":1621053213153},{"_id":"themes/cactus/source/images/moshed-150x150.gif","hash":"61958ed4aa87294a45cce2b495d985a00af10060","modified":1552639224880},{"_id":"public/scripts/open_in_editor.js","hash":"a8f0b142109d8178baf0d4bf4d00805ab5e55d3d","modified":1621695873741},{"_id":"public/atom.xml","hash":"22d3a12cfb5c5a0d82725b6b507540cccfd0a551","modified":1621695873741},{"_id":"public/search.xml","hash":"cbf2e1df8d1224796412b9406bc7550cb8a54557","modified":1621695873741},{"_id":"public/sitemap.xml","hash":"aa232e34f8f77bce1f4bec444d23a67a4c26470e","modified":1621695873741},{"_id":"public/about/index.html","hash":"625cee76730233858caac1553ca3c849780592a5","modified":1621695873741},{"_id":"public/archives/index.html","hash":"d7c1f48e9bf82ba60764b1a95da26c28327a2e04","modified":1621695873741},{"_id":"public/categories/index.html","hash":"ca5f182a5924f7055a1a4199bf9ef94fd66618ca","modified":1621695873741},{"_id":"public/search/index.html","hash":"5eb187193e55959cb6e9ee283c1a59bd4cfa406f","modified":1621695873741},{"_id":"public/tags/index.html","hash":"164a9f49a410003955304b136eb1eed8ea8a0c3d","modified":1621695873741},{"_id":"public/archives/2018/index.html","hash":"09c791a7ed2dec252bbb2198202531d23155144a","modified":1621695873741},{"_id":"public/archives/2018/06/index.html","hash":"43e7dd408ca117a6d0f7d9fc5a74926d4a53a93a","modified":1621695873741},{"_id":"public/archives/2018/07/index.html","hash":"63cc26bbd967d8d0e7cfea5db9eabc6955e88cdd","modified":1621695873741},{"_id":"public/archives/2019/01/index.html","hash":"819ba0b3fe0a4f28a347e1ad4ce6cc4f7a1d6956","modified":1621695873741},{"_id":"public/archives/2019/index.html","hash":"bcd98d0156362b0298d3b453c9286cb00c4c0188","modified":1621695873741},{"_id":"public/archives/2019/03/index.html","hash":"84624196445638b86b6d967938c298cc95ed8b06","modified":1621695873741},{"_id":"public/archives/2019/04/index.html","hash":"85e97673d277e53aebf7e22c97c9459b2e4834e7","modified":1621695873741},{"_id":"public/archives/2019/09/index.html","hash":"80d2b80d9eff827a1419101b9d2fecf0c7aa85a8","modified":1621695873741},{"_id":"public/archives/2021/index.html","hash":"f935d1e75a3993967c932e8dc21b5ad4ed18c893","modified":1621695873741},{"_id":"public/archives/2021/04/index.html","hash":"ddff19d13d1c31fe079083a8b4b906c01a4ffd8a","modified":1621695873741},{"_id":"public/archives/2021/05/index.html","hash":"83d8c70f1bb8f18bda2ef3c441fb8d6ec09857f2","modified":1621695873741},{"_id":"public/index.html","hash":"1a59a418c4a549665544c1758f4ee98c19e811ce","modified":1621695873741},{"_id":"public/page/2/index.html","hash":"8a0a8800d5d605657334345729bc41520ee52316","modified":1621695873741},{"_id":"public/tags/Handbook/index.html","hash":"354aaafe84e13da2d78e5a1ce6cf4de7743bb5ee","modified":1621695873741},{"_id":"public/tags/hexo/index.html","hash":"17729e506106ed8900a7fec190d77283ff7dedc1","modified":1621695873741},{"_id":"public/tags/Productivity/index.html","hash":"9af23a549749fedca2337cd9c48849ee497963c7","modified":1621695873741},{"_id":"public/tags/dev/index.html","hash":"85800b53db09faf074bc419909b676e4bc9a22a4","modified":1621695873741},{"_id":"public/tags/python/index.html","hash":"63c04544c828d37ed0c12cf781a1971970fbe9b9","modified":1621695873741},{"_id":"public/tags/Windows/index.html","hash":"31a3f6a49ff20cf665479d144303f9d13a5b3c76","modified":1621695873741},{"_id":"public/tags/project/index.html","hash":"3b8557320012307a941918acdc2566d4ddbfb0f0","modified":1621695873741},{"_id":"public/tags/intro/index.html","hash":"8f6d590820d7ef1b6ccf0fa4b0cddb4e1cb443e6","modified":1621695873741},{"_id":"public/tags/ML/index.html","hash":"2288d65b372e393eeee5f3fd59732ad34716eb87","modified":1621695873741},{"_id":"public/tags/Mac/index.html","hash":"9c03bf5ecca67eff7a530fc08b1510e344e295be","modified":1621695873741},{"_id":"public/Convert-PDFs-to-Audiobooks-with-Machine-Learning/index.html","hash":"c90e3c3d8537ca918fbd9f2af95c9d8badbcedef","modified":1621695873741},{"_id":"public/Request-to-Cloud-Storage-API-in-Apps-Script-with-OAuth2/index.html","hash":"9303686e61da76485cfad2a540435d8ff8ade59c","modified":1621695873741},{"_id":"public/encoding-and-decoding-in-Python/index.html","hash":"11e9210f7f75e16292f14aaf7a0bdce904ac4e07","modified":1621695873741},{"_id":"public/Use-NTFS-hard-drive-to-create-Mac-TimeMachine/index.html","hash":"4492f622efddd3cc2b5a4181c3d4a9925b655f19","modified":1621695873741},{"_id":"public/Use-Two-Themes-in-Hexo/index.html","hash":"2819c40bd53d29c2ba6bf529c1baa7bee0777373","modified":1621695873741},{"_id":"public/shell-script/index.html","hash":"1b295e712f71e22ae9986839d94ae4277b109fdc","modified":1621695873741},{"_id":"public/AppleScript/index.html","hash":"4eb47b57f3ca5a2a1dcc3d0549c7d689727dcc9b","modified":1621695873741},{"_id":"public/Markdown-Tables/index.html","hash":"9f437b34daa4fa6896c62df34fa4b3847382a495","modified":1621695873741},{"_id":"public/data-processing-with-pandas/index.html","hash":"60fed5edd8de2bb81d167c0e359617a2f08e5bbc","modified":1621695873741},{"_id":"public/Install-MongoDB/index.html","hash":"3fd69586b12979084e596cc25cc2443b91a7a470","modified":1621695873741},{"_id":"public/Rebirth-of-Touchpad-on-Win10-Laptop/index.html","hash":"cf8f8333ed9568ecc726a140dcd17dc371711d5d","modified":1621695873741},{"_id":"public/images/20180618110805000.png","hash":"479a819de1f3f1feacadd3a9110850574e799b34","modified":1621695873741},{"_id":"public/images/20180618110805001.png","hash":"6d4b17008fa372a4ee98e69dbb1ad8066a11e146","modified":1621695873741},{"_id":"public/images/20190930140443835.png","hash":"d7d5ea2ee36506976738acf6fff9f44e5dec0f89","modified":1621695873741},{"_id":"public/images/20210508171525893.png","hash":"d5b1c5305a7b81992e044134f92f0b60b977efb9","modified":1621695873741},{"_id":"public/images/20210512153630363.png","hash":"16a38d56f58bc4f38b6e8003b716661ab573b5ff","modified":1621695873741},{"_id":"public/images/20210512153656860.png","hash":"7f121a442fda75d1e7fdccd60cac7b49d9f77eaa","modified":1621695873741},{"_id":"public/images/alipay1.png","hash":"2585404ec5b354a256727273eecd42a4485c245b","modified":1621695873741},{"_id":"public/images/20210518030009000.mp3","hash":"05854db7e990ed2be4ac09389fafb02a4d685ba0","modified":1621695873741},{"_id":"public/images/alipay.png","hash":"6021334922c7a27bf628003a0eb63292196c2552","modified":1621695873741},{"_id":"public/images/coffee.png","hash":"0de6123ee7ae6415dde93be10862f16bb2477c91","modified":1621695873741},{"_id":"public/images/coffee1.png","hash":"306cf041605dd4e12762f8f4730a6b0bc928ee2e","modified":1621695873741},{"_id":"public/images/wechatpay.png","hash":"17ba2ff9323522f5dda6a451b7cac7ceaf1919ff","modified":1621695873741},{"_id":"public/images/paypal.png","hash":"d1f569b259bc0d8188d25057a0e1e82132d6a775","modified":1621695873741},{"_id":"public/images/wechatpay1.png","hash":"a5fb140ed713aecf357ea858468008c379460533","modified":1621695873741},{"_id":"public/images/apple-touch-icon.svg","hash":"3e5cb6fb0a60ebc3bf8ccf57a821f1a90a9b1947","modified":1621695873741},{"_id":"public/images/favicon-32x32-null.ico","hash":"e247305000df5165320017fc59363bcc02b08e68","modified":1621695873741},{"_id":"public/images/logo.svg","hash":"3e5cb6fb0a60ebc3bf8ccf57a821f1a90a9b1947","modified":1621695873741},{"_id":"public/images/favicon.ico","hash":"f95e022fa196a5765dce1624c62ae1aa75173f16","modified":1621695873741},{"_id":"public/lib/vazir-font/Vazir-Black.woff","hash":"9e8d954c46eaad8b8234fa906e9a268ee354dced","modified":1621695873741},{"_id":"public/lib/vazir-font/Vazir-Black.woff2","hash":"f1c5d7523d21c2bf820d827c9d5df4184c3866dc","modified":1621695873741},{"_id":"public/lib/vazir-font/Vazir-Bold.woff","hash":"9376516725e502f4375e06cc4fa7d940e2c93251","modified":1621695873741},{"_id":"public/lib/vazir-font/Vazir-Bold.woff2","hash":"8d4810991aa94f958aff20a9cd381caf338e3061","modified":1621695873741},{"_id":"public/lib/vazir-font/Vazir-Light.woff2","hash":"e520d5f6bf7ea3c1e4f2aef2abbbc6a6f9b697cb","modified":1621695873741},{"_id":"public/lib/vazir-font/Vazir-Medium.woff","hash":"2e8e3c873e6d98acc3c10aa84997104b276e1e68","modified":1621695873741},{"_id":"public/lib/vazir-font/Vazir-Medium.woff2","hash":"976b7aa7c2c2c049c548a25b5914cfbda74b0453","modified":1621695873741},{"_id":"public/lib/vazir-font/Vazir-Thin.woff","hash":"f231111b3c778b7a5898ea88c0f150c0e72be468","modified":1621695873741},{"_id":"public/lib/vazir-font/Vazir-Thin.woff2","hash":"baa42f95b41411b9aeaa6c7594e5ccee10d42ac4","modified":1621695873741},{"_id":"public/lib/vazir-font/Vazir.woff2","hash":"dc3c0ed67c9abb062b562e8553776f614d2946c2","modified":1621695873741},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"f3f0ea4847825806062a9b7a0f629671eb6b6408","modified":1621695873741},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"830f8653e5f4a5331ac0b47c5701f65fe9f1bb32","modified":1621695873741},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"114f35e6d9053caca2ef6d1e34fea3f87a59245b","modified":1621695873741},{"_id":"public/images/favicon-32x32.ico","hash":"aa94e1d78233415540d9c6ee836d8bb72824d97f","modified":1621695873741},{"_id":"public/lib/vazir-font/Vazir-Black.eot","hash":"603acd29416644e4b4fb8646abeada1865ba6869","modified":1621695873741},{"_id":"public/lib/vazir-font/Vazir-Black.ttf","hash":"23ee4a19421de9a0ca9dddc5435a8efe5bf28d87","modified":1621695873741},{"_id":"public/lib/vazir-font/Vazir-Bold.eot","hash":"9ef82b07f3adad7d644c9c3a6d35a0c727bd64e8","modified":1621695873741},{"_id":"public/lib/vazir-font/Vazir-Bold.ttf","hash":"658c1da4f2a0124f6340058daa6873a86e6ba4fc","modified":1621695873741},{"_id":"public/lib/vazir-font/Vazir-Light.eot","hash":"32f51bf715663f5ca419e138617fc05f7055aef5","modified":1621695873741},{"_id":"public/lib/vazir-font/Vazir-Light.woff","hash":"cba77d3d16f7565f9ea79bd7657f4e00c7fe851f","modified":1621695873741},{"_id":"public/lib/vazir-font/Vazir-Light.ttf","hash":"b2372b67b9519fb4fa8e05de6c0ddae56845ff79","modified":1621695873741},{"_id":"public/lib/vazir-font/Vazir-Medium.eot","hash":"17be9f699c30f0384004b46e991db8ac38a9992e","modified":1621695873741},{"_id":"public/lib/vazir-font/Vazir-Medium.ttf","hash":"31cdbcc7215d01c9dd2beb8a28f8b7a7de75b9f4","modified":1621695873741},{"_id":"public/lib/vazir-font/Vazir-Thin.ttf","hash":"d53fcc2e2d6c9c77613afcd34058be1b75bb0fef","modified":1621695873741},{"_id":"public/lib/vazir-font/Vazir-Thin.eot","hash":"2c0ebb336dd012da8d575cae0ee4d048b65fe6e1","modified":1621695873741},{"_id":"public/lib/vazir-font/Vazir.eot","hash":"bd3a7cb9eb70d36b4cfba8c5a05d234aefeefe3c","modified":1621695873741},{"_id":"public/lib/vazir-font/Vazir.ttf","hash":"c7a3f2f4d56c4c4ec69d395baf39b55198da0254","modified":1621695873741},{"_id":"public/lib/vazir-font/Vazir.woff","hash":"c798391d624b9bb44497a87ffc4f7eb52042dceb","modified":1621695873741},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"3ad44eb5c276d1435408f253ca78da729a1aca90","modified":1621695873741},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"91daac2bfba5e6a1a15ce44c53eab524d01c7fb0","modified":1621695873741},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"f356aa2e4d9b7245985d312d3bfba180f774e3b7","modified":1621695873741},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"61f40daca6978e6e7ab761e748c2dd9d236c7586","modified":1621695873741},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"b2c74520c3f506efbfefca867918e5ae28bd5222","modified":1621695873741},{"_id":"public/css/rtl.css","hash":"9589fac02a34fd9084f805f801889028756bbb65","modified":1621695873741},{"_id":"public/js/main.js","hash":"619ac6529d140711e3b14f739a192bb31c4824ff","modified":1621695873741},{"_id":"public/lib/clipboard/clipboard.min.js","hash":"f42d0a402f08adb3e1e8f85382aca3bd91b4ed17","modified":1621695873741},{"_id":"public/js/search.js","hash":"90860ff07187cf1cf21224b05e23b5e8fcf6efef","modified":1621695873741},{"_id":"public/lib/vazir-font/font-face.css","hash":"2a95709b15ee45fc2328051038ceedddf83235bb","modified":1621695873741},{"_id":"public/lib/justified-gallery/css/justifiedGallery.min.css","hash":"82f2cbe45882f86427a9ff36ee93b2ba9a31452f","modified":1621695873741},{"_id":"public/css/style.css","hash":"c61c130c6e5d495f0c2f4969bee2bdfbc569ca9e","modified":1621695873741},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"d4987ee41e0e4142d561f76b8ea8e034c4d5d9d2","modified":1621695873741},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f34ee061900ecd1ed3d3fd9f8f47f4e84c6d56bf","modified":1621695873741},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"1622937e49766e21eacf4ac7065b711f0fe580e1","modified":1621695873741},{"_id":"public/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"ad8f48b4022498078b089fcdd1e8b47faf496931","modified":1621695873741},{"_id":"public/images/20210430113414677.png","hash":"216d5264bffd584a3d384c5750d0731a2d4ff26c","modified":1621695873741},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"be6b63d528286b1be2328d871c9bae95d8d57174","modified":1621695873741},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"91b40a8f284159d9fff81dc522670ef68d562682","modified":1621695873741},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"1b7f2fb5f3110512c9eb245958bc87f2e9992927","modified":1621695873741},{"_id":"public/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1621695873741},{"_id":"public/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1621695873741},{"_id":"public/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1621695873741},{"_id":"public/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1621695873741},{"_id":"public/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1621695873741},{"_id":"public/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1621695873741},{"_id":"public/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1621695873741},{"_id":"public/lib/jquery/jquery.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1621695873741},{"_id":"public/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1621695873741},{"_id":"public/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1621695873741},{"_id":"public/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1621695873741},{"_id":"public/images/favicon-round.png","hash":"758c6a5918edd0f2eb76b7b81f37b194a1e6c661","modified":1621695873741},{"_id":"public/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1621695873741},{"_id":"public/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1621695873741},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"29e6c7e5a4d63d2c9563cd208456cb4f8a357868","modified":1621695873741},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"3a090431fdec61a25ed69b9e6f35a6656bde1595","modified":1621695873741},{"_id":"public/images/moshed-150x150.gif","hash":"61958ed4aa87294a45cce2b495d985a00af10060","modified":1621695873741}],"Category":[],"Data":[{"_id":"projects","data":[{"name":"PDF2Audio","url":"Convert PDFs to Audiobooks with Machine Learning","desc":"Convert PDFs to Audiobooks with Machine Learning"},{"name":"Alfred PKManager","url":"https://github.com/Konfido/alfred-pkmanager","desc":"A handful Alfred Workflow which helps searching and managing your Personal Knowledge Markdown notes."}]}],"Page":[{"title":"About","date":"2021-05-18T03:55:26.000Z","_content":"\n\n\n\n\nHello\n","source":"about/index.md","raw":"---\ntitle: About\ndate: 2021-05-18 11:55:26\n---\n\n\n\n\n\nHello\n","updated":"2021-05-18T04:08:43.904Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckozvuos90000dbsg1lzs5pds","content":"<p>Hello</p>\n","site":{"data":{"projects":[{"name":"PDF2Audio","url":"Convert PDFs to Audiobooks with Machine Learning","desc":"Convert PDFs to Audiobooks with Machine Learning"},{"name":"Alfred PKManager","url":"https://github.com/Konfido/alfred-pkmanager","desc":"A handful Alfred Workflow which helps searching and managing your Personal Knowledge Markdown notes."}]}},"excerpt":"","more":"<p>Hello</p>\n"},{"title":"archives","date":"2019-03-12T18:36:39.000Z","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2019-03-13 02:36:39\n---\n","updated":"2019-03-13T09:36:39.720Z","path":"archives/index.html","comments":1,"layout":"page","_id":"ckozvuosg0002dbsg8c2aafrn","content":"\n","site":{"data":{"projects":[{"name":"PDF2Audio","url":"Convert PDFs to Audiobooks with Machine Learning","desc":"Convert PDFs to Audiobooks with Machine Learning"},{"name":"Alfred PKManager","url":"https://github.com/Konfido/alfred-pkmanager","desc":"A handful Alfred Workflow which helps searching and managing your Personal Knowledge Markdown notes."}]}},"excerpt":"","more":"\n"},{"title":"categories","date":"2019-03-12T18:14:57.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-03-13 02:14:57\ntype: \"categories\"\n---\n","updated":"2019-03-13T13:26:32.453Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckozvuosj0005dbsgbevd4fcj","content":"\n","site":{"data":{"projects":[{"name":"PDF2Audio","url":"Convert PDFs to Audiobooks with Machine Learning","desc":"Convert PDFs to Audiobooks with Machine Learning"},{"name":"Alfred PKManager","url":"https://github.com/Konfido/alfred-pkmanager","desc":"A handful Alfred Workflow which helps searching and managing your Personal Knowledge Markdown notes."}]}},"excerpt":"","more":"\n"},{"_content":"var exec = require('child_process').exec;\n\nhexo.on('new', function (data) {\n    exec('open -a \"/Applications/Typora.app\" ' + data.path);\n});\n","source":"scripts/open_in_editor.js","raw":"var exec = require('child_process').exec;\n\nhexo.on('new', function (data) {\n    exec('open -a \"/Applications/Typora.app\" ' + data.path);\n});\n","date":"2021-05-15T04:49:38.800Z","updated":"2019-03-17T05:17:34.488Z","path":"scripts/open_in_editor.js","layout":"false","title":"","comments":1,"_id":"ckozvuosl0007dbsgefq53yea","content":"var exec = require('child_process').exec;\n\nhexo.on('new', function (data) {\n    exec('open -a \"/Applications/Typora.app\" ' + data.path);\n});\n","site":{"data":{"projects":[{"name":"PDF2Audio","url":"Convert PDFs to Audiobooks with Machine Learning","desc":"Convert PDFs to Audiobooks with Machine Learning"},{"name":"Alfred PKManager","url":"https://github.com/Konfido/alfred-pkmanager","desc":"A handful Alfred Workflow which helps searching and managing your Personal Knowledge Markdown notes."}]}},"excerpt":"","more":"var exec = require('child_process').exec;\n\nhexo.on('new', function (data) {\n    exec('open -a \"/Applications/Typora.app\" ' + data.path);\n});\n"},{"title":"search","date":"2019-03-12T22:01:50.000Z","type":"search","_content":"","source":"search/index.md","raw":"---\ntitle: search\ndate: 2019-03-13 06:01:50\ntype: search\n---","updated":"2021-05-15T10:03:26.511Z","path":"search/index.html","comments":1,"layout":"page","_id":"ckozvuosn0009dbsghxh46xhq","content":"\n","site":{"data":{"projects":[{"name":"PDF2Audio","url":"Convert PDFs to Audiobooks with Machine Learning","desc":"Convert PDFs to Audiobooks with Machine Learning"},{"name":"Alfred PKManager","url":"https://github.com/Konfido/alfred-pkmanager","desc":"A handful Alfred Workflow which helps searching and managing your Personal Knowledge Markdown notes."}]}},"excerpt":"","more":"\n"},{"title":"tags","date":"2019-03-12T18:37:43.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-03-13 02:37:43\ntype: \"tags\"\n---\n","updated":"2021-05-18T03:36:05.801Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckozvuosp000ddbsg4pg0enut","content":"\n","site":{"data":{"projects":[{"name":"PDF2Audio","url":"Convert PDFs to Audiobooks with Machine Learning","desc":"Convert PDFs to Audiobooks with Machine Learning"},{"name":"Alfred PKManager","url":"https://github.com/Konfido/alfred-pkmanager","desc":"A handful Alfred Workflow which helps searching and managing your Personal Knowledge Markdown notes."}]}},"excerpt":"","more":"\n"}],"Post":[{"title":"AppleScript","date":"2019-01-12T14:08:07.000Z","updated":"2020-08-30T05:55:02.000Z","blogged":true,"urlname":"AppleScript","_content":"\n\n\n## Basic\n\n- 运行：`osascript foo.scpt`\n\n- 注释：\n\n    - 行注释，可用在行尾：`--` or `#`\n    - 块注释：`(* *)`\n\n- 数据类型：number，string，list，record (字典)\n\n    - 设置list\n\n        ```objc\n        set L to {1,2,3,\"ss\"}\n        set item 3 of L to \"xx\"\n        ```\n\n    - 转换：`set n2s to \"123\" as number`\n\n- Keywords\n\n    - `me` refers to the current script\n        - `my` is synonym for `of me`\n    - `it` refers to the current target (A `tell` statement specifies a default target)\n        - `its` is synonym for `of it`\n\n### 流程控制\n\n- 条件语句\n\n    ```objc\n    if a=0 then\n        xxx\n    else if a=1 then\n        xxx\n    else\n        xxx\n    end if\n    ```\n\n- 循环语句\n\n    - `times`\n      \n      ```objc\n      repeat 10 times\n          xxx\n      end repeat\n      ```\n      \n    - `from .. to ..`\n      \n      ```objc\n      repeat with n from 0 to 10 by 1\n          xxx\n      end repeat\n      ```\n      \n    - `until`\n      \n      ```objc\n      repeat until n > 10\n          xxx\n          set n to n +3\n      end repeat\n      ```\n\n- `try`\n\n    ```objc\n    try\n        -- Do something\n    on error\n        -- other thing\n    end try\n    ```\n\n### Function/Handler\n\n- `on` or `to`\n\n    ```objc\n    on foo()\n        display dialog \"Error!\"\n        return \"xx\"\n    end foo\n        \n    foo()\n    set R to foo()\n    ```\n\n- 带参数\n\n    ```objc\n    to foo(theErrorMessage, theButtons)\n        display dialog the theErrorMessage buttons theButtons\n    end displayError\n        \n    foo(\"xxx\",{\"ok\",\"cancel\"})\n    ```\n\n- 交叉参数\n\n    ```objc\n    on foo:E withButtons:B\n        display dialog E buttons B\n    end foo:withButtons:\n    ```\n\n\n\n### 交互\n\n- 发声\n\n    - `say \"hello world\" using \"Victoria\"`\n    - `beep 2`\n\n- dialog 弹窗：\n\n    - `display dialog \"xxx\"`\n\n    - 获取输入\n\n        ```objc\n        display dialog \"xxx\" default answer \"\"\n        set a to text returned of result\n        ```\n\n    - 获取点击项\n\n        ```objc\n        set message to \"Hello world!\"\n        set DWindows to display dialog message buttons {\"OK\", \"Cancel\"}\n        set selectedResult to button returned of DWindows\n        Say selectedResult\n        ```\n\n- notification\n\n    ```objc\n    display notification \"...\" with title \"xxx\" subtitle \"hhh\"\n    ```\n\n- 列表选择\n\n    ```objc\n    choose from list {\"aa\",\"bb\",\"cc\"} with title \"Names\" ¬\n        with prompt \"请选择：\" default items {\"bb\"} ¬\n        with empty selection allowed and multiple selections allowed\n    ```\n\n- 文件/夹选择\n\n    - `choose file of type(\"txt\") with prompt \"请选择\" `\n    - `choose folder`\n\n    \n\n###  模拟行为\n\n- 唤起应用至frontmost：`tell application \"Chrome\" to activate`\n\n- 延时/s：`delay 2`\n\n- 模型点击：`click`\n\n    - 位置\n      \n        ```objective-c\n        tell application \"System Events\"\n            click at {123,456}\n        end tell\n        ```\n        \n    - 元素\n      \n        ```objective-c\n        tell application \"System Events\"\n            tell menu bar 1 of process \"Chrome\"\n            \tclick menu item \"新标签页\" of menu \"文件\" of menu bar item \"文件\"\n            end tell\n        end tell\n        ```\n\n- 键盘输入\n\n    - `key code 48 using command down `：`⌘Tab`\n      \n        - List of AppleScript [key codes](https://eastmanreference.com/complete-list-of-applescript-key-codes)\n    - `keystroke \"hello\"`\n\n        \n\n- 剪贴板：`clipboard`\n\n    - `set c to get the clipboard`\n    - `set the clipboard to \"xxx\"`\n\n\n\n## Advanced\n\n### AppleScript中执行Shell指令\n\n- Basic\n\n    ```objective-c\n    do shell script \"date +'%T'\"\n    ```\n\n- ==传递变量==\n\n    ```objective-c\n    set foo to \"test\"\n    do shell script \"echo \" & foo\n    ```\n\n    ```objective-c\n    do shell script \"echo \" & quoted form of foo\n    ```\n\n### Shell 中执行 AppleScript\n\n1. 两种方法\n\n    1. `osascript -e \"echo \\\"Hello\\\"`\n\n    2. 命令语句较多时\n\n        ```shell\n        osascript <<EOF\n            say \"Hello\"\n            say \"World\"\n        EOF\n        ```\n\n2. 传递shell中的变量\n\n    1. `osascript -e \"echo \\\"$foo\\\" \"`\n\n    2. 命令语句较多时\n\n        ```shell\n        osascript <<EOF\n        set a to \"Hello\"\n        set b to \"$foo\"\t\t# 传递shell中的变量\n        EOF\n        ```\n\n3. Shell 获取 Applescript 结果\n\n    ```bash\n    finder=$(osascript -e \"set dir to POSIX path of (choose folder)\")\n    ```\n\n    \n\n## Others\n\n### Tips\n\n- `AppleScript's Dictionary`: Press `⌘⇧O` to open AppleScript dictionary of this app.\n\n- `Watch Me Do`（\"我做给您看\"）\n  \n    - 点击AutoMator的录制按钮（红色小圆点）\n    - 实际演示一遍想要完成的操作后，结束录制\n- 将自动生成的动作序列拖到下方空白处，可以看到转成的AppleScript细节（uiScript）\n  \n- `Accessibility Inspector`\n\n    - Check the UI element tree, properties, attribute ...\n\n      ```objc\n      return attribute of textArea\n      return the value of attribute \"AXValue\" of xxx\n      ```\n\n      ```objc\n      get properties of front window\n      # {.., name:\"foo\", description: \"xxx\", ...}\n      get name of front window\n      # \"foo\"\n      ```\n\n- 语句过长时，可以使用符号 `¬` 断开\n\n    ```objc\n    tell process \"xxxxx\" to set A to a reference ¬\n        to (first window whose name of attributes contains \".txt\")\n    ```\n\n- 使用语句`log variable`进行设置断点进行debug\n\n\n\n### 应用\n\n- toggle dock's preferences of \"autohide\"\n\n    ```objc\n    tell application \"System Events\"\n        tell dock preferences\n            if autohide is true then\n                set properties to {autohide:false}\n            else\n                set properties to {autohide:true}\n            end if\n        end tell\n    end tell\n    ```\n\n\n### Exaples\n\n- [https://github.com/unforswearing/applescript](https://github.com/unforswearing/applescript)\n\n    \n\n### Documentation\n\n- AppleScript Language [Guide](https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html#/)\n\n- Mac Automation Scripting [Guide](https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/index.html#//apple_ref/doc/uid/TP40016239-CH56-SW1)\n\n","source":"_posts/AppleScript.md","raw":"---\ntitle: AppleScript\ntags: [Handbook]\ndate: 2019-01-12 22:08:07\nupdated: 2020-08-30 13:55:02\nblogged: true\nurlname: AppleScript\n---\n\n\n\n## Basic\n\n- 运行：`osascript foo.scpt`\n\n- 注释：\n\n    - 行注释，可用在行尾：`--` or `#`\n    - 块注释：`(* *)`\n\n- 数据类型：number，string，list，record (字典)\n\n    - 设置list\n\n        ```objc\n        set L to {1,2,3,\"ss\"}\n        set item 3 of L to \"xx\"\n        ```\n\n    - 转换：`set n2s to \"123\" as number`\n\n- Keywords\n\n    - `me` refers to the current script\n        - `my` is synonym for `of me`\n    - `it` refers to the current target (A `tell` statement specifies a default target)\n        - `its` is synonym for `of it`\n\n### 流程控制\n\n- 条件语句\n\n    ```objc\n    if a=0 then\n        xxx\n    else if a=1 then\n        xxx\n    else\n        xxx\n    end if\n    ```\n\n- 循环语句\n\n    - `times`\n      \n      ```objc\n      repeat 10 times\n          xxx\n      end repeat\n      ```\n      \n    - `from .. to ..`\n      \n      ```objc\n      repeat with n from 0 to 10 by 1\n          xxx\n      end repeat\n      ```\n      \n    - `until`\n      \n      ```objc\n      repeat until n > 10\n          xxx\n          set n to n +3\n      end repeat\n      ```\n\n- `try`\n\n    ```objc\n    try\n        -- Do something\n    on error\n        -- other thing\n    end try\n    ```\n\n### Function/Handler\n\n- `on` or `to`\n\n    ```objc\n    on foo()\n        display dialog \"Error!\"\n        return \"xx\"\n    end foo\n        \n    foo()\n    set R to foo()\n    ```\n\n- 带参数\n\n    ```objc\n    to foo(theErrorMessage, theButtons)\n        display dialog the theErrorMessage buttons theButtons\n    end displayError\n        \n    foo(\"xxx\",{\"ok\",\"cancel\"})\n    ```\n\n- 交叉参数\n\n    ```objc\n    on foo:E withButtons:B\n        display dialog E buttons B\n    end foo:withButtons:\n    ```\n\n\n\n### 交互\n\n- 发声\n\n    - `say \"hello world\" using \"Victoria\"`\n    - `beep 2`\n\n- dialog 弹窗：\n\n    - `display dialog \"xxx\"`\n\n    - 获取输入\n\n        ```objc\n        display dialog \"xxx\" default answer \"\"\n        set a to text returned of result\n        ```\n\n    - 获取点击项\n\n        ```objc\n        set message to \"Hello world!\"\n        set DWindows to display dialog message buttons {\"OK\", \"Cancel\"}\n        set selectedResult to button returned of DWindows\n        Say selectedResult\n        ```\n\n- notification\n\n    ```objc\n    display notification \"...\" with title \"xxx\" subtitle \"hhh\"\n    ```\n\n- 列表选择\n\n    ```objc\n    choose from list {\"aa\",\"bb\",\"cc\"} with title \"Names\" ¬\n        with prompt \"请选择：\" default items {\"bb\"} ¬\n        with empty selection allowed and multiple selections allowed\n    ```\n\n- 文件/夹选择\n\n    - `choose file of type(\"txt\") with prompt \"请选择\" `\n    - `choose folder`\n\n    \n\n###  模拟行为\n\n- 唤起应用至frontmost：`tell application \"Chrome\" to activate`\n\n- 延时/s：`delay 2`\n\n- 模型点击：`click`\n\n    - 位置\n      \n        ```objective-c\n        tell application \"System Events\"\n            click at {123,456}\n        end tell\n        ```\n        \n    - 元素\n      \n        ```objective-c\n        tell application \"System Events\"\n            tell menu bar 1 of process \"Chrome\"\n            \tclick menu item \"新标签页\" of menu \"文件\" of menu bar item \"文件\"\n            end tell\n        end tell\n        ```\n\n- 键盘输入\n\n    - `key code 48 using command down `：`⌘Tab`\n      \n        - List of AppleScript [key codes](https://eastmanreference.com/complete-list-of-applescript-key-codes)\n    - `keystroke \"hello\"`\n\n        \n\n- 剪贴板：`clipboard`\n\n    - `set c to get the clipboard`\n    - `set the clipboard to \"xxx\"`\n\n\n\n## Advanced\n\n### AppleScript中执行Shell指令\n\n- Basic\n\n    ```objective-c\n    do shell script \"date +'%T'\"\n    ```\n\n- ==传递变量==\n\n    ```objective-c\n    set foo to \"test\"\n    do shell script \"echo \" & foo\n    ```\n\n    ```objective-c\n    do shell script \"echo \" & quoted form of foo\n    ```\n\n### Shell 中执行 AppleScript\n\n1. 两种方法\n\n    1. `osascript -e \"echo \\\"Hello\\\"`\n\n    2. 命令语句较多时\n\n        ```shell\n        osascript <<EOF\n            say \"Hello\"\n            say \"World\"\n        EOF\n        ```\n\n2. 传递shell中的变量\n\n    1. `osascript -e \"echo \\\"$foo\\\" \"`\n\n    2. 命令语句较多时\n\n        ```shell\n        osascript <<EOF\n        set a to \"Hello\"\n        set b to \"$foo\"\t\t# 传递shell中的变量\n        EOF\n        ```\n\n3. Shell 获取 Applescript 结果\n\n    ```bash\n    finder=$(osascript -e \"set dir to POSIX path of (choose folder)\")\n    ```\n\n    \n\n## Others\n\n### Tips\n\n- `AppleScript's Dictionary`: Press `⌘⇧O` to open AppleScript dictionary of this app.\n\n- `Watch Me Do`（\"我做给您看\"）\n  \n    - 点击AutoMator的录制按钮（红色小圆点）\n    - 实际演示一遍想要完成的操作后，结束录制\n- 将自动生成的动作序列拖到下方空白处，可以看到转成的AppleScript细节（uiScript）\n  \n- `Accessibility Inspector`\n\n    - Check the UI element tree, properties, attribute ...\n\n      ```objc\n      return attribute of textArea\n      return the value of attribute \"AXValue\" of xxx\n      ```\n\n      ```objc\n      get properties of front window\n      # {.., name:\"foo\", description: \"xxx\", ...}\n      get name of front window\n      # \"foo\"\n      ```\n\n- 语句过长时，可以使用符号 `¬` 断开\n\n    ```objc\n    tell process \"xxxxx\" to set A to a reference ¬\n        to (first window whose name of attributes contains \".txt\")\n    ```\n\n- 使用语句`log variable`进行设置断点进行debug\n\n\n\n### 应用\n\n- toggle dock's preferences of \"autohide\"\n\n    ```objc\n    tell application \"System Events\"\n        tell dock preferences\n            if autohide is true then\n                set properties to {autohide:false}\n            else\n                set properties to {autohide:true}\n            end if\n        end tell\n    end tell\n    ```\n\n\n### Exaples\n\n- [https://github.com/unforswearing/applescript](https://github.com/unforswearing/applescript)\n\n    \n\n### Documentation\n\n- AppleScript Language [Guide](https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html#/)\n\n- Mac Automation Scripting [Guide](https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/index.html#//apple_ref/doc/uid/TP40016239-CH56-SW1)\n\n","slug":"AppleScript","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckozvuosd0001dbsg9mhtebi5","content":"<h2 id=\"basic\">Basic</h2>\n<ul>\n<li><p>运行：<code>osascript foo.scpt</code></p></li>\n<li><p>注释：</p>\n<ul>\n<li>行注释，可用在行尾：<code>--</code> or <code>#</code></li>\n<li>块注释：<code>(* *)</code></li>\n</ul></li>\n<li><p>数据类型：number，string，list，record (字典)</p>\n<ul>\n<li><p>设置list</p>\n<p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set L to &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">&quot;ss&quot;</span>&#125;</span><br><span class=\"line\">set item <span class=\"number\">3</span> of L to <span class=\"string\">&quot;xx&quot;</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>转换：<code>set n2s to \"123\" as number</code></p></li>\n</ul></li>\n<li><p>Keywords</p>\n<ul>\n<li><code>me</code> refers to the current script\n<ul>\n<li><code>my</code> is synonym for <code>of me</code></li>\n</ul></li>\n<li><code>it</code> refers to the current target (A <code>tell</code> statement specifies a default target)\n<ul>\n<li><code>its</code> is synonym for <code>of it</code></li>\n</ul></li>\n</ul></li>\n</ul>\n<h3 id=\"流程控制\">流程控制</h3>\n<ul>\n<li><p>条件语句</p>\n<p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> a=<span class=\"number\">0</span> then</span><br><span class=\"line\">    xxx</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> a=<span class=\"number\">1</span> then</span><br><span class=\"line\">    xxx</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    xxx</span><br><span class=\"line\">end <span class=\"keyword\">if</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>循环语句</p>\n<ul>\n<li><p><code>times</code></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repeat <span class=\"number\">10</span> times</span><br><span class=\"line\">    xxx</span><br><span class=\"line\">end repeat</span><br></pre></td></tr></table></figure></li>\n<li><p><code>from .. to ..</code></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repeat with n from <span class=\"number\">0</span> to <span class=\"number\">10</span> by <span class=\"number\">1</span></span><br><span class=\"line\">    xxx</span><br><span class=\"line\">end repeat</span><br></pre></td></tr></table></figure></li>\n<li><p><code>until</code></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repeat until n &gt; <span class=\"number\">10</span></span><br><span class=\"line\">    xxx</span><br><span class=\"line\">    set n to n +<span class=\"number\">3</span></span><br><span class=\"line\">end repeat</span><br></pre></td></tr></table></figure></li>\n</ul></li>\n<li><p><code>try</code></p>\n<p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try</span><br><span class=\"line\">    -- Do something</span><br><span class=\"line\">on error</span><br><span class=\"line\">    -- other thing</span><br><span class=\"line\">end try</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h3 id=\"functionhandler\">Function/Handler</h3>\n<ul>\n<li><p><code>on</code> or <code>to</code></p>\n<p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on foo()</span><br><span class=\"line\">    display dialog <span class=\"string\">&quot;Error!&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;xx&quot;</span></span><br><span class=\"line\">end foo</span><br><span class=\"line\">    </span><br><span class=\"line\">foo()</span><br><span class=\"line\">set R to foo()</span><br></pre></td></tr></table></figure></p></li>\n<li><p>带参数</p>\n<p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">to foo(theErrorMessage, theButtons)</span><br><span class=\"line\">    display dialog the theErrorMessage buttons theButtons</span><br><span class=\"line\">end displayError</span><br><span class=\"line\">    </span><br><span class=\"line\">foo(<span class=\"string\">&quot;xxx&quot;</span>,&#123;<span class=\"string\">&quot;ok&quot;</span>,<span class=\"string\">&quot;cancel&quot;</span>&#125;)</span><br></pre></td></tr></table></figure></p></li>\n<li><p>交叉参数</p>\n<p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on foo:E withButtons:B</span><br><span class=\"line\">    display dialog E buttons B</span><br><span class=\"line\">end foo:withButtons:</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h3 id=\"交互\">交互</h3>\n<ul>\n<li><p>发声</p>\n<ul>\n<li><code>say \"hello world\" using \"Victoria\"</code></li>\n<li><code>beep 2</code></li>\n</ul></li>\n<li><p>dialog 弹窗：</p>\n<ul>\n<li><p><code>display dialog \"xxx\"</code></p></li>\n<li><p>获取输入</p>\n<p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display dialog <span class=\"string\">&quot;xxx&quot;</span> <span class=\"keyword\">default</span> answer <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">set a to text returned of result</span><br></pre></td></tr></table></figure></p></li>\n<li><p>获取点击项</p>\n<p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set message to <span class=\"string\">&quot;Hello world!&quot;</span></span><br><span class=\"line\">set DWindows to display dialog message buttons &#123;<span class=\"string\">&quot;OK&quot;</span>, <span class=\"string\">&quot;Cancel&quot;</span>&#125;</span><br><span class=\"line\">set selectedResult to button returned of DWindows</span><br><span class=\"line\">Say selectedResult</span><br></pre></td></tr></table></figure></p></li>\n</ul></li>\n<li><p>notification</p>\n<p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display notification <span class=\"string\">&quot;...&quot;</span> with title <span class=\"string\">&quot;xxx&quot;</span> subtitle <span class=\"string\">&quot;hhh&quot;</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>列表选择</p>\n<p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">choose from list &#123;<span class=\"string\">&quot;aa&quot;</span>,<span class=\"string\">&quot;bb&quot;</span>,<span class=\"string\">&quot;cc&quot;</span>&#125; with title <span class=\"string\">&quot;Names&quot;</span> ¬</span><br><span class=\"line\">    with prompt <span class=\"string\">&quot;请选择：&quot;</span> <span class=\"keyword\">default</span> items &#123;<span class=\"string\">&quot;bb&quot;</span>&#125; ¬</span><br><span class=\"line\">    with empty selection allowed and multiple selections allowed</span><br></pre></td></tr></table></figure></p></li>\n<li><p>文件/夹选择</p>\n<ul>\n<li><code>choose file of type(\"txt\") with prompt \"请选择\"</code></li>\n<li><code>choose folder</code></li>\n</ul></li>\n</ul>\n<h3 id=\"模拟行为\">模拟行为</h3>\n<ul>\n<li><p>唤起应用至frontmost：<code>tell application \"Chrome\" to activate</code></p></li>\n<li><p>延时/s：<code>delay 2</code></p></li>\n<li><p>模型点击：<code>click</code></p>\n<ul>\n<li><p>位置</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tell application &quot;System Events&quot;</span><br><span class=\"line\">    click at &#123;123,456&#125;</span><br><span class=\"line\">end tell</span><br></pre></td></tr></table></figure></p></li>\n<li><p>元素</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tell application &quot;System Events&quot;</span><br><span class=\"line\">    tell menu bar 1 of process &quot;Chrome&quot;</span><br><span class=\"line\">    \tclick menu item &quot;新标签页&quot; of menu &quot;文件&quot; of menu bar item &quot;文件&quot;</span><br><span class=\"line\">    end tell</span><br><span class=\"line\">end tell</span><br></pre></td></tr></table></figure></p></li>\n</ul></li>\n<li><p>键盘输入</p>\n<ul>\n<li><p><code>key code 48 using command down</code>：<code>⌘Tab</code></p>\n<ul>\n<li>List of AppleScript <a href=\"https://eastmanreference.com/complete-list-of-applescript-key-codes\">key codes</a></li>\n</ul></li>\n<li><p><code>keystroke \"hello\"</code></p></li>\n</ul></li>\n<li><p>剪贴板：<code>clipboard</code></p>\n<ul>\n<li><code>set c to get the clipboard</code></li>\n<li><code>set the clipboard to \"xxx\"</code></li>\n</ul></li>\n</ul>\n<h2 id=\"advanced\">Advanced</h2>\n<h3 id=\"applescript中执行shell指令\">AppleScript中执行Shell指令</h3>\n<ul>\n<li><p>Basic</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">do shell script &quot;date +&#x27;%T&#x27;&quot;</span><br></pre></td></tr></table></figure></p></li>\n<li><p>==传递变量==</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set foo to &quot;test&quot;</span><br><span class=\"line\">do shell script &quot;echo &quot; &amp; foo</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">do shell script &quot;echo &quot; &amp; quoted form of foo</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h3 id=\"shell-中执行-applescript\">Shell 中执行 AppleScript</h3>\n<ol type=\"1\">\n<li><p>两种方法</p>\n<ol type=\"1\">\n<li><p><code>osascript -e \"echo \\\"Hello\\\"</code></p></li>\n<li><p>命令语句较多时</p>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">osascript &lt;&lt;EOF</span><br><span class=\"line\">    say &quot;Hello&quot;</span><br><span class=\"line\">    say &quot;World&quot;</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure></p></li>\n</ol></li>\n<li><p>传递shell中的变量</p>\n<ol type=\"1\">\n<li><p><code>osascript -e \"echo \\\"$foo\\\" \"</code></p></li>\n<li><p>命令语句较多时</p>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">osascript &lt;&lt;EOF</span><br><span class=\"line\">set a to &quot;Hello&quot;</span><br><span class=\"line\">set b to &quot;$foo&quot;\t\t# 传递shell中的变量</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure></p></li>\n</ol></li>\n<li><p>Shell 获取 Applescript 结果</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">finder=$(osascript -e <span class=\"string\">&quot;set dir to POSIX path of (choose folder)&quot;</span>)</span><br></pre></td></tr></table></figure></p></li>\n</ol>\n<h2 id=\"others\">Others</h2>\n<h3 id=\"tips\">Tips</h3>\n<ul>\n<li><p><code>AppleScript's Dictionary</code>: Press <code>⌘⇧O</code> to open AppleScript dictionary of this app.</p></li>\n<li><p><code>Watch Me Do</code>（\"我做给您看\"）</p>\n<ul>\n<li>点击AutoMator的录制按钮（红色小圆点）</li>\n<li>实际演示一遍想要完成的操作后，结束录制</li>\n</ul></li>\n<li><p>将自动生成的动作序列拖到下方空白处，可以看到转成的AppleScript细节（uiScript）</p></li>\n<li><p><code>Accessibility Inspector</code></p>\n<ul>\n<li><p>Check the UI element tree, properties, attribute ...</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> attribute of textArea</span><br><span class=\"line\"><span class=\"keyword\">return</span> the value of attribute <span class=\"string\">&quot;AXValue&quot;</span> of xxx</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get properties of front window</span><br><span class=\"line\"># &#123;.., name:<span class=\"string\">&quot;foo&quot;</span>, description: <span class=\"string\">&quot;xxx&quot;</span>, ...&#125;</span><br><span class=\"line\">get name of front window</span><br><span class=\"line\"># <span class=\"string\">&quot;foo&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul></li>\n<li><p>语句过长时，可以使用符号 <code>¬</code> 断开</p>\n<p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tell process <span class=\"string\">&quot;xxxxx&quot;</span> to set A to a reference ¬</span><br><span class=\"line\">    to (first window whose name of attributes contains <span class=\"string\">&quot;.txt&quot;</span>)</span><br></pre></td></tr></table></figure></p></li>\n<li><p>使用语句<code>log variable</code>进行设置断点进行debug</p></li>\n</ul>\n<h3 id=\"应用\">应用</h3>\n<ul>\n<li><p>toggle dock's preferences of \"autohide\"</p>\n<p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tell application <span class=\"string\">&quot;System Events&quot;</span></span><br><span class=\"line\">    tell dock preferences</span><br><span class=\"line\">        <span class=\"keyword\">if</span> autohide is <span class=\"literal\">true</span> then</span><br><span class=\"line\">            set properties to &#123;autohide:<span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            set properties to &#123;autohide:<span class=\"literal\">true</span>&#125;</span><br><span class=\"line\">        end <span class=\"keyword\">if</span></span><br><span class=\"line\">    end tell</span><br><span class=\"line\">end tell</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h3 id=\"exaples\">Exaples</h3>\n<ul>\n<li><a href=\"https://github.com/unforswearing/applescript\">https://github.com/unforswearing/applescript</a></li>\n</ul>\n<h3 id=\"documentation\">Documentation</h3>\n<ul>\n<li><p>AppleScript Language <a href=\"https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html#/\">Guide</a></p></li>\n<li><p>Mac Automation Scripting <a href=\"https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/index.html#//apple_ref/doc/uid/TP40016239-CH56-SW1\">Guide</a></p></li>\n</ul>\n","site":{"data":{"projects":[{"name":"PDF2Audio","url":"Convert PDFs to Audiobooks with Machine Learning","desc":"Convert PDFs to Audiobooks with Machine Learning"},{"name":"Alfred PKManager","url":"https://github.com/Konfido/alfred-pkmanager","desc":"A handful Alfred Workflow which helps searching and managing your Personal Knowledge Markdown notes."}]}},"excerpt":"","more":"<h2 id=\"basic\">Basic</h2>\n<ul>\n<li><p>运行：<code>osascript foo.scpt</code></p></li>\n<li><p>注释：</p>\n<ul>\n<li>行注释，可用在行尾：<code>--</code> or <code>#</code></li>\n<li>块注释：<code>(* *)</code></li>\n</ul></li>\n<li><p>数据类型：number，string，list，record (字典)</p>\n<ul>\n<li><p>设置list</p>\n<p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set L to &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">&quot;ss&quot;</span>&#125;</span><br><span class=\"line\">set item <span class=\"number\">3</span> of L to <span class=\"string\">&quot;xx&quot;</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>转换：<code>set n2s to \"123\" as number</code></p></li>\n</ul></li>\n<li><p>Keywords</p>\n<ul>\n<li><code>me</code> refers to the current script\n<ul>\n<li><code>my</code> is synonym for <code>of me</code></li>\n</ul></li>\n<li><code>it</code> refers to the current target (A <code>tell</code> statement specifies a default target)\n<ul>\n<li><code>its</code> is synonym for <code>of it</code></li>\n</ul></li>\n</ul></li>\n</ul>\n<h3 id=\"流程控制\">流程控制</h3>\n<ul>\n<li><p>条件语句</p>\n<p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> a=<span class=\"number\">0</span> then</span><br><span class=\"line\">    xxx</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> a=<span class=\"number\">1</span> then</span><br><span class=\"line\">    xxx</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    xxx</span><br><span class=\"line\">end <span class=\"keyword\">if</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>循环语句</p>\n<ul>\n<li><p><code>times</code></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repeat <span class=\"number\">10</span> times</span><br><span class=\"line\">    xxx</span><br><span class=\"line\">end repeat</span><br></pre></td></tr></table></figure></li>\n<li><p><code>from .. to ..</code></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repeat with n from <span class=\"number\">0</span> to <span class=\"number\">10</span> by <span class=\"number\">1</span></span><br><span class=\"line\">    xxx</span><br><span class=\"line\">end repeat</span><br></pre></td></tr></table></figure></li>\n<li><p><code>until</code></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repeat until n &gt; <span class=\"number\">10</span></span><br><span class=\"line\">    xxx</span><br><span class=\"line\">    set n to n +<span class=\"number\">3</span></span><br><span class=\"line\">end repeat</span><br></pre></td></tr></table></figure></li>\n</ul></li>\n<li><p><code>try</code></p>\n<p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try</span><br><span class=\"line\">    -- Do something</span><br><span class=\"line\">on error</span><br><span class=\"line\">    -- other thing</span><br><span class=\"line\">end try</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h3 id=\"functionhandler\">Function/Handler</h3>\n<ul>\n<li><p><code>on</code> or <code>to</code></p>\n<p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on foo()</span><br><span class=\"line\">    display dialog <span class=\"string\">&quot;Error!&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;xx&quot;</span></span><br><span class=\"line\">end foo</span><br><span class=\"line\">    </span><br><span class=\"line\">foo()</span><br><span class=\"line\">set R to foo()</span><br></pre></td></tr></table></figure></p></li>\n<li><p>带参数</p>\n<p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">to foo(theErrorMessage, theButtons)</span><br><span class=\"line\">    display dialog the theErrorMessage buttons theButtons</span><br><span class=\"line\">end displayError</span><br><span class=\"line\">    </span><br><span class=\"line\">foo(<span class=\"string\">&quot;xxx&quot;</span>,&#123;<span class=\"string\">&quot;ok&quot;</span>,<span class=\"string\">&quot;cancel&quot;</span>&#125;)</span><br></pre></td></tr></table></figure></p></li>\n<li><p>交叉参数</p>\n<p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on foo:E withButtons:B</span><br><span class=\"line\">    display dialog E buttons B</span><br><span class=\"line\">end foo:withButtons:</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h3 id=\"交互\">交互</h3>\n<ul>\n<li><p>发声</p>\n<ul>\n<li><code>say \"hello world\" using \"Victoria\"</code></li>\n<li><code>beep 2</code></li>\n</ul></li>\n<li><p>dialog 弹窗：</p>\n<ul>\n<li><p><code>display dialog \"xxx\"</code></p></li>\n<li><p>获取输入</p>\n<p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display dialog <span class=\"string\">&quot;xxx&quot;</span> <span class=\"keyword\">default</span> answer <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">set a to text returned of result</span><br></pre></td></tr></table></figure></p></li>\n<li><p>获取点击项</p>\n<p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set message to <span class=\"string\">&quot;Hello world!&quot;</span></span><br><span class=\"line\">set DWindows to display dialog message buttons &#123;<span class=\"string\">&quot;OK&quot;</span>, <span class=\"string\">&quot;Cancel&quot;</span>&#125;</span><br><span class=\"line\">set selectedResult to button returned of DWindows</span><br><span class=\"line\">Say selectedResult</span><br></pre></td></tr></table></figure></p></li>\n</ul></li>\n<li><p>notification</p>\n<p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display notification <span class=\"string\">&quot;...&quot;</span> with title <span class=\"string\">&quot;xxx&quot;</span> subtitle <span class=\"string\">&quot;hhh&quot;</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>列表选择</p>\n<p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">choose from list &#123;<span class=\"string\">&quot;aa&quot;</span>,<span class=\"string\">&quot;bb&quot;</span>,<span class=\"string\">&quot;cc&quot;</span>&#125; with title <span class=\"string\">&quot;Names&quot;</span> ¬</span><br><span class=\"line\">    with prompt <span class=\"string\">&quot;请选择：&quot;</span> <span class=\"keyword\">default</span> items &#123;<span class=\"string\">&quot;bb&quot;</span>&#125; ¬</span><br><span class=\"line\">    with empty selection allowed and multiple selections allowed</span><br></pre></td></tr></table></figure></p></li>\n<li><p>文件/夹选择</p>\n<ul>\n<li><code>choose file of type(\"txt\") with prompt \"请选择\"</code></li>\n<li><code>choose folder</code></li>\n</ul></li>\n</ul>\n<h3 id=\"模拟行为\">模拟行为</h3>\n<ul>\n<li><p>唤起应用至frontmost：<code>tell application \"Chrome\" to activate</code></p></li>\n<li><p>延时/s：<code>delay 2</code></p></li>\n<li><p>模型点击：<code>click</code></p>\n<ul>\n<li><p>位置</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tell application &quot;System Events&quot;</span><br><span class=\"line\">    click at &#123;123,456&#125;</span><br><span class=\"line\">end tell</span><br></pre></td></tr></table></figure></p></li>\n<li><p>元素</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tell application &quot;System Events&quot;</span><br><span class=\"line\">    tell menu bar 1 of process &quot;Chrome&quot;</span><br><span class=\"line\">    \tclick menu item &quot;新标签页&quot; of menu &quot;文件&quot; of menu bar item &quot;文件&quot;</span><br><span class=\"line\">    end tell</span><br><span class=\"line\">end tell</span><br></pre></td></tr></table></figure></p></li>\n</ul></li>\n<li><p>键盘输入</p>\n<ul>\n<li><p><code>key code 48 using command down</code>：<code>⌘Tab</code></p>\n<ul>\n<li>List of AppleScript <a href=\"https://eastmanreference.com/complete-list-of-applescript-key-codes\">key codes</a></li>\n</ul></li>\n<li><p><code>keystroke \"hello\"</code></p></li>\n</ul></li>\n<li><p>剪贴板：<code>clipboard</code></p>\n<ul>\n<li><code>set c to get the clipboard</code></li>\n<li><code>set the clipboard to \"xxx\"</code></li>\n</ul></li>\n</ul>\n<h2 id=\"advanced\">Advanced</h2>\n<h3 id=\"applescript中执行shell指令\">AppleScript中执行Shell指令</h3>\n<ul>\n<li><p>Basic</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">do shell script &quot;date +&#x27;%T&#x27;&quot;</span><br></pre></td></tr></table></figure></p></li>\n<li><p>==传递变量==</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set foo to &quot;test&quot;</span><br><span class=\"line\">do shell script &quot;echo &quot; &amp; foo</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">do shell script &quot;echo &quot; &amp; quoted form of foo</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h3 id=\"shell-中执行-applescript\">Shell 中执行 AppleScript</h3>\n<ol type=\"1\">\n<li><p>两种方法</p>\n<ol type=\"1\">\n<li><p><code>osascript -e \"echo \\\"Hello\\\"</code></p></li>\n<li><p>命令语句较多时</p>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">osascript &lt;&lt;EOF</span><br><span class=\"line\">    say &quot;Hello&quot;</span><br><span class=\"line\">    say &quot;World&quot;</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure></p></li>\n</ol></li>\n<li><p>传递shell中的变量</p>\n<ol type=\"1\">\n<li><p><code>osascript -e \"echo \\\"$foo\\\" \"</code></p></li>\n<li><p>命令语句较多时</p>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">osascript &lt;&lt;EOF</span><br><span class=\"line\">set a to &quot;Hello&quot;</span><br><span class=\"line\">set b to &quot;$foo&quot;\t\t# 传递shell中的变量</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure></p></li>\n</ol></li>\n<li><p>Shell 获取 Applescript 结果</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">finder=$(osascript -e <span class=\"string\">&quot;set dir to POSIX path of (choose folder)&quot;</span>)</span><br></pre></td></tr></table></figure></p></li>\n</ol>\n<h2 id=\"others\">Others</h2>\n<h3 id=\"tips\">Tips</h3>\n<ul>\n<li><p><code>AppleScript's Dictionary</code>: Press <code>⌘⇧O</code> to open AppleScript dictionary of this app.</p></li>\n<li><p><code>Watch Me Do</code>（\"我做给您看\"）</p>\n<ul>\n<li>点击AutoMator的录制按钮（红色小圆点）</li>\n<li>实际演示一遍想要完成的操作后，结束录制</li>\n</ul></li>\n<li><p>将自动生成的动作序列拖到下方空白处，可以看到转成的AppleScript细节（uiScript）</p></li>\n<li><p><code>Accessibility Inspector</code></p>\n<ul>\n<li><p>Check the UI element tree, properties, attribute ...</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> attribute of textArea</span><br><span class=\"line\"><span class=\"keyword\">return</span> the value of attribute <span class=\"string\">&quot;AXValue&quot;</span> of xxx</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get properties of front window</span><br><span class=\"line\"># &#123;.., name:<span class=\"string\">&quot;foo&quot;</span>, description: <span class=\"string\">&quot;xxx&quot;</span>, ...&#125;</span><br><span class=\"line\">get name of front window</span><br><span class=\"line\"># <span class=\"string\">&quot;foo&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul></li>\n<li><p>语句过长时，可以使用符号 <code>¬</code> 断开</p>\n<p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tell process <span class=\"string\">&quot;xxxxx&quot;</span> to set A to a reference ¬</span><br><span class=\"line\">    to (first window whose name of attributes contains <span class=\"string\">&quot;.txt&quot;</span>)</span><br></pre></td></tr></table></figure></p></li>\n<li><p>使用语句<code>log variable</code>进行设置断点进行debug</p></li>\n</ul>\n<h3 id=\"应用\">应用</h3>\n<ul>\n<li><p>toggle dock's preferences of \"autohide\"</p>\n<p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tell application <span class=\"string\">&quot;System Events&quot;</span></span><br><span class=\"line\">    tell dock preferences</span><br><span class=\"line\">        <span class=\"keyword\">if</span> autohide is <span class=\"literal\">true</span> then</span><br><span class=\"line\">            set properties to &#123;autohide:<span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            set properties to &#123;autohide:<span class=\"literal\">true</span>&#125;</span><br><span class=\"line\">        end <span class=\"keyword\">if</span></span><br><span class=\"line\">    end tell</span><br><span class=\"line\">end tell</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h3 id=\"exaples\">Exaples</h3>\n<ul>\n<li><a href=\"https://github.com/unforswearing/applescript\">https://github.com/unforswearing/applescript</a></li>\n</ul>\n<h3 id=\"documentation\">Documentation</h3>\n<ul>\n<li><p>AppleScript Language <a href=\"https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html#/\">Guide</a></p></li>\n<li><p>Mac Automation Scripting <a href=\"https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/index.html#//apple_ref/doc/uid/TP40016239-CH56-SW1\">Guide</a></p></li>\n</ul>\n"},{"title":"Hexo 同时使用两种主题","urlname":"Use-Two-Themes-in-Hexo","date":"2019-03-16T14:30:26.000Z","updated":"2019-03-16T14:30:26.000Z","_content":"\n## Context\n\n在Hexo主页面的catagory下增加了wiki项，但是想利用一个不同的theme生成另一个网页，放置在子目录下。因此尝试能否在一个仓库内分别渲染生成两个不同的theme。（只是想测试下可行性，其实完全可以建两个hexo仓库分别渲染生成页面，再将wiki页面复制到了主页面的public/wiki/目录下）。\n\n### 想法\n\nroot目录下有两个config文件，默认使用_config.yml，用`hexo --config config_wiki.yml g`命令渲染wiki页面至`/public/wiki/`，同时设置点击主页面`wiki`的category后会自动链接到`public/wiki/`。\n\n\n\n## 修改步骤\n\n1. 更改原theme（主页面）的config文件，将新增category类别（不同主题设置有区别）。\n\n   ```diff\n   nav:\n   \tWiki: /wiki/\n   ```\n\n2. 为了在修改wiki配置时避免影响到主页面，将root目录下的`_config.yml`文件复制并重命名为`_config_wiki.yml`，以下修改均指此文件。\n\n3. 安装hexo的[Wikitten](https://github.com/zthxxx/hexo-theme-Wikitten)主题，将其作为wiki页面的theme\n\n   ```shell\n   cd your-hexo-directory\n   git clone https://github.com/zthxxx/hexo-theme-Wikitten.git themes/Wikitten\n   ```\n\n4. 将Wikitten theme目录下clone所得的source和模板移动到root目录下，重命名主题config使其生效。\n\n   ```shell\n   cp -rf themes/Wikitten/_source/* source_wiki/\n   cp themes/Wikitten/_scaffolds/embed.md scaffolds/embed.md\n   cp themes/Wikitten/_scaffolds/post.md scaffolds/wiki.md\n   cp -f themes/Wikitten/_config.yml.example themes/Wikitten/_config.yml\n   ```\n\n5. 修改wikitten主题的config，更改资源文件目录，icon、favicon等。\n\n6. 修改`_config_wiki.yml`设定使wikitten主题生效\n\n   ```diff\n   - theme: origin\n   + theme: Wikitten\n   \n   - per_page: 10\n   \n   - url: https://konfido.github.io/\n   - root: /\n   - permalink: :year/:month/:day/:title/\n   + url: https://konfido.github.io/wiki/\n   + root: /wiki/\n   + permalink: :urlname/\n   + permalink_defaults: :year/:month/:day/:title/\n   \n   + skip_render:\n   +  - README.md\n   \n   + marked:\n   +   gfm: true\n   \n   + # 设置单独的source文件夹，用于放置wiki的源文件\n   - source_dir: source\n   + source_dir: source_wiki\n   \n   + # 设置渲染到`public/wiki/`路径下\n   - public_dir: public\n   + public_dir: public/wiki\n   \n   + default_layout: wiki\n   ```\n\n\n## 使用\n\n- 视自己情况在`.zshrc`或者`.bashrc`等文件中新增alias，以简化命令的输入。\n\n  ```shell\n  alias hw=\"hexo --config _config_wiki.yml\"\n  ```\n\n- 新建wiki\n\n  ```shell\n  hw new \"xxxx\"\n  ```\n\n- 渲染步骤\n\n  共用db.json（猜測）会导致主页面blog内容与wiki内容混杂，需要在渲染前后进行clean操作。\n\n  ```shell\n  # 首先渲染主页面，生成到/public/\n  hexo g\n  # 删除db.json及旧的public/wiki\n  hw clean\n  # 渲染wiki页面，生成到/public/wiki/\n  hw g\n  # 手动删除db.json，MUST！\n  rm db.json\n  # 查看效果\n  hexo s\n  ```","source":"_posts/Hexo 同时使用两种主题.md","raw":"---\ntitle: Hexo 同时使用两种主题\nurlname: Use-Two-Themes-in-Hexo\ntags: [hexo]\ndate: 2019-03-16 22:30:26\nupdated: 2019-03-16 22:30:26\n---\n\n## Context\n\n在Hexo主页面的catagory下增加了wiki项，但是想利用一个不同的theme生成另一个网页，放置在子目录下。因此尝试能否在一个仓库内分别渲染生成两个不同的theme。（只是想测试下可行性，其实完全可以建两个hexo仓库分别渲染生成页面，再将wiki页面复制到了主页面的public/wiki/目录下）。\n\n### 想法\n\nroot目录下有两个config文件，默认使用_config.yml，用`hexo --config config_wiki.yml g`命令渲染wiki页面至`/public/wiki/`，同时设置点击主页面`wiki`的category后会自动链接到`public/wiki/`。\n\n\n\n## 修改步骤\n\n1. 更改原theme（主页面）的config文件，将新增category类别（不同主题设置有区别）。\n\n   ```diff\n   nav:\n   \tWiki: /wiki/\n   ```\n\n2. 为了在修改wiki配置时避免影响到主页面，将root目录下的`_config.yml`文件复制并重命名为`_config_wiki.yml`，以下修改均指此文件。\n\n3. 安装hexo的[Wikitten](https://github.com/zthxxx/hexo-theme-Wikitten)主题，将其作为wiki页面的theme\n\n   ```shell\n   cd your-hexo-directory\n   git clone https://github.com/zthxxx/hexo-theme-Wikitten.git themes/Wikitten\n   ```\n\n4. 将Wikitten theme目录下clone所得的source和模板移动到root目录下，重命名主题config使其生效。\n\n   ```shell\n   cp -rf themes/Wikitten/_source/* source_wiki/\n   cp themes/Wikitten/_scaffolds/embed.md scaffolds/embed.md\n   cp themes/Wikitten/_scaffolds/post.md scaffolds/wiki.md\n   cp -f themes/Wikitten/_config.yml.example themes/Wikitten/_config.yml\n   ```\n\n5. 修改wikitten主题的config，更改资源文件目录，icon、favicon等。\n\n6. 修改`_config_wiki.yml`设定使wikitten主题生效\n\n   ```diff\n   - theme: origin\n   + theme: Wikitten\n   \n   - per_page: 10\n   \n   - url: https://konfido.github.io/\n   - root: /\n   - permalink: :year/:month/:day/:title/\n   + url: https://konfido.github.io/wiki/\n   + root: /wiki/\n   + permalink: :urlname/\n   + permalink_defaults: :year/:month/:day/:title/\n   \n   + skip_render:\n   +  - README.md\n   \n   + marked:\n   +   gfm: true\n   \n   + # 设置单独的source文件夹，用于放置wiki的源文件\n   - source_dir: source\n   + source_dir: source_wiki\n   \n   + # 设置渲染到`public/wiki/`路径下\n   - public_dir: public\n   + public_dir: public/wiki\n   \n   + default_layout: wiki\n   ```\n\n\n## 使用\n\n- 视自己情况在`.zshrc`或者`.bashrc`等文件中新增alias，以简化命令的输入。\n\n  ```shell\n  alias hw=\"hexo --config _config_wiki.yml\"\n  ```\n\n- 新建wiki\n\n  ```shell\n  hw new \"xxxx\"\n  ```\n\n- 渲染步骤\n\n  共用db.json（猜測）会导致主页面blog内容与wiki内容混杂，需要在渲染前后进行clean操作。\n\n  ```shell\n  # 首先渲染主页面，生成到/public/\n  hexo g\n  # 删除db.json及旧的public/wiki\n  hw clean\n  # 渲染wiki页面，生成到/public/wiki/\n  hw g\n  # 手动删除db.json，MUST！\n  rm db.json\n  # 查看效果\n  hexo s\n  ```","slug":"Hexo 同时使用两种主题","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckozvuosh0003dbsghkvjc456","content":"<h2 id=\"context\">Context</h2>\n<p>在Hexo主页面的catagory下增加了wiki项，但是想利用一个不同的theme生成另一个网页，放置在子目录下。因此尝试能否在一个仓库内分别渲染生成两个不同的theme。（只是想测试下可行性，其实完全可以建两个hexo仓库分别渲染生成页面，再将wiki页面复制到了主页面的public/wiki/目录下）。</p>\n<h3 id=\"想法\">想法</h3>\n<p>root目录下有两个config文件，默认使用_config.yml，用<code>hexo --config config_wiki.yml g</code>命令渲染wiki页面至<code>/public/wiki/</code>，同时设置点击主页面<code>wiki</code>的category后会自动链接到<code>public/wiki/</code>。</p>\n<h2 id=\"修改步骤\">修改步骤</h2>\n<ol type=\"1\">\n<li><p>更改原theme（主页面）的config文件，将新增category类别（不同主题设置有区别）。</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nav:</span><br><span class=\"line\">\tWiki: /wiki/</span><br></pre></td></tr></table></figure></li>\n<li><p>为了在修改wiki配置时避免影响到主页面，将root目录下的<code>_config.yml</code>文件复制并重命名为<code>_config_wiki.yml</code>，以下修改均指此文件。</p></li>\n<li><p>安装hexo的<a href=\"https://github.com/zthxxx/hexo-theme-Wikitten\">Wikitten</a>主题，将其作为wiki页面的theme</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd your-hexo-directory</span><br><span class=\"line\">git clone https://github.com/zthxxx/hexo-theme-Wikitten.git themes/Wikitten</span><br></pre></td></tr></table></figure></li>\n<li><p>将Wikitten theme目录下clone所得的source和模板移动到root目录下，重命名主题config使其生效。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp -rf themes/Wikitten/_source/* source_wiki/</span><br><span class=\"line\">cp themes/Wikitten/_scaffolds/embed.md scaffolds/embed.md</span><br><span class=\"line\">cp themes/Wikitten/_scaffolds/post.md scaffolds/wiki.md</span><br><span class=\"line\">cp -f themes/Wikitten/_config.yml.example themes/Wikitten/_config.yml</span><br></pre></td></tr></table></figure></li>\n<li><p>修改wikitten主题的config，更改资源文件目录，icon、favicon等。</p></li>\n<li><p>修改<code>_config_wiki.yml</code>设定使wikitten主题生效</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- theme: origin</span></span><br><span class=\"line\"><span class=\"addition\">+ theme: Wikitten</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">- per_page: 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">- url: https://konfido.github.io/</span></span><br><span class=\"line\"><span class=\"deletion\">- root: /</span></span><br><span class=\"line\"><span class=\"deletion\">- permalink: :year/:month/:day/:title/</span></span><br><span class=\"line\"><span class=\"addition\">+ url: https://konfido.github.io/wiki/</span></span><br><span class=\"line\"><span class=\"addition\">+ root: /wiki/</span></span><br><span class=\"line\"><span class=\"addition\">+ permalink: :urlname/</span></span><br><span class=\"line\"><span class=\"addition\">+ permalink_defaults: :year/:month/:day/:title/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+ skip_render:</span></span><br><span class=\"line\"><span class=\"addition\">+  - README.md</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+ marked:</span></span><br><span class=\"line\"><span class=\"addition\">+   gfm: true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+ # 设置单独的source文件夹，用于放置wiki的源文件</span></span><br><span class=\"line\"><span class=\"deletion\">- source_dir: source</span></span><br><span class=\"line\"><span class=\"addition\">+ source_dir: source_wiki</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+ # 设置渲染到`public/wiki/`路径下</span></span><br><span class=\"line\"><span class=\"deletion\">- public_dir: public</span></span><br><span class=\"line\"><span class=\"addition\">+ public_dir: public/wiki</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+ default_layout: wiki</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"使用\">使用</h2>\n<ul>\n<li><p>视自己情况在<code>.zshrc</code>或者<code>.bashrc</code>等文件中新增alias，以简化命令的输入。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias hw=&quot;hexo --config _config_wiki.yml&quot;</span><br></pre></td></tr></table></figure></li>\n<li><p>新建wiki</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hw new &quot;xxxx&quot;</span><br></pre></td></tr></table></figure></li>\n<li><p>渲染步骤</p>\n<p>共用db.json（猜測）会导致主页面blog内容与wiki内容混杂，需要在渲染前后进行clean操作。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 首先渲染主页面，生成到/public/</span></span><br><span class=\"line\">hexo g</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除db.json及旧的public/wiki</span></span><br><span class=\"line\">hw clean</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 渲染wiki页面，生成到/public/wiki/</span></span><br><span class=\"line\">hw g</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 手动删除db.json，MUST！</span></span><br><span class=\"line\">rm db.json</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看效果</span></span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{"projects":[{"name":"PDF2Audio","url":"Convert PDFs to Audiobooks with Machine Learning","desc":"Convert PDFs to Audiobooks with Machine Learning"},{"name":"Alfred PKManager","url":"https://github.com/Konfido/alfred-pkmanager","desc":"A handful Alfred Workflow which helps searching and managing your Personal Knowledge Markdown notes."}]}},"excerpt":"","more":"<h2 id=\"context\">Context</h2>\n<p>在Hexo主页面的catagory下增加了wiki项，但是想利用一个不同的theme生成另一个网页，放置在子目录下。因此尝试能否在一个仓库内分别渲染生成两个不同的theme。（只是想测试下可行性，其实完全可以建两个hexo仓库分别渲染生成页面，再将wiki页面复制到了主页面的public/wiki/目录下）。</p>\n<h3 id=\"想法\">想法</h3>\n<p>root目录下有两个config文件，默认使用_config.yml，用<code>hexo --config config_wiki.yml g</code>命令渲染wiki页面至<code>/public/wiki/</code>，同时设置点击主页面<code>wiki</code>的category后会自动链接到<code>public/wiki/</code>。</p>\n<h2 id=\"修改步骤\">修改步骤</h2>\n<ol type=\"1\">\n<li><p>更改原theme（主页面）的config文件，将新增category类别（不同主题设置有区别）。</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nav:</span><br><span class=\"line\">\tWiki: /wiki/</span><br></pre></td></tr></table></figure></li>\n<li><p>为了在修改wiki配置时避免影响到主页面，将root目录下的<code>_config.yml</code>文件复制并重命名为<code>_config_wiki.yml</code>，以下修改均指此文件。</p></li>\n<li><p>安装hexo的<a href=\"https://github.com/zthxxx/hexo-theme-Wikitten\">Wikitten</a>主题，将其作为wiki页面的theme</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd your-hexo-directory</span><br><span class=\"line\">git clone https://github.com/zthxxx/hexo-theme-Wikitten.git themes/Wikitten</span><br></pre></td></tr></table></figure></li>\n<li><p>将Wikitten theme目录下clone所得的source和模板移动到root目录下，重命名主题config使其生效。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp -rf themes/Wikitten/_source/* source_wiki/</span><br><span class=\"line\">cp themes/Wikitten/_scaffolds/embed.md scaffolds/embed.md</span><br><span class=\"line\">cp themes/Wikitten/_scaffolds/post.md scaffolds/wiki.md</span><br><span class=\"line\">cp -f themes/Wikitten/_config.yml.example themes/Wikitten/_config.yml</span><br></pre></td></tr></table></figure></li>\n<li><p>修改wikitten主题的config，更改资源文件目录，icon、favicon等。</p></li>\n<li><p>修改<code>_config_wiki.yml</code>设定使wikitten主题生效</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- theme: origin</span></span><br><span class=\"line\"><span class=\"addition\">+ theme: Wikitten</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">- per_page: 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">- url: https://konfido.github.io/</span></span><br><span class=\"line\"><span class=\"deletion\">- root: /</span></span><br><span class=\"line\"><span class=\"deletion\">- permalink: :year/:month/:day/:title/</span></span><br><span class=\"line\"><span class=\"addition\">+ url: https://konfido.github.io/wiki/</span></span><br><span class=\"line\"><span class=\"addition\">+ root: /wiki/</span></span><br><span class=\"line\"><span class=\"addition\">+ permalink: :urlname/</span></span><br><span class=\"line\"><span class=\"addition\">+ permalink_defaults: :year/:month/:day/:title/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+ skip_render:</span></span><br><span class=\"line\"><span class=\"addition\">+  - README.md</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+ marked:</span></span><br><span class=\"line\"><span class=\"addition\">+   gfm: true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+ # 设置单独的source文件夹，用于放置wiki的源文件</span></span><br><span class=\"line\"><span class=\"deletion\">- source_dir: source</span></span><br><span class=\"line\"><span class=\"addition\">+ source_dir: source_wiki</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+ # 设置渲染到`public/wiki/`路径下</span></span><br><span class=\"line\"><span class=\"deletion\">- public_dir: public</span></span><br><span class=\"line\"><span class=\"addition\">+ public_dir: public/wiki</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+ default_layout: wiki</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"使用\">使用</h2>\n<ul>\n<li><p>视自己情况在<code>.zshrc</code>或者<code>.bashrc</code>等文件中新增alias，以简化命令的输入。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias hw=&quot;hexo --config _config_wiki.yml&quot;</span><br></pre></td></tr></table></figure></li>\n<li><p>新建wiki</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hw new &quot;xxxx&quot;</span><br></pre></td></tr></table></figure></li>\n<li><p>渲染步骤</p>\n<p>共用db.json（猜測）会导致主页面blog内容与wiki内容混杂，需要在渲染前后进行clean操作。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 首先渲染主页面，生成到/public/</span></span><br><span class=\"line\">hexo g</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除db.json及旧的public/wiki</span></span><br><span class=\"line\">hw clean</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 渲染wiki页面，生成到/public/wiki/</span></span><br><span class=\"line\">hw g</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 手动删除db.json，MUST！</span></span><br><span class=\"line\">rm db.json</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看效果</span></span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"Markdown 表格生成","date":"2018-06-29T13:39:19.000Z","updated":"2019-08-31T06:55:48.000Z","blogged":true,"urlname":"Markdown-Tables","_content":"Markdown 对表格的支持不太友好,这里列了几个处理的技巧。\n\n## 插入表格\n\n在Markdown文本中插入表格主要有以下三种方法：\n\n1. 标准Markdown table语法\n\n    ```markdown\n    |  A   |    B | C    |\n    | :--: | ---: | :--- |\n    |  1   |    2 | 3    |\n    |  4   |    5 | 6    |\n    ```\n\t\n\t效果：\n\t\n    |  A   |    B | C    |\n    | :--: | ---: | :--- |\n    |  1   |    2 | 3    |\n    |  4   |    5 | 6    |\n    \n2. 嵌入html代码\n\n    ```html\n    <table style=\"text-align:center\">\n      <tr>\n          <td>A</td>\n          <td>B</td>\n      </tr>\n      <tr>\n          <td>C</td>\n          <td>D</td>\n      </tr>\n    </table>\n    ```\n\n    效果：\n\n    <table style=\"text-align:center\">\n      <tr>\n          <td>A</td>\n          <td>B</td>\n      </tr>\n      <tr>\n          <td>C</td>\n          <td>D</td>\n      </tr>\n    </table>\n\n3. Latex 语法\n\n    - Typora等编辑器可借由MathJax插入数学公式，其中`\\array`可用来插入表格\n    \n    - 在Hexo等博客框架中也可以利用MathJax插入Latex，不过渲染工具要换为Pandoc\n    \n        ```bash\n        brew install pandoc\n        npm uninstall hexo-renderer-marked --save\n        npm install hexo-renderer-pandoc --save\n        ```\n    \n    ```latex\n    $$\n    \\begin{array}{ccc} % c:center, r:right, l:left\n    \\hline\n    姓名& 学号& 性别\\\\\n    \\hline\n    Steve Jobs& 001& Male\\\\\n    Bill Gates& 002& Female\\\\\n    \\hline\n    \\end{array}\n    $$\n    ```\n    \n    效果：\n    $$\n    \\begin{array}{ccc} % c:center, r:right, l:left\n    \\hline\n    姓名& 学号& 性别\\\\\n    \\hline\n    Steve Jobs& 001& Male\\\\\n    Bill Gates& 002& Female\\\\\n    \\hline\n    \\end{array}\n    $$\n\n## 跨行/跨列表格 columnspan/rowspan\n\n1. html语法\n\n    ```\n    <table style=\"text-align:center\">\n       <tr>\n          <td colspan='2' rowspan='2'></td>\n          <td colspan='2' >真实类别<br>Truth</td>\n      </tr>\n      <tr>\n          <td>1 (Event)</td>\n          <td>0 (Non-Event)</td>\n      </tr>\n      <tr>\n          <td rowspan='2'>预测类别<br>Prediction</td>\n          <td>1<br>Positive</td>\n          <td>True<br>Positive</td>\n          <td>False<br>Positive</td>\n      </tr>\n      <tr>\n          <td>0<br>Negative</td>\n          <td>False<br>Negative</td>\n          <td>True<br>Negative</td>\n      </tr>\n    </table>\n    ```\n\n    效果:\n\n    <table style=\"text-align:center\" class=\"table-bordered table-striped table-condensed\">\n      <tr>\n          <td colspan='2' rowspan='2'>Example</td>\n          <td colspan='2' >真实类别<br>Truth</td>\n      </tr>\n      <tr>\n          <td>1 (Event)</td>\n          <td>0 (Non-Event)</td>\n      </tr>\n      <tr>\n          <td rowspan='2'>预测类别<br>Prediction</td>\n          <td>1<br>Positive</td>\n          <td>True<br>Positive</td>\n          <td>False<br>Positive</td>\n      </tr>\n      <tr>\n          <td>0<br>Negative</td>\n          <td>False<br>Negative</td>\n          <td>True<br>Negative</td>\n      </tr>\n    </table>\n\n2. Latex语法：\n\n    - 使用array嵌套排列\n\n        ```latex\n        $$\n        \\begin{array}{c|c}\n        a^2-b^2 & \n        \\begin{array}{ccc} 1+i & 1-i & \\frac{1}{\\sqrt{2}}\n        \\end{array} \\\\\\hline  \n        \\begin{array}{cc}a-b &  a+b\n        \\end{array} & \n        \n        \\begin{array}{c|c}\n          A & \\begin{array}{ccc} a & b & c \\end{array}\\\\\n          \\hline\n          \\begin{array}{cc} X &  Y \\end{array} & Z\n        \\end{array}\n        \n        \\end{array}\n        $$\n        ```\n\n        效果：\n        $$\n        \\begin{array}{c|c}\n        a^2-b^2 & \\begin{array}{ccc} 1+i & 1-i & \\frac{1}{\\sqrt{2}} \\end{array} \\\\\\hline\n        \\begin{array}{cc}a-b & a+b \\end{array} & \n            \\begin{array}{c|c}\n              A & \\begin{array}{ccc} a & b & c \\end{array}\\\\\n              \\hline\n              \\begin{array}{cc} X &  Y \\end{array} & Z\n            \\end{array}\n        \\end{array}\n        $$\n        \n    - 使用`rlap`\n    \n        ```latex\n        \\begin{array}{r|lll}\n        & \\rlap{\\text{number of foo}} \\\\\n        \\text{number of bar} & 0 & 1 & 2 \\\\\n        \\hline\n        0 & 0.125 & 0.250 & 0.168 \\\\\n        1 & 0.125 & 0.250 & 0.168 \\\\\n        2 & 0.125 & 0.250 & 0.168\n        \\end{array}\n        ```\n    \n        效果：\n        $$\n        \\begin{array}{r|lll}\n        & \\rlap{\\text{number of foo}} \\\\\n        \\text{number of bar} & 0 & 1 & 2 \\\\\n        \\hline\n        0 & 0.125 & 0.250 & 0.168 \\\\\n        1 & 0.125 & 0.250 & 0.168 \\\\\n        2 & 0.125 & 0.250 & 0.168\n        \\end{array}\n        $$\n\n## 快速插入\n\n- 多种格式的表格的生成与相互转换\n    - [http://tablesgenerator.com](http://tablesgenerator.com/markdown_tables)\n    - [https://tableconvert.com](https://tableconvert.com/) (Thanks @**ayayo** for the recommendation.)\n    - [http://pressbin.com/tools/excel_to_html_table/index.html](http://pressbin.com/tools/excel_to_html_table/index.html)\n\n\n\n## 其他\n\n- 表格内换行：插入`<br>`换行。\n- 表格样式调整与优化：参考->[这篇](http://moxfive.xyz/2016/03/04/markdown-table-style/)","source":"_posts/Markdown Tables.md","raw":"---\ntitle: Markdown 表格生成\ntags: [Productivity]\ndate: 2018-06-29 21:39:19\nupdated: 2019-08-31 14:55:48\nblogged: true\nurlname: Markdown-Tables\n---\nMarkdown 对表格的支持不太友好,这里列了几个处理的技巧。\n\n## 插入表格\n\n在Markdown文本中插入表格主要有以下三种方法：\n\n1. 标准Markdown table语法\n\n    ```markdown\n    |  A   |    B | C    |\n    | :--: | ---: | :--- |\n    |  1   |    2 | 3    |\n    |  4   |    5 | 6    |\n    ```\n\t\n\t效果：\n\t\n    |  A   |    B | C    |\n    | :--: | ---: | :--- |\n    |  1   |    2 | 3    |\n    |  4   |    5 | 6    |\n    \n2. 嵌入html代码\n\n    ```html\n    <table style=\"text-align:center\">\n      <tr>\n          <td>A</td>\n          <td>B</td>\n      </tr>\n      <tr>\n          <td>C</td>\n          <td>D</td>\n      </tr>\n    </table>\n    ```\n\n    效果：\n\n    <table style=\"text-align:center\">\n      <tr>\n          <td>A</td>\n          <td>B</td>\n      </tr>\n      <tr>\n          <td>C</td>\n          <td>D</td>\n      </tr>\n    </table>\n\n3. Latex 语法\n\n    - Typora等编辑器可借由MathJax插入数学公式，其中`\\array`可用来插入表格\n    \n    - 在Hexo等博客框架中也可以利用MathJax插入Latex，不过渲染工具要换为Pandoc\n    \n        ```bash\n        brew install pandoc\n        npm uninstall hexo-renderer-marked --save\n        npm install hexo-renderer-pandoc --save\n        ```\n    \n    ```latex\n    $$\n    \\begin{array}{ccc} % c:center, r:right, l:left\n    \\hline\n    姓名& 学号& 性别\\\\\n    \\hline\n    Steve Jobs& 001& Male\\\\\n    Bill Gates& 002& Female\\\\\n    \\hline\n    \\end{array}\n    $$\n    ```\n    \n    效果：\n    $$\n    \\begin{array}{ccc} % c:center, r:right, l:left\n    \\hline\n    姓名& 学号& 性别\\\\\n    \\hline\n    Steve Jobs& 001& Male\\\\\n    Bill Gates& 002& Female\\\\\n    \\hline\n    \\end{array}\n    $$\n\n## 跨行/跨列表格 columnspan/rowspan\n\n1. html语法\n\n    ```\n    <table style=\"text-align:center\">\n       <tr>\n          <td colspan='2' rowspan='2'></td>\n          <td colspan='2' >真实类别<br>Truth</td>\n      </tr>\n      <tr>\n          <td>1 (Event)</td>\n          <td>0 (Non-Event)</td>\n      </tr>\n      <tr>\n          <td rowspan='2'>预测类别<br>Prediction</td>\n          <td>1<br>Positive</td>\n          <td>True<br>Positive</td>\n          <td>False<br>Positive</td>\n      </tr>\n      <tr>\n          <td>0<br>Negative</td>\n          <td>False<br>Negative</td>\n          <td>True<br>Negative</td>\n      </tr>\n    </table>\n    ```\n\n    效果:\n\n    <table style=\"text-align:center\" class=\"table-bordered table-striped table-condensed\">\n      <tr>\n          <td colspan='2' rowspan='2'>Example</td>\n          <td colspan='2' >真实类别<br>Truth</td>\n      </tr>\n      <tr>\n          <td>1 (Event)</td>\n          <td>0 (Non-Event)</td>\n      </tr>\n      <tr>\n          <td rowspan='2'>预测类别<br>Prediction</td>\n          <td>1<br>Positive</td>\n          <td>True<br>Positive</td>\n          <td>False<br>Positive</td>\n      </tr>\n      <tr>\n          <td>0<br>Negative</td>\n          <td>False<br>Negative</td>\n          <td>True<br>Negative</td>\n      </tr>\n    </table>\n\n2. Latex语法：\n\n    - 使用array嵌套排列\n\n        ```latex\n        $$\n        \\begin{array}{c|c}\n        a^2-b^2 & \n        \\begin{array}{ccc} 1+i & 1-i & \\frac{1}{\\sqrt{2}}\n        \\end{array} \\\\\\hline  \n        \\begin{array}{cc}a-b &  a+b\n        \\end{array} & \n        \n        \\begin{array}{c|c}\n          A & \\begin{array}{ccc} a & b & c \\end{array}\\\\\n          \\hline\n          \\begin{array}{cc} X &  Y \\end{array} & Z\n        \\end{array}\n        \n        \\end{array}\n        $$\n        ```\n\n        效果：\n        $$\n        \\begin{array}{c|c}\n        a^2-b^2 & \\begin{array}{ccc} 1+i & 1-i & \\frac{1}{\\sqrt{2}} \\end{array} \\\\\\hline\n        \\begin{array}{cc}a-b & a+b \\end{array} & \n            \\begin{array}{c|c}\n              A & \\begin{array}{ccc} a & b & c \\end{array}\\\\\n              \\hline\n              \\begin{array}{cc} X &  Y \\end{array} & Z\n            \\end{array}\n        \\end{array}\n        $$\n        \n    - 使用`rlap`\n    \n        ```latex\n        \\begin{array}{r|lll}\n        & \\rlap{\\text{number of foo}} \\\\\n        \\text{number of bar} & 0 & 1 & 2 \\\\\n        \\hline\n        0 & 0.125 & 0.250 & 0.168 \\\\\n        1 & 0.125 & 0.250 & 0.168 \\\\\n        2 & 0.125 & 0.250 & 0.168\n        \\end{array}\n        ```\n    \n        效果：\n        $$\n        \\begin{array}{r|lll}\n        & \\rlap{\\text{number of foo}} \\\\\n        \\text{number of bar} & 0 & 1 & 2 \\\\\n        \\hline\n        0 & 0.125 & 0.250 & 0.168 \\\\\n        1 & 0.125 & 0.250 & 0.168 \\\\\n        2 & 0.125 & 0.250 & 0.168\n        \\end{array}\n        $$\n\n## 快速插入\n\n- 多种格式的表格的生成与相互转换\n    - [http://tablesgenerator.com](http://tablesgenerator.com/markdown_tables)\n    - [https://tableconvert.com](https://tableconvert.com/) (Thanks @**ayayo** for the recommendation.)\n    - [http://pressbin.com/tools/excel_to_html_table/index.html](http://pressbin.com/tools/excel_to_html_table/index.html)\n\n\n\n## 其他\n\n- 表格内换行：插入`<br>`换行。\n- 表格样式调整与优化：参考->[这篇](http://moxfive.xyz/2016/03/04/markdown-table-style/)","slug":"Markdown Tables","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckozvuosk0006dbsg4gwz2kch","content":"<p>Markdown 对表格的支持不太友好,这里列了几个处理的技巧。</p>\n<h2 id=\"插入表格\">插入表格</h2>\n<p>在Markdown文本中插入表格主要有以下三种方法：</p>\n<ol type=\"1\">\n<li><p>标准Markdown table语法</p>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|  A   |    B | C    |</span><br><span class=\"line\">| :--: | ---: | :--- |</span><br><span class=\"line\">|  1   |    2 | 3    |</span><br><span class=\"line\">|  4   |    5 | 6    |</span><br></pre></td></tr></table></figure></p>\n<p>效果：</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">A</th>\n<th style=\"text-align: right;\">B</th>\n<th style=\"text-align: left;\">C</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: right;\">2</td>\n<td style=\"text-align: left;\">3</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">4</td>\n<td style=\"text-align: right;\">5</td>\n<td style=\"text-align: left;\">6</td>\n</tr>\n</tbody>\n</table></li>\n<li><p>嵌入html代码</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;text-align:center&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>D<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>效果：</p>\n<table style=\"text-align:center\">\n<tr>\n<td>\n<p>A</p>\n</td>\n<td>\n<p>B</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>C</p>\n</td>\n<td>\n<p>D</p>\n</td>\n</tr>\n</table></li>\n<li><p>Latex 语法</p>\n<ul>\n<li><p>Typora等编辑器可借由MathJax插入数学公式，其中<code>\\array</code>可用来插入表格</p></li>\n<li><p>在Hexo等博客框架中也可以利用MathJax插入Latex，不过渲染工具要换为Pandoc</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install pandoc</span><br><span class=\"line\">npm uninstall hexo-renderer-marked --save</span><br><span class=\"line\">npm install hexo-renderer-pandoc --save</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$</span><br><span class=\"line\">\\begin&#123;array&#125;&#123;ccc&#125; % c:center, r:right, l:left</span><br><span class=\"line\">\\hline</span><br><span class=\"line\">姓名&amp; 学号&amp; 性别\\\\</span><br><span class=\"line\">\\hline</span><br><span class=\"line\">Steve Jobs&amp; 001&amp; Male\\\\</span><br><span class=\"line\">Bill Gates&amp; 002&amp; Female\\\\</span><br><span class=\"line\">\\hline</span><br><span class=\"line\">\\end&#123;array&#125;</span><br><span class=\"line\">$$</span><br></pre></td></tr></table></figure></p>\n<p>效果： <span class=\"math display\">\\[\n \\begin{array}{ccc} % c:center, r:right, l:left\n \\hline\n 姓名&amp; 学号&amp; 性别\\\\\n \\hline\n Steve Jobs&amp; 001&amp; Male\\\\\n Bill Gates&amp; 002&amp; Female\\\\\n \\hline\n \\end{array}\n \\]</span></p></li>\n</ol>\n<h2 id=\"跨行跨列表格-columnspanrowspan\">跨行/跨列表格 columnspan/rowspan</h2>\n<ol type=\"1\">\n<li><p>html语法</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;table style=&quot;text-align:center&quot;&gt;</span><br><span class=\"line\">   &lt;tr&gt;</span><br><span class=\"line\">      &lt;td colspan=&#x27;2&#x27; rowspan=&#x27;2&#x27;&gt;&lt;/td&gt;</span><br><span class=\"line\">      &lt;td colspan=&#x27;2&#x27; &gt;真实类别&lt;br&gt;Truth&lt;/td&gt;</span><br><span class=\"line\">  &lt;/tr&gt;</span><br><span class=\"line\">  &lt;tr&gt;</span><br><span class=\"line\">      &lt;td&gt;1 (Event)&lt;/td&gt;</span><br><span class=\"line\">      &lt;td&gt;0 (Non-Event)&lt;/td&gt;</span><br><span class=\"line\">  &lt;/tr&gt;</span><br><span class=\"line\">  &lt;tr&gt;</span><br><span class=\"line\">      &lt;td rowspan=&#x27;2&#x27;&gt;预测类别&lt;br&gt;Prediction&lt;/td&gt;</span><br><span class=\"line\">      &lt;td&gt;1&lt;br&gt;Positive&lt;/td&gt;</span><br><span class=\"line\">      &lt;td&gt;True&lt;br&gt;Positive&lt;/td&gt;</span><br><span class=\"line\">      &lt;td&gt;False&lt;br&gt;Positive&lt;/td&gt;</span><br><span class=\"line\">  &lt;/tr&gt;</span><br><span class=\"line\">  &lt;tr&gt;</span><br><span class=\"line\">      &lt;td&gt;0&lt;br&gt;Negative&lt;/td&gt;</span><br><span class=\"line\">      &lt;td&gt;False&lt;br&gt;Negative&lt;/td&gt;</span><br><span class=\"line\">      &lt;td&gt;True&lt;br&gt;Negative&lt;/td&gt;</span><br><span class=\"line\">  &lt;/tr&gt;</span><br><span class=\"line\">&lt;/table&gt;</span><br></pre></td></tr></table></figure></p>\n<p>效果:</p>\n<table style=\"text-align:center\" class=\"table-bordered table-striped table-condensed\">\n<tr>\n<td colspan=\"2\" rowspan=\"2\">\n<p>Example</p>\n</td>\n<td colspan=\"2\">\n<p>真实类别<br>Truth</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>1 (Event)</p>\n</td>\n<td>\n<p>0 (Non-Event)</p>\n</td>\n</tr>\n<tr>\n<td rowspan=\"2\">\n<p>预测类别<br>Prediction</p>\n</td>\n<td>\n<p>1<br>Positive</p>\n</td>\n<td>\n<p>True<br>Positive</p>\n</td>\n<td>\n<p>False<br>Positive</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>0<br>Negative</p>\n</td>\n<td>\n<p>False<br>Negative</p>\n</td>\n<td>\n<p>True<br>Negative</p>\n</td>\n</tr>\n</table></li>\n<li><p>Latex语法：</p>\n<ul>\n<li><p>使用array嵌套排列</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$</span><br><span class=\"line\">\\begin&#123;array&#125;&#123;c|c&#125;</span><br><span class=\"line\">a^2-b^2 &amp; </span><br><span class=\"line\">\\begin&#123;array&#125;&#123;ccc&#125; 1+i &amp; 1-i &amp; \\frac&#123;1&#125;&#123;\\sqrt&#123;2&#125;&#125;</span><br><span class=\"line\">\\end&#123;array&#125; \\\\\\hline  </span><br><span class=\"line\">\\begin&#123;array&#125;&#123;cc&#125;a-b &amp;  a+b</span><br><span class=\"line\">\\end&#123;array&#125; &amp; </span><br><span class=\"line\"></span><br><span class=\"line\">\\begin&#123;array&#125;&#123;c|c&#125;</span><br><span class=\"line\">  A &amp; \\begin&#123;array&#125;&#123;ccc&#125; a &amp; b &amp; c \\end&#123;array&#125;\\\\</span><br><span class=\"line\">  \\hline</span><br><span class=\"line\">  \\begin&#123;array&#125;&#123;cc&#125; X &amp;  Y \\end&#123;array&#125; &amp; Z</span><br><span class=\"line\">\\end&#123;array&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\\end&#123;array&#125;</span><br><span class=\"line\">$$</span><br></pre></td></tr></table></figure></p>\n<p>效果： <span class=\"math display\">\\[\n  \\begin{array}{c|c}\n  a^2-b^2 &amp; \\begin{array}{ccc} 1+i &amp; 1-i &amp; \\frac{1}{\\sqrt{2}} \\end{array} \\\\\\hline\n  \\begin{array}{cc}a-b &amp; a+b \\end{array} &amp; \n      \\begin{array}{c|c}\n        A &amp; \\begin{array}{ccc} a &amp; b &amp; c \\end{array}\\\\\n        \\hline\n        \\begin{array}{cc} X &amp;  Y \\end{array} &amp; Z\n      \\end{array}\n  \\end{array}\n  \\]</span></p></li>\n<li><p>使用<code>rlap</code></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\begin&#123;array&#125;&#123;r|lll&#125;</span><br><span class=\"line\">&amp; \\rlap&#123;\\text&#123;number of foo&#125;&#125; \\\\</span><br><span class=\"line\">\\text&#123;number of bar&#125; &amp; 0 &amp; 1 &amp; 2 \\\\</span><br><span class=\"line\">\\hline</span><br><span class=\"line\">0 &amp; 0.125 &amp; 0.250 &amp; 0.168 \\\\</span><br><span class=\"line\">1 &amp; 0.125 &amp; 0.250 &amp; 0.168 \\\\</span><br><span class=\"line\">2 &amp; 0.125 &amp; 0.250 &amp; 0.168</span><br><span class=\"line\">\\end&#123;array&#125;</span><br></pre></td></tr></table></figure></p>\n<p>效果： <span class=\"math display\">\\[\n  \\begin{array}{r|lll}\n  &amp; \\rlap{\\text{number of foo}} \\\\\n  \\text{number of bar} &amp; 0 &amp; 1 &amp; 2 \\\\\n  \\hline\n  0 &amp; 0.125 &amp; 0.250 &amp; 0.168 \\\\\n  1 &amp; 0.125 &amp; 0.250 &amp; 0.168 \\\\\n  2 &amp; 0.125 &amp; 0.250 &amp; 0.168\n  \\end{array}\n  \\]</span></p></li>\n</ul></li>\n</ol>\n<h2 id=\"快速插入\">快速插入</h2>\n<ul>\n<li>多种格式的表格的生成与相互转换\n<ul>\n<li><a href=\"http://tablesgenerator.com/markdown_tables\">http://tablesgenerator.com</a></li>\n<li><a href=\"https://tableconvert.com/\">https://tableconvert.com</a> (Thanks <span class=\"citation\" data-cites=\"*\">@*</span>*ayayo** for the recommendation.)</li>\n<li><a href=\"http://pressbin.com/tools/excel_to_html_table/index.html\">http://pressbin.com/tools/excel_to_html_table/index.html</a></li>\n</ul></li>\n</ul>\n<h2 id=\"其他\">其他</h2>\n<ul>\n<li>表格内换行：插入<code>&lt;br&gt;</code>换行。</li>\n<li>表格样式调整与优化：参考-&gt;<a href=\"http://moxfive.xyz/2016/03/04/markdown-table-style/\">这篇</a></li>\n</ul>\n","site":{"data":{"projects":[{"name":"PDF2Audio","url":"Convert PDFs to Audiobooks with Machine Learning","desc":"Convert PDFs to Audiobooks with Machine Learning"},{"name":"Alfred PKManager","url":"https://github.com/Konfido/alfred-pkmanager","desc":"A handful Alfred Workflow which helps searching and managing your Personal Knowledge Markdown notes."}]}},"excerpt":"","more":"<p>Markdown 对表格的支持不太友好,这里列了几个处理的技巧。</p>\n<h2 id=\"插入表格\">插入表格</h2>\n<p>在Markdown文本中插入表格主要有以下三种方法：</p>\n<ol type=\"1\">\n<li><p>标准Markdown table语法</p>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|  A   |    B | C    |</span><br><span class=\"line\">| :--: | ---: | :--- |</span><br><span class=\"line\">|  1   |    2 | 3    |</span><br><span class=\"line\">|  4   |    5 | 6    |</span><br></pre></td></tr></table></figure></p>\n<p>效果：</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">A</th>\n<th style=\"text-align: right;\">B</th>\n<th style=\"text-align: left;\">C</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: right;\">2</td>\n<td style=\"text-align: left;\">3</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">4</td>\n<td style=\"text-align: right;\">5</td>\n<td style=\"text-align: left;\">6</td>\n</tr>\n</tbody>\n</table></li>\n<li><p>嵌入html代码</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;text-align:center&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>D<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>效果：</p>\n<table style=\"text-align:center\">\n<tr>\n<td>\n<p>A</p>\n</td>\n<td>\n<p>B</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>C</p>\n</td>\n<td>\n<p>D</p>\n</td>\n</tr>\n</table></li>\n<li><p>Latex 语法</p>\n<ul>\n<li><p>Typora等编辑器可借由MathJax插入数学公式，其中<code>\\array</code>可用来插入表格</p></li>\n<li><p>在Hexo等博客框架中也可以利用MathJax插入Latex，不过渲染工具要换为Pandoc</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install pandoc</span><br><span class=\"line\">npm uninstall hexo-renderer-marked --save</span><br><span class=\"line\">npm install hexo-renderer-pandoc --save</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$</span><br><span class=\"line\">\\begin&#123;array&#125;&#123;ccc&#125; % c:center, r:right, l:left</span><br><span class=\"line\">\\hline</span><br><span class=\"line\">姓名&amp; 学号&amp; 性别\\\\</span><br><span class=\"line\">\\hline</span><br><span class=\"line\">Steve Jobs&amp; 001&amp; Male\\\\</span><br><span class=\"line\">Bill Gates&amp; 002&amp; Female\\\\</span><br><span class=\"line\">\\hline</span><br><span class=\"line\">\\end&#123;array&#125;</span><br><span class=\"line\">$$</span><br></pre></td></tr></table></figure></p>\n<p>效果： <span class=\"math display\">\\[\n \\begin{array}{ccc} % c:center, r:right, l:left\n \\hline\n 姓名&amp; 学号&amp; 性别\\\\\n \\hline\n Steve Jobs&amp; 001&amp; Male\\\\\n Bill Gates&amp; 002&amp; Female\\\\\n \\hline\n \\end{array}\n \\]</span></p></li>\n</ol>\n<h2 id=\"跨行跨列表格-columnspanrowspan\">跨行/跨列表格 columnspan/rowspan</h2>\n<ol type=\"1\">\n<li><p>html语法</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;table style=&quot;text-align:center&quot;&gt;</span><br><span class=\"line\">   &lt;tr&gt;</span><br><span class=\"line\">      &lt;td colspan=&#x27;2&#x27; rowspan=&#x27;2&#x27;&gt;&lt;/td&gt;</span><br><span class=\"line\">      &lt;td colspan=&#x27;2&#x27; &gt;真实类别&lt;br&gt;Truth&lt;/td&gt;</span><br><span class=\"line\">  &lt;/tr&gt;</span><br><span class=\"line\">  &lt;tr&gt;</span><br><span class=\"line\">      &lt;td&gt;1 (Event)&lt;/td&gt;</span><br><span class=\"line\">      &lt;td&gt;0 (Non-Event)&lt;/td&gt;</span><br><span class=\"line\">  &lt;/tr&gt;</span><br><span class=\"line\">  &lt;tr&gt;</span><br><span class=\"line\">      &lt;td rowspan=&#x27;2&#x27;&gt;预测类别&lt;br&gt;Prediction&lt;/td&gt;</span><br><span class=\"line\">      &lt;td&gt;1&lt;br&gt;Positive&lt;/td&gt;</span><br><span class=\"line\">      &lt;td&gt;True&lt;br&gt;Positive&lt;/td&gt;</span><br><span class=\"line\">      &lt;td&gt;False&lt;br&gt;Positive&lt;/td&gt;</span><br><span class=\"line\">  &lt;/tr&gt;</span><br><span class=\"line\">  &lt;tr&gt;</span><br><span class=\"line\">      &lt;td&gt;0&lt;br&gt;Negative&lt;/td&gt;</span><br><span class=\"line\">      &lt;td&gt;False&lt;br&gt;Negative&lt;/td&gt;</span><br><span class=\"line\">      &lt;td&gt;True&lt;br&gt;Negative&lt;/td&gt;</span><br><span class=\"line\">  &lt;/tr&gt;</span><br><span class=\"line\">&lt;/table&gt;</span><br></pre></td></tr></table></figure></p>\n<p>效果:</p>\n<table style=\"text-align:center\" class=\"table-bordered table-striped table-condensed\">\n<tr>\n<td colspan=\"2\" rowspan=\"2\">\n<p>Example</p>\n</td>\n<td colspan=\"2\">\n<p>真实类别<br>Truth</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>1 (Event)</p>\n</td>\n<td>\n<p>0 (Non-Event)</p>\n</td>\n</tr>\n<tr>\n<td rowspan=\"2\">\n<p>预测类别<br>Prediction</p>\n</td>\n<td>\n<p>1<br>Positive</p>\n</td>\n<td>\n<p>True<br>Positive</p>\n</td>\n<td>\n<p>False<br>Positive</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>0<br>Negative</p>\n</td>\n<td>\n<p>False<br>Negative</p>\n</td>\n<td>\n<p>True<br>Negative</p>\n</td>\n</tr>\n</table></li>\n<li><p>Latex语法：</p>\n<ul>\n<li><p>使用array嵌套排列</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$</span><br><span class=\"line\">\\begin&#123;array&#125;&#123;c|c&#125;</span><br><span class=\"line\">a^2-b^2 &amp; </span><br><span class=\"line\">\\begin&#123;array&#125;&#123;ccc&#125; 1+i &amp; 1-i &amp; \\frac&#123;1&#125;&#123;\\sqrt&#123;2&#125;&#125;</span><br><span class=\"line\">\\end&#123;array&#125; \\\\\\hline  </span><br><span class=\"line\">\\begin&#123;array&#125;&#123;cc&#125;a-b &amp;  a+b</span><br><span class=\"line\">\\end&#123;array&#125; &amp; </span><br><span class=\"line\"></span><br><span class=\"line\">\\begin&#123;array&#125;&#123;c|c&#125;</span><br><span class=\"line\">  A &amp; \\begin&#123;array&#125;&#123;ccc&#125; a &amp; b &amp; c \\end&#123;array&#125;\\\\</span><br><span class=\"line\">  \\hline</span><br><span class=\"line\">  \\begin&#123;array&#125;&#123;cc&#125; X &amp;  Y \\end&#123;array&#125; &amp; Z</span><br><span class=\"line\">\\end&#123;array&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\\end&#123;array&#125;</span><br><span class=\"line\">$$</span><br></pre></td></tr></table></figure></p>\n<p>效果： <span class=\"math display\">\\[\n  \\begin{array}{c|c}\n  a^2-b^2 &amp; \\begin{array}{ccc} 1+i &amp; 1-i &amp; \\frac{1}{\\sqrt{2}} \\end{array} \\\\\\hline\n  \\begin{array}{cc}a-b &amp; a+b \\end{array} &amp; \n      \\begin{array}{c|c}\n        A &amp; \\begin{array}{ccc} a &amp; b &amp; c \\end{array}\\\\\n        \\hline\n        \\begin{array}{cc} X &amp;  Y \\end{array} &amp; Z\n      \\end{array}\n  \\end{array}\n  \\]</span></p></li>\n<li><p>使用<code>rlap</code></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\begin&#123;array&#125;&#123;r|lll&#125;</span><br><span class=\"line\">&amp; \\rlap&#123;\\text&#123;number of foo&#125;&#125; \\\\</span><br><span class=\"line\">\\text&#123;number of bar&#125; &amp; 0 &amp; 1 &amp; 2 \\\\</span><br><span class=\"line\">\\hline</span><br><span class=\"line\">0 &amp; 0.125 &amp; 0.250 &amp; 0.168 \\\\</span><br><span class=\"line\">1 &amp; 0.125 &amp; 0.250 &amp; 0.168 \\\\</span><br><span class=\"line\">2 &amp; 0.125 &amp; 0.250 &amp; 0.168</span><br><span class=\"line\">\\end&#123;array&#125;</span><br></pre></td></tr></table></figure></p>\n<p>效果： <span class=\"math display\">\\[\n  \\begin{array}{r|lll}\n  &amp; \\rlap{\\text{number of foo}} \\\\\n  \\text{number of bar} &amp; 0 &amp; 1 &amp; 2 \\\\\n  \\hline\n  0 &amp; 0.125 &amp; 0.250 &amp; 0.168 \\\\\n  1 &amp; 0.125 &amp; 0.250 &amp; 0.168 \\\\\n  2 &amp; 0.125 &amp; 0.250 &amp; 0.168\n  \\end{array}\n  \\]</span></p></li>\n</ul></li>\n</ol>\n<h2 id=\"快速插入\">快速插入</h2>\n<ul>\n<li>多种格式的表格的生成与相互转换\n<ul>\n<li><a href=\"http://tablesgenerator.com/markdown_tables\">http://tablesgenerator.com</a></li>\n<li><a href=\"https://tableconvert.com/\">https://tableconvert.com</a> (Thanks <span class=\"citation\" data-cites=\"*\">@*</span>*ayayo** for the recommendation.)</li>\n<li><a href=\"http://pressbin.com/tools/excel_to_html_table/index.html\">http://pressbin.com/tools/excel_to_html_table/index.html</a></li>\n</ul></li>\n</ul>\n<h2 id=\"其他\">其他</h2>\n<ul>\n<li>表格内换行：插入<code>&lt;br&gt;</code>换行。</li>\n<li>表格样式调整与优化：参考-&gt;<a href=\"http://moxfive.xyz/2016/03/04/markdown-table-style/\">这篇</a></li>\n</ul>\n"},{"title":"Request to Cloud Storage API in Apps Script with OAuth2","urlname":"Request-to-Cloud-Storage-API-in-Apps-Script-with-OAuth2","alias":[],"typora-copy-images-to":"../images","date":"2021-05-10T08:22:28.000Z","updated":"2021-05-10T08:22:28.000Z","_content":"\n\n\n## What we want to do?\n\n- We want to access the data in Cloud Storage through API from App Script.\n- But Google Cloud Storage, unlike [Spreadsheet](https://developers.google.com/apps-script/reference/spreadsheet), is not a built-in services in App Script, so we need to take an extra step to pass the credential.\n- From the [document](https://cloud.google.com/storage/docs/authentication), we know that the Cloud Storage uses OAuth2 protocol for API authentication and authorization.\n\n## What steps we should perform?\n\n- Authentication: First we (user/server) make a request for access token as a client.\n\n    > \"Authentication is the process of determining the identity of a client.\"\n\n- Authorization: Then the App calling Google APIs with the access token\n\n    > \"Authorization is the process of determining what permissions an authenticated identity has on a set of specified resources.\"\n\n## What data do our Script App want to access?\n\n- We need to identify our entity (human or non-human) by type of the data we want to access.\n\n- Here, our App need to access resources stored in Cloud Storage and perform actions on its own, so it holds a **server account credential **, which represents non-human users  and follow the [server-centric auth flow](https://cloud.google.com/storage/docs/authentication#oauth-flows).\n\n- But if your app need to access the end user's data, you need to obtain [user account credential](https://cloud.google.com/storage/docs/authentication#user_accounts) which allows the end user signing in to complete authentication.\n\n## How to create credentials and perform authentication?\n\nIt introduced three options to perform authentication in the [document](https://cloud.google.com/storage/docs/authentication#gsutilauth). If you develop locally or want to deploy with command line, you can select the first two methods with gsutil installed and pass credential (key file) to the environment. And you may also need to install command line tool [clasp](https://github.com/google/clasp) helping you creating the deployment. But if you just want to deploy the App Script on the web editor, like I do, then choose the last method.\n\n1. gsutil authentication\n\n    - Use/create a service account, and download the associated private key which contains your service account credential.\n\n    - Use gcloud command to authenticate:\n\n        ```bash\n        gcloud auth activate-service-account --key-file xxx\n        ```\n\n2. [Client library authentication](https://cloud.google.com/storage/docs/reference/libraries)\n\n    - Install the client library for corresponding languages, e.g. Node.js\n\n        ```javascript\n        npm install --save @google-cloud/storage\n        ```\n\n    - Create a service account in the Cloud Console.\n\n    - Create and download JSON **service key** file.\n\n    - Setting the environment variable in current shell session\n\n        ```bash\n        export GOOGLE_APPLICATION_CREDENTIALS=\"KEY_PATH\"\n        ```\n\n    - Pass the application credentials to the client library\n\n        ```javascript\n        // Imports the Google Cloud client library\n        const {Storage} = require('@google-cloud/storage');\n        const storage = new Storage();\n        const bucketName = 'your-unique-bucket-name';\n        \n        async function createBucket() {\n          await storage.createBucket(bucketName);\n          console.log(`Bucket ${bucketName} created.`);\n        }\n        createBucket().catch(console.error);\n        ```\n\n3. [API authentication under OAuth2 protocol](https://developers.google.com/identity/protocols/oauth2)\n\n    - It allows your application to access Google Cloud APIs on behalf of the end user.\n\n    - The first way to perform authentication is making requests to Cloud Storage (XML/JSON) API, which requires a valid OAuth2 access token.\n\n        ```javascript\n        // Code.gs\n        var url = 'https://storage.googleapis.co/BUCKET/OBJECT'\n        var resp = UrlFetchApp.fetch(url, {\n            method: \"GET\",\n            headers: {\n                Authorization: 'Bearer '+ OAUTH2_TOKEN\n            },\n            'muteHttpExceptions': true,\n        });\n        ```\n\n     - You can generate an access token in the [OAuth2 Playground](https://developers.google.com/oauthplayground/)\n        - \"Select & authorize APIs\": `Cloud Storage API v1`\n        - Choose the API with right [scopes](https://cloud.google.com/storage/docs/authentication#oauth-scopes): read-only, read-write, full-control... Here we choose `https://www.googleapis.com/auth/devstorage.read_write`.\n        - Click `Authorize APIs`\n        - Click `Exchange authorization code for tokens`, and copy the \"Access token\"\n\n    - Cons\n\n        - The access token expires in one hour, so we need to refresh the access token frequently.\n        - We can use a refresh token to ease this inconvenience, but the refresh token also expires in 24 hours.\n    - Find the detailed guiding steps introduced by Microsoft in the following article: [Authenticating with Google services](https://docs.microsoft.com/en-us/advertising/scripts/examples/authenticating-with-google-services)\n\n## How to automatically fetch the access token?\n\n- We expect to improve the procedures of the third method, hoping the access token can be automatically fetched. The solution is redirecting the Script web app to a clickable consent screen once the access token expires, and use the library \"[OAuth2](https://github.com/googleworkspace/apps-script-oauth2)\" to deal with authentication parts.\n\n    <img src=\"../images/20210512153630363.png\" width=\"80%;\" />\n\n- Add OAuth2\n\n    - Click the icon `+` next to \"Libararies\" in Script page\n    - Search the ID of \"OAuth2\" and add it: \"1B7FSrk5Zi6L1rSxxTDgDEUsPzlukDsi4KGuTMorsTQHhGBzBkMun4iDF\"\n\n- Create credentials\n\n    - Find your Script's ID by clicking on the menu item \"Project Settings\".\n    - Go to Cloud platform console, navigate to \"API & Services > Credentials\"\n    - Click on `+ CREATE CREDENTIALS` > `OAuth Client ID` > `Web Application`\n    - Add \"https://script.google.com\" to \"Authorised JavaScript origins\"\n    - Add the following URIs (with {SCRIPT ID} replaced) to \"Authorized redirect URIs\"\n        ```python\n        # Deployment of Apps Script\n        https://script.google.com/macros/d/{SCRIPT ID}/usercallback\n        # Test deployment, its ID differs with the upper deployment's\n        https://script.google.com/macros/s/{TEST SCRIPT ID}/usercallback\n        ```\n    - Get the \"Client ID\" and \"Client Secret\" of this OAuth Client\n    \n- Usage of credentials\n\n    - Back to Script, and paste your \"Client ID\"&\"Client Secret\" on the config part of the \"Code.gs\" file.\n    - Like the \"OAuth2\" lib [said](https://github.com/googleworkspace/apps-script-oauth2#2-direct-the-user-to-the-authorization-url), \"Apps Script UI's are not allowed to redirect the user's window to a new URL, so you'll need to present the authorization URL as a link for the user to click. \" So modify the doGet() function to present the url of \"Consent Screen\" once \"OAuth2\" does not \"hasAccess()\".\n        ```javascript\n        function doGet(e) {\n          Logger.log(e.parameter);\n          var storageService = getService();\n          if (storageService.hasAccess()) {\n            var html = HtmlService.createTemplateFromFile('index');\n            return html.evaluate();\n          } else {\n            // Show the clickable authorization url\n            var authorizationUrl = storageService.getAuthorizationUrl();\n            var template = HtmlService.createTemplate(\n              '<a> Click the link ---> </a>'+\n              '<a href=\"<?= authorizationUrl ?>\"target=\"_blank\">Authorize</a>'+\n              '<p> Refresh this page after you complete the authorization.</p>'\n            );\n            template.authorizationUrl = authorizationUrl;\n            Logger.log('Open the following URL and re-run the script: %s', authorizationUrl);\n            return template.evaluate();\n          }\n        }\n        ```\n      \n      <img src=\"../images/20210512153656860.png\" width=\"90%;\" />\n    \n- Once you've done the previous steps and seen the \"Consent Screen\" page, it will say, \"Google hasn’t verified this app\". Just click on \"Continue\", or you can follow the official [document](https://developers.google.com/apps-script/guides/client-verification#requesting_verification) to deal with it.\n\n- Check out my program of [pdf2audiobook](https://github.com/Konfido/pdf2audiobook) to see the details of implementation.\n\n## How do we manage credentials?\n\n- \"Do not embed secrets related to authentication in source code\" (Check out [best practices for managing credentials.](https://cloud.google.com/docs/authentication/production#best_practices) )So we need an another way to safely store our CLIENT_ID and CLIENT_SECRET.\n- Instead of embedding ID & SECRET directly in the gs code, I could use an input box to pass them in the authorization page. But as they stay in the back-end server side (I assume), so I just gonna bear with it.\n- If you know any simpler and safer way to do it, please leave it in the comments.\n\n\n\n","source":"_posts/OAuth2.md","raw":"---\ntitle: Request to Cloud Storage API in Apps Script with OAuth2\nurlname: Request-to-Cloud-Storage-API-in-Apps-Script-with-OAuth2\nalias: []\ntags: [dev]\ntypora-copy-images-to: ../images\ndate: 2021-05-10 16:22:28\nupdated: 2021-05-10 16:22:28\n---\n\n\n\n## What we want to do?\n\n- We want to access the data in Cloud Storage through API from App Script.\n- But Google Cloud Storage, unlike [Spreadsheet](https://developers.google.com/apps-script/reference/spreadsheet), is not a built-in services in App Script, so we need to take an extra step to pass the credential.\n- From the [document](https://cloud.google.com/storage/docs/authentication), we know that the Cloud Storage uses OAuth2 protocol for API authentication and authorization.\n\n## What steps we should perform?\n\n- Authentication: First we (user/server) make a request for access token as a client.\n\n    > \"Authentication is the process of determining the identity of a client.\"\n\n- Authorization: Then the App calling Google APIs with the access token\n\n    > \"Authorization is the process of determining what permissions an authenticated identity has on a set of specified resources.\"\n\n## What data do our Script App want to access?\n\n- We need to identify our entity (human or non-human) by type of the data we want to access.\n\n- Here, our App need to access resources stored in Cloud Storage and perform actions on its own, so it holds a **server account credential **, which represents non-human users  and follow the [server-centric auth flow](https://cloud.google.com/storage/docs/authentication#oauth-flows).\n\n- But if your app need to access the end user's data, you need to obtain [user account credential](https://cloud.google.com/storage/docs/authentication#user_accounts) which allows the end user signing in to complete authentication.\n\n## How to create credentials and perform authentication?\n\nIt introduced three options to perform authentication in the [document](https://cloud.google.com/storage/docs/authentication#gsutilauth). If you develop locally or want to deploy with command line, you can select the first two methods with gsutil installed and pass credential (key file) to the environment. And you may also need to install command line tool [clasp](https://github.com/google/clasp) helping you creating the deployment. But if you just want to deploy the App Script on the web editor, like I do, then choose the last method.\n\n1. gsutil authentication\n\n    - Use/create a service account, and download the associated private key which contains your service account credential.\n\n    - Use gcloud command to authenticate:\n\n        ```bash\n        gcloud auth activate-service-account --key-file xxx\n        ```\n\n2. [Client library authentication](https://cloud.google.com/storage/docs/reference/libraries)\n\n    - Install the client library for corresponding languages, e.g. Node.js\n\n        ```javascript\n        npm install --save @google-cloud/storage\n        ```\n\n    - Create a service account in the Cloud Console.\n\n    - Create and download JSON **service key** file.\n\n    - Setting the environment variable in current shell session\n\n        ```bash\n        export GOOGLE_APPLICATION_CREDENTIALS=\"KEY_PATH\"\n        ```\n\n    - Pass the application credentials to the client library\n\n        ```javascript\n        // Imports the Google Cloud client library\n        const {Storage} = require('@google-cloud/storage');\n        const storage = new Storage();\n        const bucketName = 'your-unique-bucket-name';\n        \n        async function createBucket() {\n          await storage.createBucket(bucketName);\n          console.log(`Bucket ${bucketName} created.`);\n        }\n        createBucket().catch(console.error);\n        ```\n\n3. [API authentication under OAuth2 protocol](https://developers.google.com/identity/protocols/oauth2)\n\n    - It allows your application to access Google Cloud APIs on behalf of the end user.\n\n    - The first way to perform authentication is making requests to Cloud Storage (XML/JSON) API, which requires a valid OAuth2 access token.\n\n        ```javascript\n        // Code.gs\n        var url = 'https://storage.googleapis.co/BUCKET/OBJECT'\n        var resp = UrlFetchApp.fetch(url, {\n            method: \"GET\",\n            headers: {\n                Authorization: 'Bearer '+ OAUTH2_TOKEN\n            },\n            'muteHttpExceptions': true,\n        });\n        ```\n\n     - You can generate an access token in the [OAuth2 Playground](https://developers.google.com/oauthplayground/)\n        - \"Select & authorize APIs\": `Cloud Storage API v1`\n        - Choose the API with right [scopes](https://cloud.google.com/storage/docs/authentication#oauth-scopes): read-only, read-write, full-control... Here we choose `https://www.googleapis.com/auth/devstorage.read_write`.\n        - Click `Authorize APIs`\n        - Click `Exchange authorization code for tokens`, and copy the \"Access token\"\n\n    - Cons\n\n        - The access token expires in one hour, so we need to refresh the access token frequently.\n        - We can use a refresh token to ease this inconvenience, but the refresh token also expires in 24 hours.\n    - Find the detailed guiding steps introduced by Microsoft in the following article: [Authenticating with Google services](https://docs.microsoft.com/en-us/advertising/scripts/examples/authenticating-with-google-services)\n\n## How to automatically fetch the access token?\n\n- We expect to improve the procedures of the third method, hoping the access token can be automatically fetched. The solution is redirecting the Script web app to a clickable consent screen once the access token expires, and use the library \"[OAuth2](https://github.com/googleworkspace/apps-script-oauth2)\" to deal with authentication parts.\n\n    <img src=\"../images/20210512153630363.png\" width=\"80%;\" />\n\n- Add OAuth2\n\n    - Click the icon `+` next to \"Libararies\" in Script page\n    - Search the ID of \"OAuth2\" and add it: \"1B7FSrk5Zi6L1rSxxTDgDEUsPzlukDsi4KGuTMorsTQHhGBzBkMun4iDF\"\n\n- Create credentials\n\n    - Find your Script's ID by clicking on the menu item \"Project Settings\".\n    - Go to Cloud platform console, navigate to \"API & Services > Credentials\"\n    - Click on `+ CREATE CREDENTIALS` > `OAuth Client ID` > `Web Application`\n    - Add \"https://script.google.com\" to \"Authorised JavaScript origins\"\n    - Add the following URIs (with {SCRIPT ID} replaced) to \"Authorized redirect URIs\"\n        ```python\n        # Deployment of Apps Script\n        https://script.google.com/macros/d/{SCRIPT ID}/usercallback\n        # Test deployment, its ID differs with the upper deployment's\n        https://script.google.com/macros/s/{TEST SCRIPT ID}/usercallback\n        ```\n    - Get the \"Client ID\" and \"Client Secret\" of this OAuth Client\n    \n- Usage of credentials\n\n    - Back to Script, and paste your \"Client ID\"&\"Client Secret\" on the config part of the \"Code.gs\" file.\n    - Like the \"OAuth2\" lib [said](https://github.com/googleworkspace/apps-script-oauth2#2-direct-the-user-to-the-authorization-url), \"Apps Script UI's are not allowed to redirect the user's window to a new URL, so you'll need to present the authorization URL as a link for the user to click. \" So modify the doGet() function to present the url of \"Consent Screen\" once \"OAuth2\" does not \"hasAccess()\".\n        ```javascript\n        function doGet(e) {\n          Logger.log(e.parameter);\n          var storageService = getService();\n          if (storageService.hasAccess()) {\n            var html = HtmlService.createTemplateFromFile('index');\n            return html.evaluate();\n          } else {\n            // Show the clickable authorization url\n            var authorizationUrl = storageService.getAuthorizationUrl();\n            var template = HtmlService.createTemplate(\n              '<a> Click the link ---> </a>'+\n              '<a href=\"<?= authorizationUrl ?>\"target=\"_blank\">Authorize</a>'+\n              '<p> Refresh this page after you complete the authorization.</p>'\n            );\n            template.authorizationUrl = authorizationUrl;\n            Logger.log('Open the following URL and re-run the script: %s', authorizationUrl);\n            return template.evaluate();\n          }\n        }\n        ```\n      \n      <img src=\"../images/20210512153656860.png\" width=\"90%;\" />\n    \n- Once you've done the previous steps and seen the \"Consent Screen\" page, it will say, \"Google hasn’t verified this app\". Just click on \"Continue\", or you can follow the official [document](https://developers.google.com/apps-script/guides/client-verification#requesting_verification) to deal with it.\n\n- Check out my program of [pdf2audiobook](https://github.com/Konfido/pdf2audiobook) to see the details of implementation.\n\n## How do we manage credentials?\n\n- \"Do not embed secrets related to authentication in source code\" (Check out [best practices for managing credentials.](https://cloud.google.com/docs/authentication/production#best_practices) )So we need an another way to safely store our CLIENT_ID and CLIENT_SECRET.\n- Instead of embedding ID & SECRET directly in the gs code, I could use an input box to pass them in the authorization page. But as they stay in the back-end server side (I assume), so I just gonna bear with it.\n- If you know any simpler and safer way to do it, please leave it in the comments.\n\n\n\n","slug":"OAuth2","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckozvuosm0008dbsgcbqp9qbt","content":"<h2 id=\"what-we-want-to-do\">What we want to do?</h2>\n<ul>\n<li>We want to access the data in Cloud Storage through API from App Script.</li>\n<li>But Google Cloud Storage, unlike <a href=\"https://developers.google.com/apps-script/reference/spreadsheet\">Spreadsheet</a>, is not a built-in services in App Script, so we need to take an extra step to pass the credential.</li>\n<li>From the <a href=\"https://cloud.google.com/storage/docs/authentication\">document</a>, we know that the Cloud Storage uses OAuth2 protocol for API authentication and authorization.</li>\n</ul>\n<h2 id=\"what-steps-we-should-perform\">What steps we should perform?</h2>\n<ul>\n<li><p>Authentication: First we (user/server) make a request for access token as a client.</p>\n<blockquote>\n<p>\"Authentication is the process of determining the identity of a client.\"</p>\n</blockquote></li>\n<li><p>Authorization: Then the App calling Google APIs with the access token</p>\n<blockquote>\n<p>\"Authorization is the process of determining what permissions an authenticated identity has on a set of specified resources.\"</p>\n</blockquote></li>\n</ul>\n<h2 id=\"what-data-do-our-script-app-want-to-access\">What data do our Script App want to access?</h2>\n<ul>\n<li><p>We need to identify our entity (human or non-human) by type of the data we want to access.</p></li>\n<li><p>Here, our App need to access resources stored in Cloud Storage and perform actions on its own, so it holds a <strong>server account credential </strong>, which represents non-human users and follow the <a href=\"https://cloud.google.com/storage/docs/authentication#oauth-flows\">server-centric auth flow</a>.</p></li>\n<li><p>But if your app need to access the end user's data, you need to obtain <a href=\"https://cloud.google.com/storage/docs/authentication#user_accounts\">user account credential</a> which allows the end user signing in to complete authentication.</p></li>\n</ul>\n<h2 id=\"how-to-create-credentials-and-perform-authentication\">How to create credentials and perform authentication?</h2>\n<p>It introduced three options to perform authentication in the <a href=\"https://cloud.google.com/storage/docs/authentication#gsutilauth\">document</a>. If you develop locally or want to deploy with command line, you can select the first two methods with gsutil installed and pass credential (key file) to the environment. And you may also need to install command line tool <a href=\"https://github.com/google/clasp\">clasp</a> helping you creating the deployment. But if you just want to deploy the App Script on the web editor, like I do, then choose the last method.</p>\n<ol type=\"1\">\n<li><p>gsutil authentication</p>\n<ul>\n<li><p>Use/create a service account, and download the associated private key which contains your service account credential.</p></li>\n<li><p>Use gcloud command to authenticate:</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcloud auth activate-service-account --key-file xxx</span><br></pre></td></tr></table></figure></p></li>\n</ul></li>\n<li><p><a href=\"https://cloud.google.com/storage/docs/reference/libraries\">Client library authentication</a></p>\n<ul>\n<li><p>Install the client library for corresponding languages, e.g. Node.js</p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save @google-cloud/storage</span><br></pre></td></tr></table></figure></p></li>\n<li><p>Create a service account in the Cloud Console.</p></li>\n<li><p>Create and download JSON <strong>service key</strong> file.</p></li>\n<li><p>Setting the environment variable in current shell session</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> GOOGLE_APPLICATION_CREDENTIALS=<span class=\"string\">&quot;KEY_PATH&quot;</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>Pass the application credentials to the client library</p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Imports the Google Cloud client library</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;Storage&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@google-cloud/storage&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> storage = <span class=\"keyword\">new</span> Storage();</span><br><span class=\"line\"><span class=\"keyword\">const</span> bucketName = <span class=\"string\">&#x27;your-unique-bucket-name&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createBucket</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> storage.createBucket(bucketName);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`Bucket <span class=\"subst\">$&#123;bucketName&#125;</span> created.`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">createBucket().catch(<span class=\"built_in\">console</span>.error);</span><br></pre></td></tr></table></figure></p></li>\n</ul></li>\n<li><p><a href=\"https://developers.google.com/identity/protocols/oauth2\">API authentication under OAuth2 protocol</a></p>\n<ul>\n<li><p>It allows your application to access Google Cloud APIs on behalf of the end user.</p></li>\n<li><p>The first way to perform authentication is making requests to Cloud Storage (XML/JSON) API, which requires a valid OAuth2 access token.</p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Code.gs</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">&#x27;https://storage.googleapis.co/BUCKET/OBJECT&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> resp = UrlFetchApp.fetch(url, &#123;</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&quot;GET&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">Authorization</span>: <span class=\"string\">&#x27;Bearer &#x27;</span>+ OAUTH2_TOKEN</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&#x27;muteHttpExceptions&#x27;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p></li>\n<li><p>You can generate an access token in the <a href=\"https://developers.google.com/oauthplayground/\">OAuth2 Playground</a></p>\n<ul>\n<li>\"Select &amp; authorize APIs\": <code>Cloud Storage API v1</code></li>\n<li>Choose the API with right <a href=\"https://cloud.google.com/storage/docs/authentication#oauth-scopes\">scopes</a>: read-only, read-write, full-control... Here we choose <code>https://www.googleapis.com/auth/devstorage.read_write</code>.</li>\n<li>Click <code>Authorize APIs</code></li>\n<li>Click <code>Exchange authorization code for tokens</code>, and copy the \"Access token\"</li>\n</ul></li>\n<li><p>Cons</p>\n<ul>\n<li>The access token expires in one hour, so we need to refresh the access token frequently.</li>\n<li>We can use a refresh token to ease this inconvenience, but the refresh token also expires in 24 hours.</li>\n</ul></li>\n<li><p>Find the detailed guiding steps introduced by Microsoft in the following article: <a href=\"https://docs.microsoft.com/en-us/advertising/scripts/examples/authenticating-with-google-services\">Authenticating with Google services</a></p></li>\n</ul></li>\n</ol>\n<h2 id=\"how-to-automatically-fetch-the-access-token\">How to automatically fetch the access token?</h2>\n<ul>\n<li><p>We expect to improve the procedures of the third method, hoping the access token can be automatically fetched. The solution is redirecting the Script web app to a clickable consent screen once the access token expires, and use the library \"<a href=\"https://github.com/googleworkspace/apps-script-oauth2\">OAuth2</a>\" to deal with authentication parts.</p>\n<p><img src=\"../images/20210512153630363.png\" width=\"80%;\" /></p></li>\n<li><p>Add OAuth2</p>\n<ul>\n<li>Click the icon <code>+</code> next to \"Libararies\" in Script page</li>\n<li>Search the ID of \"OAuth2\" and add it: \"1B7FSrk5Zi6L1rSxxTDgDEUsPzlukDsi4KGuTMorsTQHhGBzBkMun4iDF\"</li>\n</ul></li>\n<li><p>Create credentials</p>\n<ul>\n<li>Find your Script's ID by clicking on the menu item \"Project Settings\".</li>\n<li>Go to Cloud platform console, navigate to \"API &amp; Services &gt; Credentials\"</li>\n<li>Click on <code>+ CREATE CREDENTIALS</code> &gt; <code>OAuth Client ID</code> &gt; <code>Web Application</code></li>\n<li>Add \"https://script.google.com\" to \"Authorised JavaScript origins\"</li>\n<li>Add the following URIs (with {SCRIPT ID} replaced) to \"Authorized redirect URIs\" <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment of Apps Script</span></span><br><span class=\"line\">https://script.google.com/macros/d/&#123;SCRIPT ID&#125;/usercallback</span><br><span class=\"line\"><span class=\"comment\"># Test deployment, its ID differs with the upper deployment&#x27;s</span></span><br><span class=\"line\">https://script.google.com/macros/s/&#123;TEST SCRIPT ID&#125;/usercallback</span><br></pre></td></tr></table></figure></li>\n<li>Get the \"Client ID\" and \"Client Secret\" of this OAuth Client</li>\n</ul></li>\n<li><p>Usage of credentials</p>\n<ul>\n<li><p>Back to Script, and paste your \"Client ID\"&amp;\"Client Secret\" on the config part of the \"Code.gs\" file.</p></li>\n<li><p>Like the \"OAuth2\" lib <a href=\"https://github.com/googleworkspace/apps-script-oauth2#2-direct-the-user-to-the-authorization-url\">said</a>, \"Apps Script UI's are not allowed to redirect the user's window to a new URL, so you'll need to present the authorization URL as a link for the user to click. \" So modify the doGet() function to present the url of \"Consent Screen\" once \"OAuth2\" does not \"hasAccess()\". <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doGet</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  Logger.log(e.parameter);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> storageService = getService();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (storageService.hasAccess()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> html = HtmlService.createTemplateFromFile(<span class=\"string\">&#x27;index&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> html.evaluate();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Show the clickable authorization url</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> authorizationUrl = storageService.getAuthorizationUrl();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> template = HtmlService.createTemplate(</span><br><span class=\"line\">      <span class=\"string\">&#x27;&lt;a&gt; Click the link ---&gt; &lt;/a&gt;&#x27;</span>+</span><br><span class=\"line\">      <span class=\"string\">&#x27;&lt;a href=&quot;&lt;?= authorizationUrl ?&gt;&quot;target=&quot;_blank&quot;&gt;Authorize&lt;/a&gt;&#x27;</span>+</span><br><span class=\"line\">      <span class=\"string\">&#x27;&lt;p&gt; Refresh this page after you complete the authorization.&lt;/p&gt;&#x27;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    template.authorizationUrl = authorizationUrl;</span><br><span class=\"line\">    Logger.log(<span class=\"string\">&#x27;Open the following URL and re-run the script: %s&#x27;</span>, authorizationUrl);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> template.evaluate();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"../images/20210512153656860.png\" width=\"90%;\" /></p></li>\n</ul></li>\n<li><p>Once you've done the previous steps and seen the \"Consent Screen\" page, it will say, \"Google hasn’t verified this app\". Just click on \"Continue\", or you can follow the official <a href=\"https://developers.google.com/apps-script/guides/client-verification#requesting_verification\">document</a> to deal with it.</p></li>\n<li><p>Check out my program of <a href=\"https://github.com/Konfido/pdf2audiobook\">pdf2audiobook</a> to see the details of implementation.</p></li>\n</ul>\n<h2 id=\"how-do-we-manage-credentials\">How do we manage credentials?</h2>\n<ul>\n<li>\"Do not embed secrets related to authentication in source code\" (Check out <a href=\"https://cloud.google.com/docs/authentication/production#best_practices\">best practices for managing credentials.</a> )So we need an another way to safely store our CLIENT_ID and CLIENT_SECRET.</li>\n<li>Instead of embedding ID &amp; SECRET directly in the gs code, I could use an input box to pass them in the authorization page. But as they stay in the back-end server side (I assume), so I just gonna bear with it.</li>\n<li>If you know any simpler and safer way to do it, please leave it in the comments.</li>\n</ul>\n","site":{"data":{"projects":[{"name":"PDF2Audio","url":"Convert PDFs to Audiobooks with Machine Learning","desc":"Convert PDFs to Audiobooks with Machine Learning"},{"name":"Alfred PKManager","url":"https://github.com/Konfido/alfred-pkmanager","desc":"A handful Alfred Workflow which helps searching and managing your Personal Knowledge Markdown notes."}]}},"excerpt":"","more":"<h2 id=\"what-we-want-to-do\">What we want to do?</h2>\n<ul>\n<li>We want to access the data in Cloud Storage through API from App Script.</li>\n<li>But Google Cloud Storage, unlike <a href=\"https://developers.google.com/apps-script/reference/spreadsheet\">Spreadsheet</a>, is not a built-in services in App Script, so we need to take an extra step to pass the credential.</li>\n<li>From the <a href=\"https://cloud.google.com/storage/docs/authentication\">document</a>, we know that the Cloud Storage uses OAuth2 protocol for API authentication and authorization.</li>\n</ul>\n<h2 id=\"what-steps-we-should-perform\">What steps we should perform?</h2>\n<ul>\n<li><p>Authentication: First we (user/server) make a request for access token as a client.</p>\n<blockquote>\n<p>\"Authentication is the process of determining the identity of a client.\"</p>\n</blockquote></li>\n<li><p>Authorization: Then the App calling Google APIs with the access token</p>\n<blockquote>\n<p>\"Authorization is the process of determining what permissions an authenticated identity has on a set of specified resources.\"</p>\n</blockquote></li>\n</ul>\n<h2 id=\"what-data-do-our-script-app-want-to-access\">What data do our Script App want to access?</h2>\n<ul>\n<li><p>We need to identify our entity (human or non-human) by type of the data we want to access.</p></li>\n<li><p>Here, our App need to access resources stored in Cloud Storage and perform actions on its own, so it holds a <strong>server account credential </strong>, which represents non-human users and follow the <a href=\"https://cloud.google.com/storage/docs/authentication#oauth-flows\">server-centric auth flow</a>.</p></li>\n<li><p>But if your app need to access the end user's data, you need to obtain <a href=\"https://cloud.google.com/storage/docs/authentication#user_accounts\">user account credential</a> which allows the end user signing in to complete authentication.</p></li>\n</ul>\n<h2 id=\"how-to-create-credentials-and-perform-authentication\">How to create credentials and perform authentication?</h2>\n<p>It introduced three options to perform authentication in the <a href=\"https://cloud.google.com/storage/docs/authentication#gsutilauth\">document</a>. If you develop locally or want to deploy with command line, you can select the first two methods with gsutil installed and pass credential (key file) to the environment. And you may also need to install command line tool <a href=\"https://github.com/google/clasp\">clasp</a> helping you creating the deployment. But if you just want to deploy the App Script on the web editor, like I do, then choose the last method.</p>\n<ol type=\"1\">\n<li><p>gsutil authentication</p>\n<ul>\n<li><p>Use/create a service account, and download the associated private key which contains your service account credential.</p></li>\n<li><p>Use gcloud command to authenticate:</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcloud auth activate-service-account --key-file xxx</span><br></pre></td></tr></table></figure></p></li>\n</ul></li>\n<li><p><a href=\"https://cloud.google.com/storage/docs/reference/libraries\">Client library authentication</a></p>\n<ul>\n<li><p>Install the client library for corresponding languages, e.g. Node.js</p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save @google-cloud/storage</span><br></pre></td></tr></table></figure></p></li>\n<li><p>Create a service account in the Cloud Console.</p></li>\n<li><p>Create and download JSON <strong>service key</strong> file.</p></li>\n<li><p>Setting the environment variable in current shell session</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> GOOGLE_APPLICATION_CREDENTIALS=<span class=\"string\">&quot;KEY_PATH&quot;</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>Pass the application credentials to the client library</p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Imports the Google Cloud client library</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;Storage&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@google-cloud/storage&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> storage = <span class=\"keyword\">new</span> Storage();</span><br><span class=\"line\"><span class=\"keyword\">const</span> bucketName = <span class=\"string\">&#x27;your-unique-bucket-name&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createBucket</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> storage.createBucket(bucketName);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`Bucket <span class=\"subst\">$&#123;bucketName&#125;</span> created.`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">createBucket().catch(<span class=\"built_in\">console</span>.error);</span><br></pre></td></tr></table></figure></p></li>\n</ul></li>\n<li><p><a href=\"https://developers.google.com/identity/protocols/oauth2\">API authentication under OAuth2 protocol</a></p>\n<ul>\n<li><p>It allows your application to access Google Cloud APIs on behalf of the end user.</p></li>\n<li><p>The first way to perform authentication is making requests to Cloud Storage (XML/JSON) API, which requires a valid OAuth2 access token.</p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Code.gs</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">&#x27;https://storage.googleapis.co/BUCKET/OBJECT&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> resp = UrlFetchApp.fetch(url, &#123;</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&quot;GET&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">Authorization</span>: <span class=\"string\">&#x27;Bearer &#x27;</span>+ OAUTH2_TOKEN</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&#x27;muteHttpExceptions&#x27;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p></li>\n<li><p>You can generate an access token in the <a href=\"https://developers.google.com/oauthplayground/\">OAuth2 Playground</a></p>\n<ul>\n<li>\"Select &amp; authorize APIs\": <code>Cloud Storage API v1</code></li>\n<li>Choose the API with right <a href=\"https://cloud.google.com/storage/docs/authentication#oauth-scopes\">scopes</a>: read-only, read-write, full-control... Here we choose <code>https://www.googleapis.com/auth/devstorage.read_write</code>.</li>\n<li>Click <code>Authorize APIs</code></li>\n<li>Click <code>Exchange authorization code for tokens</code>, and copy the \"Access token\"</li>\n</ul></li>\n<li><p>Cons</p>\n<ul>\n<li>The access token expires in one hour, so we need to refresh the access token frequently.</li>\n<li>We can use a refresh token to ease this inconvenience, but the refresh token also expires in 24 hours.</li>\n</ul></li>\n<li><p>Find the detailed guiding steps introduced by Microsoft in the following article: <a href=\"https://docs.microsoft.com/en-us/advertising/scripts/examples/authenticating-with-google-services\">Authenticating with Google services</a></p></li>\n</ul></li>\n</ol>\n<h2 id=\"how-to-automatically-fetch-the-access-token\">How to automatically fetch the access token?</h2>\n<ul>\n<li><p>We expect to improve the procedures of the third method, hoping the access token can be automatically fetched. The solution is redirecting the Script web app to a clickable consent screen once the access token expires, and use the library \"<a href=\"https://github.com/googleworkspace/apps-script-oauth2\">OAuth2</a>\" to deal with authentication parts.</p>\n<p><img src=\"../images/20210512153630363.png\" width=\"80%;\" /></p></li>\n<li><p>Add OAuth2</p>\n<ul>\n<li>Click the icon <code>+</code> next to \"Libararies\" in Script page</li>\n<li>Search the ID of \"OAuth2\" and add it: \"1B7FSrk5Zi6L1rSxxTDgDEUsPzlukDsi4KGuTMorsTQHhGBzBkMun4iDF\"</li>\n</ul></li>\n<li><p>Create credentials</p>\n<ul>\n<li>Find your Script's ID by clicking on the menu item \"Project Settings\".</li>\n<li>Go to Cloud platform console, navigate to \"API &amp; Services &gt; Credentials\"</li>\n<li>Click on <code>+ CREATE CREDENTIALS</code> &gt; <code>OAuth Client ID</code> &gt; <code>Web Application</code></li>\n<li>Add \"https://script.google.com\" to \"Authorised JavaScript origins\"</li>\n<li>Add the following URIs (with {SCRIPT ID} replaced) to \"Authorized redirect URIs\" <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment of Apps Script</span></span><br><span class=\"line\">https://script.google.com/macros/d/&#123;SCRIPT ID&#125;/usercallback</span><br><span class=\"line\"><span class=\"comment\"># Test deployment, its ID differs with the upper deployment&#x27;s</span></span><br><span class=\"line\">https://script.google.com/macros/s/&#123;TEST SCRIPT ID&#125;/usercallback</span><br></pre></td></tr></table></figure></li>\n<li>Get the \"Client ID\" and \"Client Secret\" of this OAuth Client</li>\n</ul></li>\n<li><p>Usage of credentials</p>\n<ul>\n<li><p>Back to Script, and paste your \"Client ID\"&amp;\"Client Secret\" on the config part of the \"Code.gs\" file.</p></li>\n<li><p>Like the \"OAuth2\" lib <a href=\"https://github.com/googleworkspace/apps-script-oauth2#2-direct-the-user-to-the-authorization-url\">said</a>, \"Apps Script UI's are not allowed to redirect the user's window to a new URL, so you'll need to present the authorization URL as a link for the user to click. \" So modify the doGet() function to present the url of \"Consent Screen\" once \"OAuth2\" does not \"hasAccess()\". <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doGet</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  Logger.log(e.parameter);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> storageService = getService();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (storageService.hasAccess()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> html = HtmlService.createTemplateFromFile(<span class=\"string\">&#x27;index&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> html.evaluate();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Show the clickable authorization url</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> authorizationUrl = storageService.getAuthorizationUrl();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> template = HtmlService.createTemplate(</span><br><span class=\"line\">      <span class=\"string\">&#x27;&lt;a&gt; Click the link ---&gt; &lt;/a&gt;&#x27;</span>+</span><br><span class=\"line\">      <span class=\"string\">&#x27;&lt;a href=&quot;&lt;?= authorizationUrl ?&gt;&quot;target=&quot;_blank&quot;&gt;Authorize&lt;/a&gt;&#x27;</span>+</span><br><span class=\"line\">      <span class=\"string\">&#x27;&lt;p&gt; Refresh this page after you complete the authorization.&lt;/p&gt;&#x27;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    template.authorizationUrl = authorizationUrl;</span><br><span class=\"line\">    Logger.log(<span class=\"string\">&#x27;Open the following URL and re-run the script: %s&#x27;</span>, authorizationUrl);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> template.evaluate();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"../images/20210512153656860.png\" width=\"90%;\" /></p></li>\n</ul></li>\n<li><p>Once you've done the previous steps and seen the \"Consent Screen\" page, it will say, \"Google hasn’t verified this app\". Just click on \"Continue\", or you can follow the official <a href=\"https://developers.google.com/apps-script/guides/client-verification#requesting_verification\">document</a> to deal with it.</p></li>\n<li><p>Check out my program of <a href=\"https://github.com/Konfido/pdf2audiobook\">pdf2audiobook</a> to see the details of implementation.</p></li>\n</ul>\n<h2 id=\"how-do-we-manage-credentials\">How do we manage credentials?</h2>\n<ul>\n<li>\"Do not embed secrets related to authentication in source code\" (Check out <a href=\"https://cloud.google.com/docs/authentication/production#best_practices\">best practices for managing credentials.</a> )So we need an another way to safely store our CLIENT_ID and CLIENT_SECRET.</li>\n<li>Instead of embedding ID &amp; SECRET directly in the gs code, I could use an input box to pass them in the authorization page. But as they stay in the back-end server side (I assume), so I just gonna bear with it.</li>\n<li>If you know any simpler and safer way to do it, please leave it in the comments.</li>\n</ul>\n"},{"title":"Shell Script","typora-root-url":"..","typora-copy-images-to":"../images","date":"2019-03-14T10:13:29.000Z","updated":"2020-09-02T14:36:09.000Z","blogged":true,"urlname":"shell-script","_content":"\n\n\n## Symbols\n\n- `[` single bracket\n\n    - `if [ condition ]` shell builtin, `test` construct, used to ==evaluate expression==\n\n        ```bash\n        if [ $a == abc ] ; then echo yes ; fi\n        ```\n\n    - `Array[1]=element1` Array initializatin\n\n    - `[a-z]` Range of characters within a Regular Expression\n\n- `[[` double bracket\n\n    - bash builtin, 与`[`类似，extended `test` constrcut\n\n- `{}` braces\n\n    - `${variable}` unambiguously ==identify variables==\n\n        ```bash\n        echo $VARIBLE1234\n        echo ${VARIBLE}1234\n        ```\n\n    - `${!variable}` Indirect variable reference 间接引用\n\n        ```bash\n        NAME=\"VARIABLE\"; VARIABLE=42; echo ${!NAME}\n        # 42\n        ```\n\n    - `{ command1; command2 }` ==command group==\n\n        ```bash\n        { date; top -b -n1 | head ; } >logfile\n        # `date` and `top` output are concatenated\n        ```\n\n    - brace expansions, create lists of strings，可以在loop时使用\n\n        ```bash\n        echo f{oo,ee,a}d\t# food feed fad\n        ```\n\n        ```bash\n        mv error.log{,.OLD}\t# 等价于：mv error.log error.log.OLD\n        ```\n\n        ```bash\n        echo {000..2}\t\t# 000 001 002\n        echo {00..8..3}\t\t# 00 03 06\n        echo {D..T..4} \t\t# D H L P T\n        ```\n\n- `()` parentheses\n\n    - `( commands1; command2 )` ==command group== excuted within a ==subshell== (without affecting the current shell's environment)\n\n        ```bash\n        (cd /tmp; pwd)\n        ```\n\n    - `result=$(COMMAND)` Command substitution\n\n    - `Array=(element1 element2)` Array initialization\n\n- `(())` double parentheses\n\n    - `(( var = 12 ))` Integer arithmetic，==整数计算==\n    - `var=$(( 20 + 5 ))` 整数计算与赋值\n    - C-style operation\n        - `((var++))` /  `((var--))` / `((var0 = var1<12?3:21))`\n\n- `#`：注释\n\n## 变量\n\n- 格式要求\n\n    - 定义变量时，变量名不加`$`符号，使用时加​`$`\n        ```bash\n        test=\"hello\"\n        echo $test\n        ```\n    - 变量名和等号之间==不能有空格==\n    - 传递带空格的参数需要加引号：`\"${VARIABLE}\"`\n    - 单引号内任何字符不视作变量\n    - 将命令结果赋值给变量：反引号 或`$()` \n        - <code>x=\\`commands\\`</code>\n        - `x=$(commands)`\n- 变量的作用域\n    - Shell脚本中定义的变量是global的，作用域从被定义的地方开始\n    - Shell==函数==中定义的变量默认是global的，作用域从被调用时定义处开始\n    - Shell函数内显式定义local变量时，作用域在函数内；但是与global变量重名时，会在函数内暂时屏蔽global变量\n        ```bash\n        foo()\n        {\n        \tlocal x=100\n        \techo $x\n        }\n        foo \t\t# 100\n        echo $x \t# show nothing\n        ```\n- 判断变量是否为空\n    - `${A:+xxx}` 变量A已赋值时，其值用xxx (字符串/变量的值) 替换，否则不进行任何替换\n    - `${A:-xxx}` 变量A==未定义/值为空==时，返回xxx (字符串/变量的值)；否则返回变量A的值\n    - `${A:=xxx}` 变量A未定义/值为空时，将xxx赋值给A，返回xxx；否则返回变量A的值\n    \n- 特殊变量\n\n    | $0   | 当前脚本的文件名                                             |\n    | ---- | ------------------------------------------------------------ |\n    | $n   | 传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是`$1`，第二个参数是`$2`。 |\n    | $#   | 传递给脚本或函数的**参数个数**。                             |\n    | $*   | 传递给脚本或函数的**所有参数**。被双引号包含时，以`\"$1\"，\"$2\" … \"$n\" `的形式输出所有参数。 |\n    | $@   | 传递给脚本或函数的所有参数。被双引号包含时，以`\"$1 $2 … $n\"`的形式输出所有参数整体。 |\n    | $?   | 上个命令的退出状态，或函数的返回值。                         |\n    | $$   | 当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。 |\n    | $!   | 后台运行的最后一个进程的ID号                                 |\n    \n    - `[@]` 引用数组中的值\n    \n        ```bash\n        declare -a testarray=('box' 'cat' 'dog')\n        for item in ${testarray[@]}; do\n        \techo $item\n        done\n        #box\n        #cat\n        #dog\n        ```\n\n\n\n## 数学计算\n\n- `let`\n\n    ```bash\n    let `sum=3+5`\t# sum <- 8\n    ```\n\n- `expr`\n\n    ```bash\n    sum=`expr 3 - 6`    \t# 运算符两边空格\n    sum=`expr \\( 3 \\* \\) `\t# 转译*)(\n    ```\n\n- `$(())`\n\n    ```bash\n    sum=$((3+5))\n    ```\n\n    \n\n## expression 表达式种类\n\n- 文件表达式\n\n    - `-d` 如果目录存在：`if [ -d .. ]` \n    - `-f` 如果文件存在：`if [ -f file ]` \n    - `-s` 文件存在且非空\n    - `-r` 文件存在且可读\n    - `-w` 文件存在且可写\n    - `-x` 文件存在且可执行\n\n- ==整数变量==表达式\n    - `-eq` 如果等于：`if [ int1 -eq int2 ] `\n    - `-ne` 如果不等于 \n    - `-ge ` 如果>=\n    - `-gt` 如果>\n    - `-le ` 如果<=\n    - `-lt ` 如果<\n\n-  字符串变量表达式\n\n    - `=`  等于\n        - `if [ $a = $b ]  `，如果string1等于string2\n        - 允许使用赋值号做等号，等号两边==必须留空格==\n\n    - `!= `  不等于\n        - `if [ $a != $b ]` 如果string1不等于string2 \n    - `-z`  为空\n        - `if [ -z $string ]` 如果string 为空\n\n    - `-n`  非空\n        - ``if [ -n $string ]  `` 等价于 `if [ $string]` 如果string 非空(非0），返回0(true)\n\n- 逻辑表达式\n\n    - `!` 逻辑非： `if [ ! expr ]` \n    - `-a` 逻辑与：`if [ expr1 -a expr2 ]`\n    - `-o` 逻辑或：`if [ expr1 -o expr2 ]`\n\n\n\n## 字符串处理\n\n- 字符串长度/字符数量：`${#A}`\n\n### 匹配\n- 简单方法，若 `$string`中含有`$foo` 则匹配成功：\n\n    ```bash\n    [[ $string == *$foo* ]] && echo match\n    ```\n\n    ```bash\n    [[ $string =~ $foo ]] && echo match\n    ```\n\n- 非贪婪匹配，匹配符合通配符的==最短结果==\n    - `${A%B}` 从右向左匹配B，删除匹配，保留左边字符\n    - `${A#B}` 从左向右匹配B，删除匹配，保留右边字符\n    - `${A/old/new}` 用`new`替换`A`中匹配的`old`字符串\n- 贪婪匹配，匹配==最长结果==\n    -  `${A%%B}`\n    -  `${A##B}`\n    -  `${A//old/new}`\n\n### 提取\n\n- `grep`\n\n    ```bash\n    # -o，只输出匹配的字符串; -E，使用扩展正则\n    echo aaa888 | grep -Eo '\\d+'\t\t\n    # 888\n    ```\n\n- `sed`\n\n    - sed没有`\\d` `\\s`等用于匹配的元字符\n\n        ```bash\n        echo aaa888s | sed -E 's/.*[a-z]([0-9]+).*/\\q/'\t# -E，使用正则\n        # 888\n        ```\n\n- `awk` 的 `match()`函数\n\n    ```bash\n    echo aaa888 | awk 'match($0,/([0-9]+)/, matches) {print matches[1]}'\n    ```\n\n- `${A:offset}` \n  \n    - 从字符串左边，偏移offset个字符，截取到字符串结束\n    - `${A:offset:length}` 截取length长度\n    \n- `${A:0-offset}` \n  \n    - 从字符串右边，偏移offset个字符，截取到字符串结束\n    - `${A:0-offset:length}`\n    \n- String to Array\n\n    ```bash\n    DATES_STRING='Jun01 Jun02 Jun03 Jun04 Jun05'\n    IFS=' ' read -a DATES_ARRAY <<< \"$DATES_STRING\"\n    ```\n\n### 替换\n\n- 普通字符\n\n    ```bash\n    echo \"haha s\" | sed 's/ha/Ha/g'\n    ```\n\n- 替换`\\n`\n\n    ```bash\n    echo $s | tr '\\n' '\\t'\n    ```\n\n    \n\n\n\n\n## 重定向 输入/输出\n\n|    Commands     |                    Description                     |\n| :-------------: | :------------------------------------------------: |\n| command > file  |                将输出重定向到 file                 |\n| command < file  |                将输入重定向到 file                 |\n| command >> file |          将输出以追加的方式重定向到 file           |\n|    n > file     |       将文件描述符为 n 的文件重定向到 file。       |\n|    n >> file    | 将文件描述符为 n 的文件以追加的方式重定向到 file。 |\n|     n >& m      |              将输出文件 m 和 n 合并。              |\n|     n <& m      |              将输入文件 m 和 n 合并。              |\n|     << tag      | 将开始标记 tag 和结束标记 tag 之间的内容作为输入。 |\n\n- 默认打开的文件描述符：0（标准输入），1（标准输出），2（标准错误）\n- `1>`：可简写为`>`，标准输出重定向\n- `2>&1`：标准错误重定向到标准输出。例：`echo hello 1>file.out 2>&1`，输出与错误都定向到file.out\n- `1>&2`：标准输出重定向到标准错误\n- `&>file`：标准输出与标准错误都从定向到file\n\n\n\n## 流程控制\n\n- `case`\n\n    ```bash\n    case $a in\n        10) echo \"1\"\n        ;;\n        reload) echo \"12\"\n        ;;\n        *) echo \"0\"\n        ;;\n    esac\n    ```\n\n- `if/else`\n\n    ```bash\n    if [ $a -eq $b ]; then\n        echo \"=\"\n    elif [ $a -gt $b ]; then\n        echo \">\"\t\n    else\n        echo \"<\"\n    fi\n    ```\n    \n    - `if`语句简写\n    \n        ```bash\n        # 如果左边表达式为真，则执行右边的语句\n        [ -f \"./foo\" ] && echo \"yes\"\n        # 如果左边表达式为假，则执行右边\n        [ -f \"./foo\"] || exit 0 # 文件不存在就退出\n        ```\n    \n    - 可用来handle exception\n    \n        ```bash\n        # run fallback_command if a_command fails (returns a non-zero value)\n        a_command || fallback_command\n        # execute second_command if a_command is successful (returns 0)\n        a_command && second_command\n        ```\n    \n        \n    \n- `for/do`\n\n  ```bash\n  for var in 1 2 3 4 5\n  do \n      echo \"$var\"\n  done\n  ```\n  \n- `while/do`\n\n    ```bash\n    while [ $int -lt 8 ]\n    do \n        case $int in\n            1|4) echo \"$int\"\n                ;;\n            0|2|5|) echo \"$int\"\n                continue\n                ;;\n            *) echo \"others\"\n                break\n                ;;\n        esac\n    done\n    ```\n\n## function\n\n- 函数名前的\"function\"可以省略\n- 使用 `$?` 获取函数返回值，且调用函数后需立即获取，否则返回值丢失\n\n    ```bash\n    function foo(){\n        COMMANDS\n        return xxx\n    }\n    ```\n\n    ```bash\n    foo(){\n        COMMANDS\n        ...\n        echo $1\t\t# 引用参数\n        return xxx\t# 返回值\n    }\n    foo 13\t\t\t# 传递参数\n    ehco $?\t\t\t# 获取函数返回值\n    ```\n    \n    \n\n## 子进程/子Shell\n\n- 子Shelll\n\n    - 只使用 fork() 函数，父进程中的函数、变量(全局变量、局部变量)、文件描述符、别名等在子Shell中仍然有效；子Shell对参数的修改无法传回父Shell。\n\n    - 组命令，管道，命令替换会产生子Shell\n\n        ```bash\n        (echo \"$SHLVL  $BASH_SUBSHELL\")\t\t\t# 在子Shell执行的组命令\n        { command1; command2; command3; }\t\t# 在当前Shell执行的组命令\n        \n        echo \"test\" | { echo \"$SHLVL  $BASH_SUBSHELL\"; }\t# 管道\n        \n        var=$(echo \"$SHLVL  $BASH_SUBSHELL\")\t# 命令替换\n        echo $var\n        ```\n\n- 子进程\n\n    - 使用 fork() 和 exec() 函数，即通过 fork() 创建子进程后立即调用 exec() 函数加载新的可执行文件，不使用父进程的参数。\n\n    - 下列几种方式会创建子进程，运行结束后立即退出子进程\n\n        ```bash\n        # a_script.sh\n        bash ./test.sh\n        ./test.sh\n        chmod +x ./test.sh\n        ```\n\n- `&` 启动并行进程，加速命令执行\n\n    ```bash\n    PIDARRAY=()\n    for file in f1 f2\n    do \n        echo $file &\t\t# 命令符&, 将命令置于后台并继续执行脚本\n        PIDARRAY+=(\"$!\")\t# $! 保存着最近一个后台进程的PID\n    done\n    wait ${PIDARRAY[@]}\t\t# wait 命令等待这些进程结束\n    ```\n\n\n\n## Commands\n\n- `printf`\n    - 格式化输出\n\n        ```shell\n        > printf \"ID: %-5s NAME: %-10s Avage: %4.2f\\n\" 1 tom 74.233;\n        ID: 1     NAME: tom        Avage: 74.23\n        ```\n\n    - 输出重复字符串\n\n        ```bash\n        printf 'hello %.0s' {1..6}\n        ```\n\n    - `--`  means whatever follows should **not** be interpreted as a command line *option* to `printf`\n\n        ```bash\n        printf -- '--- hello ---'\n        ```\n\n- `xargs`: 传递参数的过滤器\n\n    - 列出当前文件夹下每个pdf文件的大小\n\n        ```bash\n        ls *.pdf | xargs -n1 -I{} du -h {} \n        # -n1：每行输出一个\n        # -I{}：substitute occurrences of {} in command with the parsed argument\n        ```\n\n## Others\n\n- Shell [语法](https://segmentfault.com/a/1190000008080537), #TODO\n\n## [后台运行](./shell脚本后台运行)\n\n","source":"_posts/Shell script.md","raw":"---\ntitle: Shell Script\ntags: [dev, Handbook]\ntypora-root-url: ..\ntypora-copy-images-to: ../images\ndate: 2019-03-14 18:13:29\nupdated: 2020-09-02 22:36:09\nblogged: true\nurlname: shell-script\n---\n\n\n\n## Symbols\n\n- `[` single bracket\n\n    - `if [ condition ]` shell builtin, `test` construct, used to ==evaluate expression==\n\n        ```bash\n        if [ $a == abc ] ; then echo yes ; fi\n        ```\n\n    - `Array[1]=element1` Array initializatin\n\n    - `[a-z]` Range of characters within a Regular Expression\n\n- `[[` double bracket\n\n    - bash builtin, 与`[`类似，extended `test` constrcut\n\n- `{}` braces\n\n    - `${variable}` unambiguously ==identify variables==\n\n        ```bash\n        echo $VARIBLE1234\n        echo ${VARIBLE}1234\n        ```\n\n    - `${!variable}` Indirect variable reference 间接引用\n\n        ```bash\n        NAME=\"VARIABLE\"; VARIABLE=42; echo ${!NAME}\n        # 42\n        ```\n\n    - `{ command1; command2 }` ==command group==\n\n        ```bash\n        { date; top -b -n1 | head ; } >logfile\n        # `date` and `top` output are concatenated\n        ```\n\n    - brace expansions, create lists of strings，可以在loop时使用\n\n        ```bash\n        echo f{oo,ee,a}d\t# food feed fad\n        ```\n\n        ```bash\n        mv error.log{,.OLD}\t# 等价于：mv error.log error.log.OLD\n        ```\n\n        ```bash\n        echo {000..2}\t\t# 000 001 002\n        echo {00..8..3}\t\t# 00 03 06\n        echo {D..T..4} \t\t# D H L P T\n        ```\n\n- `()` parentheses\n\n    - `( commands1; command2 )` ==command group== excuted within a ==subshell== (without affecting the current shell's environment)\n\n        ```bash\n        (cd /tmp; pwd)\n        ```\n\n    - `result=$(COMMAND)` Command substitution\n\n    - `Array=(element1 element2)` Array initialization\n\n- `(())` double parentheses\n\n    - `(( var = 12 ))` Integer arithmetic，==整数计算==\n    - `var=$(( 20 + 5 ))` 整数计算与赋值\n    - C-style operation\n        - `((var++))` /  `((var--))` / `((var0 = var1<12?3:21))`\n\n- `#`：注释\n\n## 变量\n\n- 格式要求\n\n    - 定义变量时，变量名不加`$`符号，使用时加​`$`\n        ```bash\n        test=\"hello\"\n        echo $test\n        ```\n    - 变量名和等号之间==不能有空格==\n    - 传递带空格的参数需要加引号：`\"${VARIABLE}\"`\n    - 单引号内任何字符不视作变量\n    - 将命令结果赋值给变量：反引号 或`$()` \n        - <code>x=\\`commands\\`</code>\n        - `x=$(commands)`\n- 变量的作用域\n    - Shell脚本中定义的变量是global的，作用域从被定义的地方开始\n    - Shell==函数==中定义的变量默认是global的，作用域从被调用时定义处开始\n    - Shell函数内显式定义local变量时，作用域在函数内；但是与global变量重名时，会在函数内暂时屏蔽global变量\n        ```bash\n        foo()\n        {\n        \tlocal x=100\n        \techo $x\n        }\n        foo \t\t# 100\n        echo $x \t# show nothing\n        ```\n- 判断变量是否为空\n    - `${A:+xxx}` 变量A已赋值时，其值用xxx (字符串/变量的值) 替换，否则不进行任何替换\n    - `${A:-xxx}` 变量A==未定义/值为空==时，返回xxx (字符串/变量的值)；否则返回变量A的值\n    - `${A:=xxx}` 变量A未定义/值为空时，将xxx赋值给A，返回xxx；否则返回变量A的值\n    \n- 特殊变量\n\n    | $0   | 当前脚本的文件名                                             |\n    | ---- | ------------------------------------------------------------ |\n    | $n   | 传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是`$1`，第二个参数是`$2`。 |\n    | $#   | 传递给脚本或函数的**参数个数**。                             |\n    | $*   | 传递给脚本或函数的**所有参数**。被双引号包含时，以`\"$1\"，\"$2\" … \"$n\" `的形式输出所有参数。 |\n    | $@   | 传递给脚本或函数的所有参数。被双引号包含时，以`\"$1 $2 … $n\"`的形式输出所有参数整体。 |\n    | $?   | 上个命令的退出状态，或函数的返回值。                         |\n    | $$   | 当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。 |\n    | $!   | 后台运行的最后一个进程的ID号                                 |\n    \n    - `[@]` 引用数组中的值\n    \n        ```bash\n        declare -a testarray=('box' 'cat' 'dog')\n        for item in ${testarray[@]}; do\n        \techo $item\n        done\n        #box\n        #cat\n        #dog\n        ```\n\n\n\n## 数学计算\n\n- `let`\n\n    ```bash\n    let `sum=3+5`\t# sum <- 8\n    ```\n\n- `expr`\n\n    ```bash\n    sum=`expr 3 - 6`    \t# 运算符两边空格\n    sum=`expr \\( 3 \\* \\) `\t# 转译*)(\n    ```\n\n- `$(())`\n\n    ```bash\n    sum=$((3+5))\n    ```\n\n    \n\n## expression 表达式种类\n\n- 文件表达式\n\n    - `-d` 如果目录存在：`if [ -d .. ]` \n    - `-f` 如果文件存在：`if [ -f file ]` \n    - `-s` 文件存在且非空\n    - `-r` 文件存在且可读\n    - `-w` 文件存在且可写\n    - `-x` 文件存在且可执行\n\n- ==整数变量==表达式\n    - `-eq` 如果等于：`if [ int1 -eq int2 ] `\n    - `-ne` 如果不等于 \n    - `-ge ` 如果>=\n    - `-gt` 如果>\n    - `-le ` 如果<=\n    - `-lt ` 如果<\n\n-  字符串变量表达式\n\n    - `=`  等于\n        - `if [ $a = $b ]  `，如果string1等于string2\n        - 允许使用赋值号做等号，等号两边==必须留空格==\n\n    - `!= `  不等于\n        - `if [ $a != $b ]` 如果string1不等于string2 \n    - `-z`  为空\n        - `if [ -z $string ]` 如果string 为空\n\n    - `-n`  非空\n        - ``if [ -n $string ]  `` 等价于 `if [ $string]` 如果string 非空(非0），返回0(true)\n\n- 逻辑表达式\n\n    - `!` 逻辑非： `if [ ! expr ]` \n    - `-a` 逻辑与：`if [ expr1 -a expr2 ]`\n    - `-o` 逻辑或：`if [ expr1 -o expr2 ]`\n\n\n\n## 字符串处理\n\n- 字符串长度/字符数量：`${#A}`\n\n### 匹配\n- 简单方法，若 `$string`中含有`$foo` 则匹配成功：\n\n    ```bash\n    [[ $string == *$foo* ]] && echo match\n    ```\n\n    ```bash\n    [[ $string =~ $foo ]] && echo match\n    ```\n\n- 非贪婪匹配，匹配符合通配符的==最短结果==\n    - `${A%B}` 从右向左匹配B，删除匹配，保留左边字符\n    - `${A#B}` 从左向右匹配B，删除匹配，保留右边字符\n    - `${A/old/new}` 用`new`替换`A`中匹配的`old`字符串\n- 贪婪匹配，匹配==最长结果==\n    -  `${A%%B}`\n    -  `${A##B}`\n    -  `${A//old/new}`\n\n### 提取\n\n- `grep`\n\n    ```bash\n    # -o，只输出匹配的字符串; -E，使用扩展正则\n    echo aaa888 | grep -Eo '\\d+'\t\t\n    # 888\n    ```\n\n- `sed`\n\n    - sed没有`\\d` `\\s`等用于匹配的元字符\n\n        ```bash\n        echo aaa888s | sed -E 's/.*[a-z]([0-9]+).*/\\q/'\t# -E，使用正则\n        # 888\n        ```\n\n- `awk` 的 `match()`函数\n\n    ```bash\n    echo aaa888 | awk 'match($0,/([0-9]+)/, matches) {print matches[1]}'\n    ```\n\n- `${A:offset}` \n  \n    - 从字符串左边，偏移offset个字符，截取到字符串结束\n    - `${A:offset:length}` 截取length长度\n    \n- `${A:0-offset}` \n  \n    - 从字符串右边，偏移offset个字符，截取到字符串结束\n    - `${A:0-offset:length}`\n    \n- String to Array\n\n    ```bash\n    DATES_STRING='Jun01 Jun02 Jun03 Jun04 Jun05'\n    IFS=' ' read -a DATES_ARRAY <<< \"$DATES_STRING\"\n    ```\n\n### 替换\n\n- 普通字符\n\n    ```bash\n    echo \"haha s\" | sed 's/ha/Ha/g'\n    ```\n\n- 替换`\\n`\n\n    ```bash\n    echo $s | tr '\\n' '\\t'\n    ```\n\n    \n\n\n\n\n## 重定向 输入/输出\n\n|    Commands     |                    Description                     |\n| :-------------: | :------------------------------------------------: |\n| command > file  |                将输出重定向到 file                 |\n| command < file  |                将输入重定向到 file                 |\n| command >> file |          将输出以追加的方式重定向到 file           |\n|    n > file     |       将文件描述符为 n 的文件重定向到 file。       |\n|    n >> file    | 将文件描述符为 n 的文件以追加的方式重定向到 file。 |\n|     n >& m      |              将输出文件 m 和 n 合并。              |\n|     n <& m      |              将输入文件 m 和 n 合并。              |\n|     << tag      | 将开始标记 tag 和结束标记 tag 之间的内容作为输入。 |\n\n- 默认打开的文件描述符：0（标准输入），1（标准输出），2（标准错误）\n- `1>`：可简写为`>`，标准输出重定向\n- `2>&1`：标准错误重定向到标准输出。例：`echo hello 1>file.out 2>&1`，输出与错误都定向到file.out\n- `1>&2`：标准输出重定向到标准错误\n- `&>file`：标准输出与标准错误都从定向到file\n\n\n\n## 流程控制\n\n- `case`\n\n    ```bash\n    case $a in\n        10) echo \"1\"\n        ;;\n        reload) echo \"12\"\n        ;;\n        *) echo \"0\"\n        ;;\n    esac\n    ```\n\n- `if/else`\n\n    ```bash\n    if [ $a -eq $b ]; then\n        echo \"=\"\n    elif [ $a -gt $b ]; then\n        echo \">\"\t\n    else\n        echo \"<\"\n    fi\n    ```\n    \n    - `if`语句简写\n    \n        ```bash\n        # 如果左边表达式为真，则执行右边的语句\n        [ -f \"./foo\" ] && echo \"yes\"\n        # 如果左边表达式为假，则执行右边\n        [ -f \"./foo\"] || exit 0 # 文件不存在就退出\n        ```\n    \n    - 可用来handle exception\n    \n        ```bash\n        # run fallback_command if a_command fails (returns a non-zero value)\n        a_command || fallback_command\n        # execute second_command if a_command is successful (returns 0)\n        a_command && second_command\n        ```\n    \n        \n    \n- `for/do`\n\n  ```bash\n  for var in 1 2 3 4 5\n  do \n      echo \"$var\"\n  done\n  ```\n  \n- `while/do`\n\n    ```bash\n    while [ $int -lt 8 ]\n    do \n        case $int in\n            1|4) echo \"$int\"\n                ;;\n            0|2|5|) echo \"$int\"\n                continue\n                ;;\n            *) echo \"others\"\n                break\n                ;;\n        esac\n    done\n    ```\n\n## function\n\n- 函数名前的\"function\"可以省略\n- 使用 `$?` 获取函数返回值，且调用函数后需立即获取，否则返回值丢失\n\n    ```bash\n    function foo(){\n        COMMANDS\n        return xxx\n    }\n    ```\n\n    ```bash\n    foo(){\n        COMMANDS\n        ...\n        echo $1\t\t# 引用参数\n        return xxx\t# 返回值\n    }\n    foo 13\t\t\t# 传递参数\n    ehco $?\t\t\t# 获取函数返回值\n    ```\n    \n    \n\n## 子进程/子Shell\n\n- 子Shelll\n\n    - 只使用 fork() 函数，父进程中的函数、变量(全局变量、局部变量)、文件描述符、别名等在子Shell中仍然有效；子Shell对参数的修改无法传回父Shell。\n\n    - 组命令，管道，命令替换会产生子Shell\n\n        ```bash\n        (echo \"$SHLVL  $BASH_SUBSHELL\")\t\t\t# 在子Shell执行的组命令\n        { command1; command2; command3; }\t\t# 在当前Shell执行的组命令\n        \n        echo \"test\" | { echo \"$SHLVL  $BASH_SUBSHELL\"; }\t# 管道\n        \n        var=$(echo \"$SHLVL  $BASH_SUBSHELL\")\t# 命令替换\n        echo $var\n        ```\n\n- 子进程\n\n    - 使用 fork() 和 exec() 函数，即通过 fork() 创建子进程后立即调用 exec() 函数加载新的可执行文件，不使用父进程的参数。\n\n    - 下列几种方式会创建子进程，运行结束后立即退出子进程\n\n        ```bash\n        # a_script.sh\n        bash ./test.sh\n        ./test.sh\n        chmod +x ./test.sh\n        ```\n\n- `&` 启动并行进程，加速命令执行\n\n    ```bash\n    PIDARRAY=()\n    for file in f1 f2\n    do \n        echo $file &\t\t# 命令符&, 将命令置于后台并继续执行脚本\n        PIDARRAY+=(\"$!\")\t# $! 保存着最近一个后台进程的PID\n    done\n    wait ${PIDARRAY[@]}\t\t# wait 命令等待这些进程结束\n    ```\n\n\n\n## Commands\n\n- `printf`\n    - 格式化输出\n\n        ```shell\n        > printf \"ID: %-5s NAME: %-10s Avage: %4.2f\\n\" 1 tom 74.233;\n        ID: 1     NAME: tom        Avage: 74.23\n        ```\n\n    - 输出重复字符串\n\n        ```bash\n        printf 'hello %.0s' {1..6}\n        ```\n\n    - `--`  means whatever follows should **not** be interpreted as a command line *option* to `printf`\n\n        ```bash\n        printf -- '--- hello ---'\n        ```\n\n- `xargs`: 传递参数的过滤器\n\n    - 列出当前文件夹下每个pdf文件的大小\n\n        ```bash\n        ls *.pdf | xargs -n1 -I{} du -h {} \n        # -n1：每行输出一个\n        # -I{}：substitute occurrences of {} in command with the parsed argument\n        ```\n\n## Others\n\n- Shell [语法](https://segmentfault.com/a/1190000008080537), #TODO\n\n## [后台运行](./shell脚本后台运行)\n\n","slug":"Shell script","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckozvuosn000adbsghsl61me1","content":"<h2 id=\"symbols\">Symbols</h2>\n<ul>\n<li><p><code>[</code> single bracket</p>\n<ul>\n<li><p><code>if [ condition ]</code> shell builtin, <code>test</code> construct, used to ==evaluate expression==</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> == abc ] ; <span class=\"keyword\">then</span> <span class=\"built_in\">echo</span> yes ; <span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p><code>Array[1]=element1</code> Array initializatin</p></li>\n<li><p><code>[a-z]</code> Range of characters within a Regular Expression</p></li>\n</ul></li>\n<li><p><code>[[</code> double bracket</p>\n<ul>\n<li>bash builtin, 与<code>[</code>类似，extended <code>test</code> constrcut</li>\n</ul></li>\n<li><p><code>&#123;&#125;</code> braces</p>\n<ul>\n<li><p><code>$&#123;variable&#125;</code> unambiguously ==identify variables==</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$VARIBLE1234</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;VARIBLE&#125;</span>1234</span><br></pre></td></tr></table></figure></p></li>\n<li><p><code>$&#123;!variable&#125;</code> Indirect variable reference 间接引用</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NAME=<span class=\"string\">&quot;VARIABLE&quot;</span>; VARIABLE=42; <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;!NAME&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># 42</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p><code>&#123; command1; command2 &#125;</code> ==command group==</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; date; top -b -n1 | head ; &#125; &gt;logfile</span><br><span class=\"line\"><span class=\"comment\"># `date` and `top` output are concatenated</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>brace expansions, create lists of strings，可以在loop时使用</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> f&#123;oo,ee,a&#125;d\t<span class=\"comment\"># food feed fad</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv error.log&#123;,.OLD&#125;\t<span class=\"comment\"># 等价于：mv error.log error.log.OLD</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> &#123;000..2&#125;\t\t<span class=\"comment\"># 000 001 002</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> &#123;00..8..3&#125;\t\t<span class=\"comment\"># 00 03 06</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> &#123;D..T..4&#125; \t\t<span class=\"comment\"># D H L P T</span></span><br></pre></td></tr></table></figure></p></li>\n</ul></li>\n<li><p><code>()</code> parentheses</p>\n<ul>\n<li><p><code>( commands1; command2 )</code> ==command group== excuted within a ==subshell== (without affecting the current shell's environment)</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"built_in\">cd</span> /tmp; <span class=\"built_in\">pwd</span>)</span><br></pre></td></tr></table></figure></p></li>\n<li><p><code>result=$(COMMAND)</code> Command substitution</p></li>\n<li><p><code>Array=(element1 element2)</code> Array initialization</p></li>\n</ul></li>\n<li><p><code>(())</code> double parentheses</p>\n<ul>\n<li><code>(( var = 12 ))</code> Integer arithmetic，==整数计算==</li>\n<li><code>var=$(( 20 + 5 ))</code> 整数计算与赋值</li>\n<li>C-style operation\n<ul>\n<li><code>((var++))</code> / <code>((var--))</code> / <code>((var0 = var1&lt;12?3:21))</code></li>\n</ul></li>\n</ul></li>\n<li><p><code>#</code>：注释</p></li>\n</ul>\n<h2 id=\"变量\">变量</h2>\n<ul>\n<li><p>格式要求</p>\n<ul>\n<li>定义变量时，变量名不加<code>$</code>符号，使用时加​<code>$</code> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">test</span>=<span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$test</span></span><br></pre></td></tr></table></figure></li>\n<li>变量名和等号之间==不能有空格==</li>\n<li>传递带空格的参数需要加引号：<code>\"$&#123;VARIABLE&#125;\"</code></li>\n<li>单引号内任何字符不视作变量</li>\n<li>将命令结果赋值给变量：反引号 或<code>$()</code>\n<ul>\n<li><code>x=`commands`</code></li>\n<li><code>x=$(commands)</code></li>\n</ul></li>\n</ul></li>\n<li><p>变量的作用域</p>\n<ul>\n<li>Shell脚本中定义的变量是global的，作用域从被定义的地方开始</li>\n<li>Shell==函数==中定义的变量默认是global的，作用域从被调用时定义处开始</li>\n<li>Shell函数内显式定义local变量时，作用域在函数内；但是与global变量重名时，会在函数内暂时屏蔽global变量 <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">foo</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">local</span> x=100</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"variable\">$x</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo \t\t<span class=\"comment\"># 100</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$x</span> \t<span class=\"comment\"># show nothing</span></span><br></pre></td></tr></table></figure></li>\n</ul></li>\n<li><p>判断变量是否为空</p>\n<ul>\n<li><code>$&#123;A:+xxx&#125;</code> 变量A已赋值时，其值用xxx (字符串/变量的值) 替换，否则不进行任何替换</li>\n<li><code>$&#123;A:-xxx&#125;</code> 变量A==未定义/值为空==时，返回xxx (字符串/变量的值)；否则返回变量A的值</li>\n<li><code>$&#123;A:=xxx&#125;</code> 变量A未定义/值为空时，将xxx赋值给A，返回xxx；否则返回变量A的值</li>\n</ul></li>\n<li><p>特殊变量</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th>$0</th>\n<th>当前脚本的文件名</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>$n</td>\n<td>传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是<code>$1</code>，第二个参数是<code>$2</code>。</td>\n</tr>\n<tr class=\"even\">\n<td>$#</td>\n<td>传递给脚本或函数的<strong>参数个数</strong>。</td>\n</tr>\n<tr class=\"odd\">\n<td>$*</td>\n<td>传递给脚本或函数的<strong>所有参数</strong>。被双引号包含时，以<code>\"$1\"，\"$2\" … \"$n\"</code>的形式输出所有参数。</td>\n</tr>\n<tr class=\"even\">\n<td>$@</td>\n<td>传递给脚本或函数的所有参数。被双引号包含时，以<code>\"$1 $2 … $n\"</code>的形式输出所有参数整体。</td>\n</tr>\n<tr class=\"odd\">\n<td>$?</td>\n<td>上个命令的退出状态，或函数的返回值。</td>\n</tr>\n<tr class=\"even\">\n<td>$$</td>\n<td>当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。</td>\n</tr>\n<tr class=\"odd\">\n<td>$!</td>\n<td>后台运行的最后一个进程的ID号</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p><code>[@]</code> 引用数组中的值</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">declare</span> -a testarray=(<span class=\"string\">&#x27;box&#x27;</span> <span class=\"string\">&#x27;cat&#x27;</span> <span class=\"string\">&#x27;dog&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;testarray[@]&#125;</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"variable\">$item</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"comment\">#box</span></span><br><span class=\"line\"><span class=\"comment\">#cat</span></span><br><span class=\"line\"><span class=\"comment\">#dog</span></span><br></pre></td></tr></table></figure></p></li>\n</ul></li>\n</ul>\n<h2 id=\"数学计算\">数学计算</h2>\n<ul>\n<li><p><code>let</code></p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> `sum=3+5`\t<span class=\"comment\"># sum &lt;- 8</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p><code>expr</code></p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum=`expr 3 - 6`    \t<span class=\"comment\"># 运算符两边空格</span></span><br><span class=\"line\">sum=`expr \\( 3 \\* \\) `\t<span class=\"comment\"># 转译*)(</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p><code>$(())</code></p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum=$((<span class=\"number\">3</span>+<span class=\"number\">5</span>))</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h2 id=\"expression-表达式种类\">expression 表达式种类</h2>\n<ul>\n<li><p>文件表达式</p>\n<ul>\n<li><code>-d</code> 如果目录存在：<code>if [ -d .. ]</code></li>\n<li><code>-f</code> 如果文件存在：<code>if [ -f file ]</code></li>\n<li><code>-s</code> 文件存在且非空</li>\n<li><code>-r</code> 文件存在且可读</li>\n<li><code>-w</code> 文件存在且可写</li>\n<li><code>-x</code> 文件存在且可执行</li>\n</ul></li>\n<li><p>==整数变量==表达式</p>\n<ul>\n<li><code>-eq</code> 如果等于：<code>if [ int1 -eq int2 ]</code></li>\n<li><code>-ne</code> 如果不等于</li>\n<li><code>-ge</code> 如果&gt;=</li>\n<li><code>-gt</code> 如果&gt;</li>\n<li><code>-le</code> 如果&lt;=</li>\n<li><code>-lt</code> 如果&lt;</li>\n</ul></li>\n<li><p>字符串变量表达式</p>\n<ul>\n<li><code>=</code> 等于\n<ul>\n<li><code>if [ $a = $b ]</code>，如果string1等于string2</li>\n<li>允许使用赋值号做等号，等号两边==必须留空格==</li>\n</ul></li>\n<li><code>!=</code> 不等于\n<ul>\n<li><code>if [ $a != $b ]</code> 如果string1不等于string2</li>\n</ul></li>\n<li><code>-z</code> 为空\n<ul>\n<li><code>if [ -z $string ]</code> 如果string 为空</li>\n</ul></li>\n<li><code>-n</code> 非空\n<ul>\n<li><code>if [ -n $string ]</code> 等价于 <code>if [ $string]</code> 如果string 非空(非0），返回0(true)</li>\n</ul></li>\n</ul></li>\n<li><p>逻辑表达式</p>\n<ul>\n<li><code>!</code> 逻辑非： <code>if [ ! expr ]</code></li>\n<li><code>-a</code> 逻辑与：<code>if [ expr1 -a expr2 ]</code></li>\n<li><code>-o</code> 逻辑或：<code>if [ expr1 -o expr2 ]</code></li>\n</ul></li>\n</ul>\n<h2 id=\"字符串处理\">字符串处理</h2>\n<ul>\n<li>字符串长度/字符数量：<code>$&#123;#A&#125;</code></li>\n</ul>\n<h3 id=\"匹配\">匹配</h3>\n<ul>\n<li><p>简单方法，若 <code>$string</code>中含有<code>$foo</code> 则匹配成功：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[ <span class=\"variable\">$string</span> == *<span class=\"variable\">$foo</span>* ]] &amp;&amp; <span class=\"built_in\">echo</span> match</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[ <span class=\"variable\">$string</span> =~ <span class=\"variable\">$foo</span> ]] &amp;&amp; <span class=\"built_in\">echo</span> match</span><br></pre></td></tr></table></figure></p></li>\n<li><p>非贪婪匹配，匹配符合通配符的==最短结果==</p>\n<ul>\n<li><code>$&#123;A%B&#125;</code> 从右向左匹配B，删除匹配，保留左边字符</li>\n<li><code>$&#123;A#B&#125;</code> 从左向右匹配B，删除匹配，保留右边字符</li>\n<li><code>$&#123;A/old/new&#125;</code> 用<code>new</code>替换<code>A</code>中匹配的<code>old</code>字符串</li>\n</ul></li>\n<li><p>贪婪匹配，匹配==最长结果==</p>\n<ul>\n<li><code>$&#123;A%%B&#125;</code></li>\n<li><code>$&#123;A##B&#125;</code></li>\n<li><code>$&#123;A//old/new&#125;</code></li>\n</ul></li>\n</ul>\n<h3 id=\"提取\">提取</h3>\n<ul>\n<li><p><code>grep</code></p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -o，只输出匹配的字符串; -E，使用扩展正则</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> aaa888 | grep -Eo <span class=\"string\">&#x27;\\d+&#x27;</span>\t\t</span><br><span class=\"line\"><span class=\"comment\"># 888</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p><code>sed</code></p>\n<ul>\n<li><p>sed没有<code>\\d</code> <code>\\s</code>等用于匹配的元字符</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> aaa888s | sed -E <span class=\"string\">&#x27;s/.*[a-z]([0-9]+).*/\\q/&#x27;</span>\t<span class=\"comment\"># -E，使用正则</span></span><br><span class=\"line\"><span class=\"comment\"># 888</span></span><br></pre></td></tr></table></figure></p></li>\n</ul></li>\n<li><p><code>awk</code> 的 <code>match()</code>函数</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> aaa888 | awk <span class=\"string\">&#x27;match($0,/([0-9]+)/, matches) &#123;print matches[1]&#125;&#x27;</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p><code>$&#123;A:offset&#125;</code></p>\n<ul>\n<li>从字符串左边，偏移offset个字符，截取到字符串结束</li>\n<li><code>$&#123;A:offset:length&#125;</code> 截取length长度</li>\n</ul></li>\n<li><p><code>$&#123;A:0-offset&#125;</code></p>\n<ul>\n<li>从字符串右边，偏移offset个字符，截取到字符串结束</li>\n<li><code>$&#123;A:0-offset:length&#125;</code></li>\n</ul></li>\n<li><p>String to Array</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DATES_STRING=<span class=\"string\">&#x27;Jun01 Jun02 Jun03 Jun04 Jun05&#x27;</span></span><br><span class=\"line\">IFS=<span class=\"string\">&#x27; &#x27;</span> <span class=\"built_in\">read</span> -a DATES_ARRAY &lt;&lt;&lt; <span class=\"string\">&quot;<span class=\"variable\">$DATES_STRING</span>&quot;</span></span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h3 id=\"替换\">替换</h3>\n<ul>\n<li><p>普通字符</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;haha s&quot;</span> | sed <span class=\"string\">&#x27;s/ha/Ha/g&#x27;</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>替换<code>\\n</code></p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$s</span> | tr <span class=\"string\">&#x27;\\n&#x27;</span> <span class=\"string\">&#x27;\\t&#x27;</span></span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h2 id=\"重定向-输入输出\">重定向 输入/输出</h2>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">Commands</th>\n<th style=\"text-align: center;\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">command &gt; file</td>\n<td style=\"text-align: center;\">将输出重定向到 file</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">command &lt; file</td>\n<td style=\"text-align: center;\">将输入重定向到 file</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">command &gt;&gt; file</td>\n<td style=\"text-align: center;\">将输出以追加的方式重定向到 file</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">n &gt; file</td>\n<td style=\"text-align: center;\">将文件描述符为 n 的文件重定向到 file。</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">n &gt;&gt; file</td>\n<td style=\"text-align: center;\">将文件描述符为 n 的文件以追加的方式重定向到 file。</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">n &gt;&amp; m</td>\n<td style=\"text-align: center;\">将输出文件 m 和 n 合并。</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">n &lt;&amp; m</td>\n<td style=\"text-align: center;\">将输入文件 m 和 n 合并。</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">&lt;&lt; tag</td>\n<td style=\"text-align: center;\">将开始标记 tag 和结束标记 tag 之间的内容作为输入。</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>默认打开的文件描述符：0（标准输入），1（标准输出），2（标准错误）</li>\n<li><code>1&gt;</code>：可简写为<code>&gt;</code>，标准输出重定向</li>\n<li><code>2&gt;&amp;1</code>：标准错误重定向到标准输出。例：<code>echo hello 1&gt;file.out 2&gt;&amp;1</code>，输出与错误都定向到file.out</li>\n<li><code>1&gt;&amp;2</code>：标准输出重定向到标准错误</li>\n<li><code>&amp;&gt;file</code>：标准输出与标准错误都从定向到file</li>\n</ul>\n<h2 id=\"流程控制\">流程控制</h2>\n<ul>\n<li><p><code>case</code></p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$a</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    10) <span class=\"built_in\">echo</span> <span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">    reload) <span class=\"built_in\">echo</span> <span class=\"string\">&quot;12&quot;</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">    *) <span class=\"built_in\">echo</span> <span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p><code>if/else</code></p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -eq <span class=\"variable\">$b</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;=&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ <span class=\"variable\">$a</span> -gt <span class=\"variable\">$b</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;&gt;&quot;</span>\t</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;&lt;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p><code>if</code>语句简写</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果左边表达式为真，则执行右边的语句</span></span><br><span class=\"line\">[ -f <span class=\"string\">&quot;./foo&quot;</span> ] &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;yes&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 如果左边表达式为假，则执行右边</span></span><br><span class=\"line\">[ -f <span class=\"string\">&quot;./foo&quot;</span>] || <span class=\"built_in\">exit</span> 0 <span class=\"comment\"># 文件不存在就退出</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>可用来handle exception</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># run fallback_command if a_command fails (returns a non-zero value)</span></span><br><span class=\"line\">a_command || fallback_command</span><br><span class=\"line\"><span class=\"comment\"># execute second_command if a_command is successful (returns 0)</span></span><br><span class=\"line\">a_command &amp;&amp; second_command</span><br></pre></td></tr></table></figure></p></li>\n</ul></li>\n<li><p><code>for/do</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> 1 2 3 4 5</span><br><span class=\"line\"><span class=\"keyword\">do</span> </span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$var</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></li>\n<li><p><code>while/do</code></p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> [ <span class=\"variable\">$int</span> -lt 8 ]</span><br><span class=\"line\"><span class=\"keyword\">do</span> </span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"variable\">$int</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        1|4) <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$int</span>&quot;</span></span><br><span class=\"line\">            ;;</span><br><span class=\"line\">        0|2|5|) <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$int</span>&quot;</span></span><br><span class=\"line\">            <span class=\"built_in\">continue</span></span><br><span class=\"line\">            ;;</span><br><span class=\"line\">        *) <span class=\"built_in\">echo</span> <span class=\"string\">&quot;others&quot;</span></span><br><span class=\"line\">            <span class=\"built_in\">break</span></span><br><span class=\"line\">            ;;</span><br><span class=\"line\">    <span class=\"keyword\">esac</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h2 id=\"function\">function</h2>\n<ul>\n<li><p>函数名前的\"function\"可以省略</p></li>\n<li><p>使用 <code>$?</code> 获取函数返回值，且调用函数后需立即获取，否则返回值丢失</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">foo</span></span>()&#123;</span><br><span class=\"line\">    COMMANDS</span><br><span class=\"line\">    <span class=\"built_in\">return</span> xxx</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">foo</span></span>()&#123;</span><br><span class=\"line\">    COMMANDS</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$1</span>\t\t<span class=\"comment\"># 引用参数</span></span><br><span class=\"line\">    <span class=\"built_in\">return</span> xxx\t<span class=\"comment\"># 返回值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo 13\t\t\t<span class=\"comment\"># 传递参数</span></span><br><span class=\"line\">ehco $?\t\t\t<span class=\"comment\"># 获取函数返回值</span></span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h2 id=\"子进程子shell\">子进程/子Shell</h2>\n<ul>\n<li><p>子Shelll</p>\n<ul>\n<li><p>只使用 fork() 函数，父进程中的函数、变量(全局变量、局部变量)、文件描述符、别名等在子Shell中仍然有效；子Shell对参数的修改无法传回父Shell。</p></li>\n<li><p>组命令，管道，命令替换会产生子Shell</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$SHLVL</span>  <span class=\"variable\">$BASH_SUBSHELL</span>&quot;</span>)\t\t\t<span class=\"comment\"># 在子Shell执行的组命令</span></span><br><span class=\"line\">&#123; command1; command2; command3; &#125;\t\t<span class=\"comment\"># 在当前Shell执行的组命令</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;test&quot;</span> | &#123; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$SHLVL</span>  <span class=\"variable\">$BASH_SUBSHELL</span>&quot;</span>; &#125;\t<span class=\"comment\"># 管道</span></span><br><span class=\"line\"></span><br><span class=\"line\">var=$(<span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$SHLVL</span>  <span class=\"variable\">$BASH_SUBSHELL</span>&quot;</span>)\t<span class=\"comment\"># 命令替换</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$var</span></span><br></pre></td></tr></table></figure></p></li>\n</ul></li>\n<li><p>子进程</p>\n<ul>\n<li><p>使用 fork() 和 exec() 函数，即通过 fork() 创建子进程后立即调用 exec() 函数加载新的可执行文件，不使用父进程的参数。</p></li>\n<li><p>下列几种方式会创建子进程，运行结束后立即退出子进程</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># a_script.sh</span></span><br><span class=\"line\">bash ./test.sh</span><br><span class=\"line\">./test.sh</span><br><span class=\"line\">chmod +x ./test.sh</span><br></pre></td></tr></table></figure></p></li>\n</ul></li>\n<li><p><code>&amp;</code> 启动并行进程，加速命令执行</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PIDARRAY=()</span><br><span class=\"line\"><span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> f1 f2</span><br><span class=\"line\"><span class=\"keyword\">do</span> </span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$file</span> &amp;\t\t<span class=\"comment\"># 命令符&amp;, 将命令置于后台并继续执行脚本</span></span><br><span class=\"line\">    PIDARRAY+=(<span class=\"string\">&quot;$!&quot;</span>)\t<span class=\"comment\"># $! 保存着最近一个后台进程的PID</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"built_in\">wait</span> <span class=\"variable\">$&#123;PIDARRAY[@]&#125;</span>\t\t<span class=\"comment\"># wait 命令等待这些进程结束</span></span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h2 id=\"commands\">Commands</h2>\n<ul>\n<li><p><code>printf</code></p>\n<ul>\n<li><p>格式化输出</p>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> <span class=\"built_in\">printf</span> <span class=\"string\">&quot;ID: %-5s NAME: %-10s Avage: %4.2f\\n&quot;</span> 1 tom 74.233;</span></span><br><span class=\"line\">ID: 1     NAME: tom        Avage: 74.23</span><br></pre></td></tr></table></figure></p></li>\n<li><p>输出重复字符串</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&#x27;hello %.0s&#x27;</span> &#123;1..6&#125;</span><br></pre></td></tr></table></figure></p></li>\n<li><p><code>--</code> means whatever follows should <strong>not</strong> be interpreted as a command line <em>option</em> to <code>printf</code></p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span> -- <span class=\"string\">&#x27;--- hello ---&#x27;</span></span><br></pre></td></tr></table></figure></p></li>\n</ul></li>\n<li><p><code>xargs</code>: 传递参数的过滤器</p>\n<ul>\n<li><p>列出当前文件夹下每个pdf文件的大小</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls *.pdf | xargs -n1 -I&#123;&#125; du -h &#123;&#125; </span><br><span class=\"line\"><span class=\"comment\"># -n1：每行输出一个</span></span><br><span class=\"line\"><span class=\"comment\"># -I&#123;&#125;：substitute occurrences of &#123;&#125; in command with the parsed argument</span></span><br></pre></td></tr></table></figure></p></li>\n</ul></li>\n</ul>\n<h2 id=\"others\">Others</h2>\n<ul>\n<li>Shell <a href=\"https://segmentfault.com/a/1190000008080537\">语法</a>, #TODO</li>\n</ul>\n<h2 id=\"后台运行\"><a href=\"./shell脚本后台运行\">后台运行</a></h2>\n","site":{"data":{"projects":[{"name":"PDF2Audio","url":"Convert PDFs to Audiobooks with Machine Learning","desc":"Convert PDFs to Audiobooks with Machine Learning"},{"name":"Alfred PKManager","url":"https://github.com/Konfido/alfred-pkmanager","desc":"A handful Alfred Workflow which helps searching and managing your Personal Knowledge Markdown notes."}]}},"excerpt":"","more":"<h2 id=\"symbols\">Symbols</h2>\n<ul>\n<li><p><code>[</code> single bracket</p>\n<ul>\n<li><p><code>if [ condition ]</code> shell builtin, <code>test</code> construct, used to ==evaluate expression==</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> == abc ] ; <span class=\"keyword\">then</span> <span class=\"built_in\">echo</span> yes ; <span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p><code>Array[1]=element1</code> Array initializatin</p></li>\n<li><p><code>[a-z]</code> Range of characters within a Regular Expression</p></li>\n</ul></li>\n<li><p><code>[[</code> double bracket</p>\n<ul>\n<li>bash builtin, 与<code>[</code>类似，extended <code>test</code> constrcut</li>\n</ul></li>\n<li><p><code>&#123;&#125;</code> braces</p>\n<ul>\n<li><p><code>$&#123;variable&#125;</code> unambiguously ==identify variables==</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$VARIBLE1234</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;VARIBLE&#125;</span>1234</span><br></pre></td></tr></table></figure></p></li>\n<li><p><code>$&#123;!variable&#125;</code> Indirect variable reference 间接引用</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NAME=<span class=\"string\">&quot;VARIABLE&quot;</span>; VARIABLE=42; <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;!NAME&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># 42</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p><code>&#123; command1; command2 &#125;</code> ==command group==</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; date; top -b -n1 | head ; &#125; &gt;logfile</span><br><span class=\"line\"><span class=\"comment\"># `date` and `top` output are concatenated</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>brace expansions, create lists of strings，可以在loop时使用</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> f&#123;oo,ee,a&#125;d\t<span class=\"comment\"># food feed fad</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv error.log&#123;,.OLD&#125;\t<span class=\"comment\"># 等价于：mv error.log error.log.OLD</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> &#123;000..2&#125;\t\t<span class=\"comment\"># 000 001 002</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> &#123;00..8..3&#125;\t\t<span class=\"comment\"># 00 03 06</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> &#123;D..T..4&#125; \t\t<span class=\"comment\"># D H L P T</span></span><br></pre></td></tr></table></figure></p></li>\n</ul></li>\n<li><p><code>()</code> parentheses</p>\n<ul>\n<li><p><code>( commands1; command2 )</code> ==command group== excuted within a ==subshell== (without affecting the current shell's environment)</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"built_in\">cd</span> /tmp; <span class=\"built_in\">pwd</span>)</span><br></pre></td></tr></table></figure></p></li>\n<li><p><code>result=$(COMMAND)</code> Command substitution</p></li>\n<li><p><code>Array=(element1 element2)</code> Array initialization</p></li>\n</ul></li>\n<li><p><code>(())</code> double parentheses</p>\n<ul>\n<li><code>(( var = 12 ))</code> Integer arithmetic，==整数计算==</li>\n<li><code>var=$(( 20 + 5 ))</code> 整数计算与赋值</li>\n<li>C-style operation\n<ul>\n<li><code>((var++))</code> / <code>((var--))</code> / <code>((var0 = var1&lt;12?3:21))</code></li>\n</ul></li>\n</ul></li>\n<li><p><code>#</code>：注释</p></li>\n</ul>\n<h2 id=\"变量\">变量</h2>\n<ul>\n<li><p>格式要求</p>\n<ul>\n<li>定义变量时，变量名不加<code>$</code>符号，使用时加​<code>$</code> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">test</span>=<span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$test</span></span><br></pre></td></tr></table></figure></li>\n<li>变量名和等号之间==不能有空格==</li>\n<li>传递带空格的参数需要加引号：<code>\"$&#123;VARIABLE&#125;\"</code></li>\n<li>单引号内任何字符不视作变量</li>\n<li>将命令结果赋值给变量：反引号 或<code>$()</code>\n<ul>\n<li><code>x=`commands`</code></li>\n<li><code>x=$(commands)</code></li>\n</ul></li>\n</ul></li>\n<li><p>变量的作用域</p>\n<ul>\n<li>Shell脚本中定义的变量是global的，作用域从被定义的地方开始</li>\n<li>Shell==函数==中定义的变量默认是global的，作用域从被调用时定义处开始</li>\n<li>Shell函数内显式定义local变量时，作用域在函数内；但是与global变量重名时，会在函数内暂时屏蔽global变量 <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">foo</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">local</span> x=100</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"variable\">$x</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo \t\t<span class=\"comment\"># 100</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$x</span> \t<span class=\"comment\"># show nothing</span></span><br></pre></td></tr></table></figure></li>\n</ul></li>\n<li><p>判断变量是否为空</p>\n<ul>\n<li><code>$&#123;A:+xxx&#125;</code> 变量A已赋值时，其值用xxx (字符串/变量的值) 替换，否则不进行任何替换</li>\n<li><code>$&#123;A:-xxx&#125;</code> 变量A==未定义/值为空==时，返回xxx (字符串/变量的值)；否则返回变量A的值</li>\n<li><code>$&#123;A:=xxx&#125;</code> 变量A未定义/值为空时，将xxx赋值给A，返回xxx；否则返回变量A的值</li>\n</ul></li>\n<li><p>特殊变量</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th>$0</th>\n<th>当前脚本的文件名</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>$n</td>\n<td>传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是<code>$1</code>，第二个参数是<code>$2</code>。</td>\n</tr>\n<tr class=\"even\">\n<td>$#</td>\n<td>传递给脚本或函数的<strong>参数个数</strong>。</td>\n</tr>\n<tr class=\"odd\">\n<td>$*</td>\n<td>传递给脚本或函数的<strong>所有参数</strong>。被双引号包含时，以<code>\"$1\"，\"$2\" … \"$n\"</code>的形式输出所有参数。</td>\n</tr>\n<tr class=\"even\">\n<td>$@</td>\n<td>传递给脚本或函数的所有参数。被双引号包含时，以<code>\"$1 $2 … $n\"</code>的形式输出所有参数整体。</td>\n</tr>\n<tr class=\"odd\">\n<td>$?</td>\n<td>上个命令的退出状态，或函数的返回值。</td>\n</tr>\n<tr class=\"even\">\n<td>$$</td>\n<td>当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。</td>\n</tr>\n<tr class=\"odd\">\n<td>$!</td>\n<td>后台运行的最后一个进程的ID号</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p><code>[@]</code> 引用数组中的值</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">declare</span> -a testarray=(<span class=\"string\">&#x27;box&#x27;</span> <span class=\"string\">&#x27;cat&#x27;</span> <span class=\"string\">&#x27;dog&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;testarray[@]&#125;</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"variable\">$item</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"comment\">#box</span></span><br><span class=\"line\"><span class=\"comment\">#cat</span></span><br><span class=\"line\"><span class=\"comment\">#dog</span></span><br></pre></td></tr></table></figure></p></li>\n</ul></li>\n</ul>\n<h2 id=\"数学计算\">数学计算</h2>\n<ul>\n<li><p><code>let</code></p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> `sum=3+5`\t<span class=\"comment\"># sum &lt;- 8</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p><code>expr</code></p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum=`expr 3 - 6`    \t<span class=\"comment\"># 运算符两边空格</span></span><br><span class=\"line\">sum=`expr \\( 3 \\* \\) `\t<span class=\"comment\"># 转译*)(</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p><code>$(())</code></p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum=$((<span class=\"number\">3</span>+<span class=\"number\">5</span>))</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h2 id=\"expression-表达式种类\">expression 表达式种类</h2>\n<ul>\n<li><p>文件表达式</p>\n<ul>\n<li><code>-d</code> 如果目录存在：<code>if [ -d .. ]</code></li>\n<li><code>-f</code> 如果文件存在：<code>if [ -f file ]</code></li>\n<li><code>-s</code> 文件存在且非空</li>\n<li><code>-r</code> 文件存在且可读</li>\n<li><code>-w</code> 文件存在且可写</li>\n<li><code>-x</code> 文件存在且可执行</li>\n</ul></li>\n<li><p>==整数变量==表达式</p>\n<ul>\n<li><code>-eq</code> 如果等于：<code>if [ int1 -eq int2 ]</code></li>\n<li><code>-ne</code> 如果不等于</li>\n<li><code>-ge</code> 如果&gt;=</li>\n<li><code>-gt</code> 如果&gt;</li>\n<li><code>-le</code> 如果&lt;=</li>\n<li><code>-lt</code> 如果&lt;</li>\n</ul></li>\n<li><p>字符串变量表达式</p>\n<ul>\n<li><code>=</code> 等于\n<ul>\n<li><code>if [ $a = $b ]</code>，如果string1等于string2</li>\n<li>允许使用赋值号做等号，等号两边==必须留空格==</li>\n</ul></li>\n<li><code>!=</code> 不等于\n<ul>\n<li><code>if [ $a != $b ]</code> 如果string1不等于string2</li>\n</ul></li>\n<li><code>-z</code> 为空\n<ul>\n<li><code>if [ -z $string ]</code> 如果string 为空</li>\n</ul></li>\n<li><code>-n</code> 非空\n<ul>\n<li><code>if [ -n $string ]</code> 等价于 <code>if [ $string]</code> 如果string 非空(非0），返回0(true)</li>\n</ul></li>\n</ul></li>\n<li><p>逻辑表达式</p>\n<ul>\n<li><code>!</code> 逻辑非： <code>if [ ! expr ]</code></li>\n<li><code>-a</code> 逻辑与：<code>if [ expr1 -a expr2 ]</code></li>\n<li><code>-o</code> 逻辑或：<code>if [ expr1 -o expr2 ]</code></li>\n</ul></li>\n</ul>\n<h2 id=\"字符串处理\">字符串处理</h2>\n<ul>\n<li>字符串长度/字符数量：<code>$&#123;#A&#125;</code></li>\n</ul>\n<h3 id=\"匹配\">匹配</h3>\n<ul>\n<li><p>简单方法，若 <code>$string</code>中含有<code>$foo</code> 则匹配成功：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[ <span class=\"variable\">$string</span> == *<span class=\"variable\">$foo</span>* ]] &amp;&amp; <span class=\"built_in\">echo</span> match</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[ <span class=\"variable\">$string</span> =~ <span class=\"variable\">$foo</span> ]] &amp;&amp; <span class=\"built_in\">echo</span> match</span><br></pre></td></tr></table></figure></p></li>\n<li><p>非贪婪匹配，匹配符合通配符的==最短结果==</p>\n<ul>\n<li><code>$&#123;A%B&#125;</code> 从右向左匹配B，删除匹配，保留左边字符</li>\n<li><code>$&#123;A#B&#125;</code> 从左向右匹配B，删除匹配，保留右边字符</li>\n<li><code>$&#123;A/old/new&#125;</code> 用<code>new</code>替换<code>A</code>中匹配的<code>old</code>字符串</li>\n</ul></li>\n<li><p>贪婪匹配，匹配==最长结果==</p>\n<ul>\n<li><code>$&#123;A%%B&#125;</code></li>\n<li><code>$&#123;A##B&#125;</code></li>\n<li><code>$&#123;A//old/new&#125;</code></li>\n</ul></li>\n</ul>\n<h3 id=\"提取\">提取</h3>\n<ul>\n<li><p><code>grep</code></p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -o，只输出匹配的字符串; -E，使用扩展正则</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> aaa888 | grep -Eo <span class=\"string\">&#x27;\\d+&#x27;</span>\t\t</span><br><span class=\"line\"><span class=\"comment\"># 888</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p><code>sed</code></p>\n<ul>\n<li><p>sed没有<code>\\d</code> <code>\\s</code>等用于匹配的元字符</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> aaa888s | sed -E <span class=\"string\">&#x27;s/.*[a-z]([0-9]+).*/\\q/&#x27;</span>\t<span class=\"comment\"># -E，使用正则</span></span><br><span class=\"line\"><span class=\"comment\"># 888</span></span><br></pre></td></tr></table></figure></p></li>\n</ul></li>\n<li><p><code>awk</code> 的 <code>match()</code>函数</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> aaa888 | awk <span class=\"string\">&#x27;match($0,/([0-9]+)/, matches) &#123;print matches[1]&#125;&#x27;</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p><code>$&#123;A:offset&#125;</code></p>\n<ul>\n<li>从字符串左边，偏移offset个字符，截取到字符串结束</li>\n<li><code>$&#123;A:offset:length&#125;</code> 截取length长度</li>\n</ul></li>\n<li><p><code>$&#123;A:0-offset&#125;</code></p>\n<ul>\n<li>从字符串右边，偏移offset个字符，截取到字符串结束</li>\n<li><code>$&#123;A:0-offset:length&#125;</code></li>\n</ul></li>\n<li><p>String to Array</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DATES_STRING=<span class=\"string\">&#x27;Jun01 Jun02 Jun03 Jun04 Jun05&#x27;</span></span><br><span class=\"line\">IFS=<span class=\"string\">&#x27; &#x27;</span> <span class=\"built_in\">read</span> -a DATES_ARRAY &lt;&lt;&lt; <span class=\"string\">&quot;<span class=\"variable\">$DATES_STRING</span>&quot;</span></span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h3 id=\"替换\">替换</h3>\n<ul>\n<li><p>普通字符</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;haha s&quot;</span> | sed <span class=\"string\">&#x27;s/ha/Ha/g&#x27;</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>替换<code>\\n</code></p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$s</span> | tr <span class=\"string\">&#x27;\\n&#x27;</span> <span class=\"string\">&#x27;\\t&#x27;</span></span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h2 id=\"重定向-输入输出\">重定向 输入/输出</h2>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">Commands</th>\n<th style=\"text-align: center;\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">command &gt; file</td>\n<td style=\"text-align: center;\">将输出重定向到 file</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">command &lt; file</td>\n<td style=\"text-align: center;\">将输入重定向到 file</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">command &gt;&gt; file</td>\n<td style=\"text-align: center;\">将输出以追加的方式重定向到 file</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">n &gt; file</td>\n<td style=\"text-align: center;\">将文件描述符为 n 的文件重定向到 file。</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">n &gt;&gt; file</td>\n<td style=\"text-align: center;\">将文件描述符为 n 的文件以追加的方式重定向到 file。</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">n &gt;&amp; m</td>\n<td style=\"text-align: center;\">将输出文件 m 和 n 合并。</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">n &lt;&amp; m</td>\n<td style=\"text-align: center;\">将输入文件 m 和 n 合并。</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">&lt;&lt; tag</td>\n<td style=\"text-align: center;\">将开始标记 tag 和结束标记 tag 之间的内容作为输入。</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>默认打开的文件描述符：0（标准输入），1（标准输出），2（标准错误）</li>\n<li><code>1&gt;</code>：可简写为<code>&gt;</code>，标准输出重定向</li>\n<li><code>2&gt;&amp;1</code>：标准错误重定向到标准输出。例：<code>echo hello 1&gt;file.out 2&gt;&amp;1</code>，输出与错误都定向到file.out</li>\n<li><code>1&gt;&amp;2</code>：标准输出重定向到标准错误</li>\n<li><code>&amp;&gt;file</code>：标准输出与标准错误都从定向到file</li>\n</ul>\n<h2 id=\"流程控制\">流程控制</h2>\n<ul>\n<li><p><code>case</code></p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$a</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    10) <span class=\"built_in\">echo</span> <span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">    reload) <span class=\"built_in\">echo</span> <span class=\"string\">&quot;12&quot;</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">    *) <span class=\"built_in\">echo</span> <span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p><code>if/else</code></p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -eq <span class=\"variable\">$b</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;=&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ <span class=\"variable\">$a</span> -gt <span class=\"variable\">$b</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;&gt;&quot;</span>\t</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;&lt;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p><code>if</code>语句简写</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果左边表达式为真，则执行右边的语句</span></span><br><span class=\"line\">[ -f <span class=\"string\">&quot;./foo&quot;</span> ] &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;yes&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 如果左边表达式为假，则执行右边</span></span><br><span class=\"line\">[ -f <span class=\"string\">&quot;./foo&quot;</span>] || <span class=\"built_in\">exit</span> 0 <span class=\"comment\"># 文件不存在就退出</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>可用来handle exception</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># run fallback_command if a_command fails (returns a non-zero value)</span></span><br><span class=\"line\">a_command || fallback_command</span><br><span class=\"line\"><span class=\"comment\"># execute second_command if a_command is successful (returns 0)</span></span><br><span class=\"line\">a_command &amp;&amp; second_command</span><br></pre></td></tr></table></figure></p></li>\n</ul></li>\n<li><p><code>for/do</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> 1 2 3 4 5</span><br><span class=\"line\"><span class=\"keyword\">do</span> </span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$var</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></li>\n<li><p><code>while/do</code></p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> [ <span class=\"variable\">$int</span> -lt 8 ]</span><br><span class=\"line\"><span class=\"keyword\">do</span> </span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"variable\">$int</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        1|4) <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$int</span>&quot;</span></span><br><span class=\"line\">            ;;</span><br><span class=\"line\">        0|2|5|) <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$int</span>&quot;</span></span><br><span class=\"line\">            <span class=\"built_in\">continue</span></span><br><span class=\"line\">            ;;</span><br><span class=\"line\">        *) <span class=\"built_in\">echo</span> <span class=\"string\">&quot;others&quot;</span></span><br><span class=\"line\">            <span class=\"built_in\">break</span></span><br><span class=\"line\">            ;;</span><br><span class=\"line\">    <span class=\"keyword\">esac</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h2 id=\"function\">function</h2>\n<ul>\n<li><p>函数名前的\"function\"可以省略</p></li>\n<li><p>使用 <code>$?</code> 获取函数返回值，且调用函数后需立即获取，否则返回值丢失</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">foo</span></span>()&#123;</span><br><span class=\"line\">    COMMANDS</span><br><span class=\"line\">    <span class=\"built_in\">return</span> xxx</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">foo</span></span>()&#123;</span><br><span class=\"line\">    COMMANDS</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$1</span>\t\t<span class=\"comment\"># 引用参数</span></span><br><span class=\"line\">    <span class=\"built_in\">return</span> xxx\t<span class=\"comment\"># 返回值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo 13\t\t\t<span class=\"comment\"># 传递参数</span></span><br><span class=\"line\">ehco $?\t\t\t<span class=\"comment\"># 获取函数返回值</span></span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h2 id=\"子进程子shell\">子进程/子Shell</h2>\n<ul>\n<li><p>子Shelll</p>\n<ul>\n<li><p>只使用 fork() 函数，父进程中的函数、变量(全局变量、局部变量)、文件描述符、别名等在子Shell中仍然有效；子Shell对参数的修改无法传回父Shell。</p></li>\n<li><p>组命令，管道，命令替换会产生子Shell</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$SHLVL</span>  <span class=\"variable\">$BASH_SUBSHELL</span>&quot;</span>)\t\t\t<span class=\"comment\"># 在子Shell执行的组命令</span></span><br><span class=\"line\">&#123; command1; command2; command3; &#125;\t\t<span class=\"comment\"># 在当前Shell执行的组命令</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;test&quot;</span> | &#123; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$SHLVL</span>  <span class=\"variable\">$BASH_SUBSHELL</span>&quot;</span>; &#125;\t<span class=\"comment\"># 管道</span></span><br><span class=\"line\"></span><br><span class=\"line\">var=$(<span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$SHLVL</span>  <span class=\"variable\">$BASH_SUBSHELL</span>&quot;</span>)\t<span class=\"comment\"># 命令替换</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$var</span></span><br></pre></td></tr></table></figure></p></li>\n</ul></li>\n<li><p>子进程</p>\n<ul>\n<li><p>使用 fork() 和 exec() 函数，即通过 fork() 创建子进程后立即调用 exec() 函数加载新的可执行文件，不使用父进程的参数。</p></li>\n<li><p>下列几种方式会创建子进程，运行结束后立即退出子进程</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># a_script.sh</span></span><br><span class=\"line\">bash ./test.sh</span><br><span class=\"line\">./test.sh</span><br><span class=\"line\">chmod +x ./test.sh</span><br></pre></td></tr></table></figure></p></li>\n</ul></li>\n<li><p><code>&amp;</code> 启动并行进程，加速命令执行</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PIDARRAY=()</span><br><span class=\"line\"><span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> f1 f2</span><br><span class=\"line\"><span class=\"keyword\">do</span> </span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$file</span> &amp;\t\t<span class=\"comment\"># 命令符&amp;, 将命令置于后台并继续执行脚本</span></span><br><span class=\"line\">    PIDARRAY+=(<span class=\"string\">&quot;$!&quot;</span>)\t<span class=\"comment\"># $! 保存着最近一个后台进程的PID</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"built_in\">wait</span> <span class=\"variable\">$&#123;PIDARRAY[@]&#125;</span>\t\t<span class=\"comment\"># wait 命令等待这些进程结束</span></span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h2 id=\"commands\">Commands</h2>\n<ul>\n<li><p><code>printf</code></p>\n<ul>\n<li><p>格式化输出</p>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> <span class=\"built_in\">printf</span> <span class=\"string\">&quot;ID: %-5s NAME: %-10s Avage: %4.2f\\n&quot;</span> 1 tom 74.233;</span></span><br><span class=\"line\">ID: 1     NAME: tom        Avage: 74.23</span><br></pre></td></tr></table></figure></p></li>\n<li><p>输出重复字符串</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&#x27;hello %.0s&#x27;</span> &#123;1..6&#125;</span><br></pre></td></tr></table></figure></p></li>\n<li><p><code>--</code> means whatever follows should <strong>not</strong> be interpreted as a command line <em>option</em> to <code>printf</code></p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span> -- <span class=\"string\">&#x27;--- hello ---&#x27;</span></span><br></pre></td></tr></table></figure></p></li>\n</ul></li>\n<li><p><code>xargs</code>: 传递参数的过滤器</p>\n<ul>\n<li><p>列出当前文件夹下每个pdf文件的大小</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls *.pdf | xargs -n1 -I&#123;&#125; du -h &#123;&#125; </span><br><span class=\"line\"><span class=\"comment\"># -n1：每行输出一个</span></span><br><span class=\"line\"><span class=\"comment\"># -I&#123;&#125;：substitute occurrences of &#123;&#125; in command with the parsed argument</span></span><br></pre></td></tr></table></figure></p></li>\n</ul></li>\n</ul>\n<h2 id=\"others\">Others</h2>\n<ul>\n<li>Shell <a href=\"https://segmentfault.com/a/1190000008080537\">语法</a>, #TODO</li>\n</ul>\n<h2 id=\"后台运行\"><a href=\"./shell脚本后台运行\">后台运行</a></h2>\n"},{"title":"Python encode decode & 字符编码检测","alias":["encoding"],"typora-copy-images-to":"../images","date":"2019-04-17T16:04:12.000Z","updated":"2019-04-17T16:04:12.000Z","blogged":true,"urlname":"encoding-and-decoding-in-Python","_content":"\n## 编码类型\n\n- 万国码/字码表：unicode\n- 编码方法 （将unicode数据编码成byte数据）：产生不同的字符集\n  - 英文：ascii，utf-8\n  - 中文：utf-8，utf-16，gbk\n\n## 编码转换\n\n- `encode()`： str (unicode) -> bytes\n- `decode()`：bytes -> str (unicode)\n- 不同字符集之间通过Unicode转换：utf-8->unicode->gbk\n\n\n\n## Note\n\n- Python 2\n    - 默认编码 **ASCII**，自动处理byte到unicode的转换，处理非ASCII时易出错。\n    - 两种字符类型\n        - `unicode`：unicode 数据\n        - `str`：bytes 数据\n    - `unicode`： `u'苑'` / `u'\\u2d1'`\n        - encode('utf-8')： `\\xe8\\x8b\\x91` （`str`，bytes）\n        - encode('gbk') ： `\\xd4\\xb7` （`str`，bytes）\n\n- Python 3\n\n    - 默认编码 **Unicode**，不会再对bytes数据自动解码\n    - 两种字符类型\n        - `str`：unicode 数据\n        - `bytes`：bytes 数据\n        - **文本总是Unicode**，由`str`类型表示，二进制数据由`bytes`类型表示\n    - `str`：`'苑'` / `\\u82d1`\n        - encode('utf-8')：`b'\\xe8\\x8b\\x91'`  (`bytes`)\n        - encode('gbk')：`'\\xd4\\xb7'` (`bytes`)\n    - Example\n        ```python\n        >>> c=\"編碼abc\"\t\t\t# 字符串str为unicode数据，可以encode为bytes\n        >>> c\n        '編碼abc'\n        >>> c.encode('utf-8')\n        b'\\xe7\\xb7\\xa8\\xe7\\xa2\\xbcabc'\n        >>> c.encode('utf-16')\n        b'\\xff\\xfe\\xe8}\\xbcxa\\x00b\\x00c\\x00'\n        >>> c.encode('gbk')\n        b'\\xbe\\x8e\\xb4aabc'\n        >>> c.encode('unicode_escape')\n        b'\\\\u7de8\\\\u78bcabc'\n        \n        >>> d=u'\\u7de8\\u78bcabc'\t# d为16进制unicode字符\n        >>> d\t\t\t\t\t\t# 可以看出python3中对d与c的处理结果是相同的\n        \"編碼abc\"\n        >>> d.encode('utf-8')\n        b'\\xe7\\xb7\\xa8\\xe7\\xa2\\xbcabc'\n        >>> d.encode('unicode_escape')\n        b'\\\\u7de8\\\\u78bcabc'\n        >>> d.encode('utf-8').decode('latin-1')\t# 解码时出现乱码，可能是编码用错\n        'ç·¨ç¢¼abc'\n        \n        >>> 'ç\\xa0\\x81'.encode('latin-1').decode('utf8') # 将乱码重新编码再解码\n        '码'\n        ```\n\n\n\n\n## 字符编码检测\n\n```python\nimport chardet\nwith open(file, 'rb') as f:\n    a = f.read()\nchardet.detect(a)\n\n# {'encoding': 'Big5', 'confidence': 0.99, 'language': 'Chinese'}\n```\n\n\n\n\n\n","source":"_posts/Python - 字符编码.md","raw":"---\ntitle: Python encode decode & 字符编码检测\nalias: [encoding]\ntags: [python]\ntypora-copy-images-to: ../images\ndate: 2019-04-18 00:04:12\nupdated: 2019-04-18 00:04:12\nblogged: true\nurlname: encoding-and-decoding-in-Python\n---\n\n## 编码类型\n\n- 万国码/字码表：unicode\n- 编码方法 （将unicode数据编码成byte数据）：产生不同的字符集\n  - 英文：ascii，utf-8\n  - 中文：utf-8，utf-16，gbk\n\n## 编码转换\n\n- `encode()`： str (unicode) -> bytes\n- `decode()`：bytes -> str (unicode)\n- 不同字符集之间通过Unicode转换：utf-8->unicode->gbk\n\n\n\n## Note\n\n- Python 2\n    - 默认编码 **ASCII**，自动处理byte到unicode的转换，处理非ASCII时易出错。\n    - 两种字符类型\n        - `unicode`：unicode 数据\n        - `str`：bytes 数据\n    - `unicode`： `u'苑'` / `u'\\u2d1'`\n        - encode('utf-8')： `\\xe8\\x8b\\x91` （`str`，bytes）\n        - encode('gbk') ： `\\xd4\\xb7` （`str`，bytes）\n\n- Python 3\n\n    - 默认编码 **Unicode**，不会再对bytes数据自动解码\n    - 两种字符类型\n        - `str`：unicode 数据\n        - `bytes`：bytes 数据\n        - **文本总是Unicode**，由`str`类型表示，二进制数据由`bytes`类型表示\n    - `str`：`'苑'` / `\\u82d1`\n        - encode('utf-8')：`b'\\xe8\\x8b\\x91'`  (`bytes`)\n        - encode('gbk')：`'\\xd4\\xb7'` (`bytes`)\n    - Example\n        ```python\n        >>> c=\"編碼abc\"\t\t\t# 字符串str为unicode数据，可以encode为bytes\n        >>> c\n        '編碼abc'\n        >>> c.encode('utf-8')\n        b'\\xe7\\xb7\\xa8\\xe7\\xa2\\xbcabc'\n        >>> c.encode('utf-16')\n        b'\\xff\\xfe\\xe8}\\xbcxa\\x00b\\x00c\\x00'\n        >>> c.encode('gbk')\n        b'\\xbe\\x8e\\xb4aabc'\n        >>> c.encode('unicode_escape')\n        b'\\\\u7de8\\\\u78bcabc'\n        \n        >>> d=u'\\u7de8\\u78bcabc'\t# d为16进制unicode字符\n        >>> d\t\t\t\t\t\t# 可以看出python3中对d与c的处理结果是相同的\n        \"編碼abc\"\n        >>> d.encode('utf-8')\n        b'\\xe7\\xb7\\xa8\\xe7\\xa2\\xbcabc'\n        >>> d.encode('unicode_escape')\n        b'\\\\u7de8\\\\u78bcabc'\n        >>> d.encode('utf-8').decode('latin-1')\t# 解码时出现乱码，可能是编码用错\n        'ç·¨ç¢¼abc'\n        \n        >>> 'ç\\xa0\\x81'.encode('latin-1').decode('utf8') # 将乱码重新编码再解码\n        '码'\n        ```\n\n\n\n\n## 字符编码检测\n\n```python\nimport chardet\nwith open(file, 'rb') as f:\n    a = f.read()\nchardet.detect(a)\n\n# {'encoding': 'Big5', 'confidence': 0.99, 'language': 'Chinese'}\n```\n\n\n\n\n\n","slug":"Python - 字符编码","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckozvuosq000edbsg2cmk71gk","content":"<h2 id=\"编码类型\">编码类型</h2>\n<ul>\n<li>万国码/字码表：unicode</li>\n<li>编码方法 （将unicode数据编码成byte数据）：产生不同的字符集\n<ul>\n<li>英文：ascii，utf-8</li>\n<li>中文：utf-8，utf-16，gbk</li>\n</ul></li>\n</ul>\n<h2 id=\"编码转换\">编码转换</h2>\n<ul>\n<li><code>encode()</code>： str (unicode) -&gt; bytes</li>\n<li><code>decode()</code>：bytes -&gt; str (unicode)</li>\n<li>不同字符集之间通过Unicode转换：utf-8-&gt;unicode-&gt;gbk</li>\n</ul>\n<h2 id=\"note\">Note</h2>\n<ul>\n<li><p>Python 2</p>\n<ul>\n<li>默认编码 <strong>ASCII</strong>，自动处理byte到unicode的转换，处理非ASCII时易出错。</li>\n<li>两种字符类型\n<ul>\n<li><code>unicode</code>：unicode 数据</li>\n<li><code>str</code>：bytes 数据</li>\n</ul></li>\n<li><code>unicode</code>： <code>u'苑'</code> / <code>u'\\u2d1'</code>\n<ul>\n<li>encode('utf-8')： <code>\\xe8\\x8b\\x91</code> （<code>str</code>，bytes）</li>\n<li>encode('gbk') ： <code>\\xd4\\xb7</code> （<code>str</code>，bytes）</li>\n</ul></li>\n</ul></li>\n<li><p>Python 3</p>\n<ul>\n<li>默认编码 <strong>Unicode</strong>，不会再对bytes数据自动解码</li>\n<li>两种字符类型\n<ul>\n<li><code>str</code>：unicode 数据</li>\n<li><code>bytes</code>：bytes 数据</li>\n<li><strong>文本总是Unicode</strong>，由<code>str</code>类型表示，二进制数据由<code>bytes</code>类型表示</li>\n</ul></li>\n<li><code>str</code>：<code>'苑'</code> / <code>\\u82d1</code>\n<ul>\n<li>encode('utf-8')：<code>b'\\xe8\\x8b\\x91'</code> (<code>bytes</code>)</li>\n<li>encode('gbk')：<code>'\\xd4\\xb7'</code> (<code>bytes</code>)</li>\n</ul></li>\n<li>Example <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c=<span class=\"string\">&quot;編碼abc&quot;</span>\t\t\t<span class=\"comment\"># 字符串str为unicode数据，可以encode为bytes</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c</span><br><span class=\"line\"><span class=\"string\">&#x27;編碼abc&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\"><span class=\"string\">b&#x27;\\xe7\\xb7\\xa8\\xe7\\xa2\\xbcabc&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c.encode(<span class=\"string\">&#x27;utf-16&#x27;</span>)</span><br><span class=\"line\"><span class=\"string\">b&#x27;\\xff\\xfe\\xe8&#125;\\xbcxa\\x00b\\x00c\\x00&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c.encode(<span class=\"string\">&#x27;gbk&#x27;</span>)</span><br><span class=\"line\"><span class=\"string\">b&#x27;\\xbe\\x8e\\xb4aabc&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c.encode(<span class=\"string\">&#x27;unicode_escape&#x27;</span>)</span><br><span class=\"line\"><span class=\"string\">b&#x27;\\\\u7de8\\\\u78bcabc&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d=<span class=\"string\">u&#x27;\\u7de8\\u78bcabc&#x27;</span>\t<span class=\"comment\"># d为16进制unicode字符</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d\t\t\t\t\t\t<span class=\"comment\"># 可以看出python3中对d与c的处理结果是相同的</span></span><br><span class=\"line\"><span class=\"string\">&quot;編碼abc&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\"><span class=\"string\">b&#x27;\\xe7\\xb7\\xa8\\xe7\\xa2\\xbcabc&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.encode(<span class=\"string\">&#x27;unicode_escape&#x27;</span>)</span><br><span class=\"line\"><span class=\"string\">b&#x27;\\\\u7de8\\\\u78bcabc&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>).decode(<span class=\"string\">&#x27;latin-1&#x27;</span>)\t<span class=\"comment\"># 解码时出现乱码，可能是编码用错</span></span><br><span class=\"line\"><span class=\"string\">&#x27;ç·¨ç¢¼abc&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;ç\\xa0\\x81&#x27;</span>.encode(<span class=\"string\">&#x27;latin-1&#x27;</span>).decode(<span class=\"string\">&#x27;utf8&#x27;</span>) <span class=\"comment\"># 将乱码重新编码再解码</span></span><br><span class=\"line\"><span class=\"string\">&#x27;码&#x27;</span></span><br></pre></td></tr></table></figure></li>\n</ul></li>\n</ul>\n<h2 id=\"字符编码检测\">字符编码检测</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> chardet</span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file, <span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    a = f.read()</span><br><span class=\"line\">chardet.detect(a)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># &#123;&#x27;encoding&#x27;: &#x27;Big5&#x27;, &#x27;confidence&#x27;: 0.99, &#x27;language&#x27;: &#x27;Chinese&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{"projects":[{"name":"PDF2Audio","url":"Convert PDFs to Audiobooks with Machine Learning","desc":"Convert PDFs to Audiobooks with Machine Learning"},{"name":"Alfred PKManager","url":"https://github.com/Konfido/alfred-pkmanager","desc":"A handful Alfred Workflow which helps searching and managing your Personal Knowledge Markdown notes."}]}},"excerpt":"","more":"<h2 id=\"编码类型\">编码类型</h2>\n<ul>\n<li>万国码/字码表：unicode</li>\n<li>编码方法 （将unicode数据编码成byte数据）：产生不同的字符集\n<ul>\n<li>英文：ascii，utf-8</li>\n<li>中文：utf-8，utf-16，gbk</li>\n</ul></li>\n</ul>\n<h2 id=\"编码转换\">编码转换</h2>\n<ul>\n<li><code>encode()</code>： str (unicode) -&gt; bytes</li>\n<li><code>decode()</code>：bytes -&gt; str (unicode)</li>\n<li>不同字符集之间通过Unicode转换：utf-8-&gt;unicode-&gt;gbk</li>\n</ul>\n<h2 id=\"note\">Note</h2>\n<ul>\n<li><p>Python 2</p>\n<ul>\n<li>默认编码 <strong>ASCII</strong>，自动处理byte到unicode的转换，处理非ASCII时易出错。</li>\n<li>两种字符类型\n<ul>\n<li><code>unicode</code>：unicode 数据</li>\n<li><code>str</code>：bytes 数据</li>\n</ul></li>\n<li><code>unicode</code>： <code>u'苑'</code> / <code>u'\\u2d1'</code>\n<ul>\n<li>encode('utf-8')： <code>\\xe8\\x8b\\x91</code> （<code>str</code>，bytes）</li>\n<li>encode('gbk') ： <code>\\xd4\\xb7</code> （<code>str</code>，bytes）</li>\n</ul></li>\n</ul></li>\n<li><p>Python 3</p>\n<ul>\n<li>默认编码 <strong>Unicode</strong>，不会再对bytes数据自动解码</li>\n<li>两种字符类型\n<ul>\n<li><code>str</code>：unicode 数据</li>\n<li><code>bytes</code>：bytes 数据</li>\n<li><strong>文本总是Unicode</strong>，由<code>str</code>类型表示，二进制数据由<code>bytes</code>类型表示</li>\n</ul></li>\n<li><code>str</code>：<code>'苑'</code> / <code>\\u82d1</code>\n<ul>\n<li>encode('utf-8')：<code>b'\\xe8\\x8b\\x91'</code> (<code>bytes</code>)</li>\n<li>encode('gbk')：<code>'\\xd4\\xb7'</code> (<code>bytes</code>)</li>\n</ul></li>\n<li>Example <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c=<span class=\"string\">&quot;編碼abc&quot;</span>\t\t\t<span class=\"comment\"># 字符串str为unicode数据，可以encode为bytes</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c</span><br><span class=\"line\"><span class=\"string\">&#x27;編碼abc&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\"><span class=\"string\">b&#x27;\\xe7\\xb7\\xa8\\xe7\\xa2\\xbcabc&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c.encode(<span class=\"string\">&#x27;utf-16&#x27;</span>)</span><br><span class=\"line\"><span class=\"string\">b&#x27;\\xff\\xfe\\xe8&#125;\\xbcxa\\x00b\\x00c\\x00&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c.encode(<span class=\"string\">&#x27;gbk&#x27;</span>)</span><br><span class=\"line\"><span class=\"string\">b&#x27;\\xbe\\x8e\\xb4aabc&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c.encode(<span class=\"string\">&#x27;unicode_escape&#x27;</span>)</span><br><span class=\"line\"><span class=\"string\">b&#x27;\\\\u7de8\\\\u78bcabc&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d=<span class=\"string\">u&#x27;\\u7de8\\u78bcabc&#x27;</span>\t<span class=\"comment\"># d为16进制unicode字符</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d\t\t\t\t\t\t<span class=\"comment\"># 可以看出python3中对d与c的处理结果是相同的</span></span><br><span class=\"line\"><span class=\"string\">&quot;編碼abc&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\"><span class=\"string\">b&#x27;\\xe7\\xb7\\xa8\\xe7\\xa2\\xbcabc&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.encode(<span class=\"string\">&#x27;unicode_escape&#x27;</span>)</span><br><span class=\"line\"><span class=\"string\">b&#x27;\\\\u7de8\\\\u78bcabc&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>).decode(<span class=\"string\">&#x27;latin-1&#x27;</span>)\t<span class=\"comment\"># 解码时出现乱码，可能是编码用错</span></span><br><span class=\"line\"><span class=\"string\">&#x27;ç·¨ç¢¼abc&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;ç\\xa0\\x81&#x27;</span>.encode(<span class=\"string\">&#x27;latin-1&#x27;</span>).decode(<span class=\"string\">&#x27;utf8&#x27;</span>) <span class=\"comment\"># 将乱码重新编码再解码</span></span><br><span class=\"line\"><span class=\"string\">&#x27;码&#x27;</span></span><br></pre></td></tr></table></figure></li>\n</ul></li>\n</ul>\n<h2 id=\"字符编码检测\">字符编码检测</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> chardet</span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file, <span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    a = f.read()</span><br><span class=\"line\">chardet.detect(a)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># &#123;&#x27;encoding&#x27;: &#x27;Big5&#x27;, &#x27;confidence&#x27;: 0.99, &#x27;language&#x27;: &#x27;Chinese&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Win10笔记本触控板重生","urlname":"Rebirth-of-Touchpad-on-Win10-Laptop","alias":["Windows10 touchpad"],"date":"2018-06-17T07:31:54.000Z","updated":"2018-06-18T06:31:06.000Z","_content":"\n改善Windows10笔记本触控板体验的方法！！\n\n## 背景\n一直以来，我都无比羡慕MacBook超强大的触控板，其可以脱离鼠标进行各种高效的操作。随着对笔记本使用的增加，我越来越忍受不了手里这台联想笔记本的“智障式”触摸板，并让我十分的好奇：“为什么Windows的触控板会如此难用？” 然而，这两天查找了[各种资料](Win10%E7%AC%94%E8%AE%B0%E6%9C%AC%E8%A7%A6%E6%8E%A7%E6%9D%BF%E9%87%8D%E7%94%9F.md#%E5%8F%82%E8%80%83%E6%BA%90)，惊喜的发现这个问题是可以被解决的！\n\n<!--more-->\n\n## 精确式触控(Precision Touchpad)\n>长久以来，在PC上触摸板的体验一直不尽人意。微软也一度试图解决这个问题，但PC厂商数量众多，产品也良莠不齐。面对这种状况，微软联合英特尔、义隆电子和新思科技提出“精确式触控板”概念。精确式触控板支持多点触控，并直接由Windows操作系统控制而非第三方驱动程序。相比与传统触摸板，精确式触摸板能够给用户提供更好的交互体验。\n\n## 我的设备信息\n- 5年老机联想Y500\n- 操作系统：Windows 10 (Cumulative Update, Version 1706, x64-based Systems)\n- 触控板厂商：Elan\n- 触控板驱动： 联想适配，但2014年后不再更新。\n\n## 操作步骤\n1. 确定触控板厂商：Elan/Synaptics。\n我的是Elan，其他Synaptics触控板可以参考这篇->[文章](https://zhuanlan.zhihu.com/p/28888470)\n2. 下载精确式触控驱动。\n去微软官方的[Microsoft update catalog](https://www.catalog.update.microsoft.com/Home.aspx)上搜索`elan wdf`，下载最新版驱动。\n**这里有几个细节**：\n  - 该驱动随Win10更新而更新，尽量下载最新版。\n  - 当时我直觉认为列表最上面的是最新版，然后直接点选了第一条的`Elan - Other hardware - ELAN Input Device For WDF`，信息如下：\n    ![Screenshot from 2018-06-18 11-08-05](../images/20180618110805000.png)\n    然后，按之后步骤更新了驱动，是正常有效的。但是后来才发现此驱动更新日期为`2016/9/30`，不是最新版，但也不影响使用（摊手.jpg)...且效果提升已然很好，所以没有试其他的，你们可以自己试下其他的驱动。\n3. 将下载的驱动放到任意一个空的文件夹，并解压。\n4. 双击dpinst.exe运行。\n[参考这篇](https://zhuanlan.zhihu.com/p/28888470)是建议手动查找驱动然后更新的方法，比较麻烦，而且试的时候我的笔记本一直报错，索性选择直接运行解压后的dpinst.exe文件，发现是这样也是可以的。\n**更新：** 昨天更新了win10系统至1803，触控板的驱动失效了，需要重新装，发现直接运行dpinst.exe并没有效果，于是按照[参考文章](https://zhuanlan.zhihu.com/p/28888470)手动更新后才生效，方法：\n>打开设备管理器，选择自己的触摸板设备，右键选择更新驱动。在弹出的窗口中选择“浏览我的计算机以查找驱动程序”，之后选则“让我从计算机上的可用驱动程序列表中选取”，再在弹出的窗口中选择`从磁盘安装`，选择刚刚才解压目录中的`AutoRun`(我点了`ETD.inf`)，一路next，之后重启就大功告成了。\n\n5. 重启电脑后生效，系统设置中出现精确式触控的设置选项：\n![multi](../images/20180618110805001.png)\n6. 享受飞一般效率提升吧！！\n7. <p><span style='background-color:rgb(241, 239, 8);color:rgb(255, 15, 0)'>注意：</span></p>\n- 此方法在我的电脑（联想Y500）上是可行的，其余厂商如Thinkpad、Dell、神州、微星等等在[这篇文章](https://zhuanlan.zhihu.com/p/28888470)中都有成功案例。但是不保证每台机器都有效，也有评论说按此方法更新驱动后出现各种问题，请自己斟酌。\n- 不想冒风险重装的，也可以试着通过修改注册表的方式更改设置：\n    - `Win + r`打开运行，输入`regedit`进入注册表页面。\n    - 找到Elan驱动的注册表位置`[HKEY_CURRENT_USER\\Software\\Elantech]`，参考以下两篇文章操作：\n    [修改注册表键值扩充y50触摸板功能](http://tieba.baidu.com/p/4099196263)\n    [关于elan触摸板实现三指点击的方法](https://blog.csdn.net/IKQMKSQM/article/details/73470032)\n    - 修改完成后，重启才能生效。\n    - 如果失败，或者没用可以再改回来～\n- 安装完成后，一定记得重启电脑使更改生效。我弄完后没重启，发现触控板虽然可以识别，但是点击确认只能按压，无法通过触摸完成，然后绕了很多弯路都没解决，最后重启了才变正常(当然，也可能是因为没安装最新版驱动的原因)。\n- 发现三指或四指有时有误判的情况，可以适当的将手指略分开一点，误判会减少许多。\n- 新装的驱动注册表位置： `[HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\PrecisionTouchPad]`，可以自己继续更改探索～\n## 参考源\n- [为Synaptics与Elan驱动的触控板安装微软精确式触控板驱动](https://zhuanlan.zhihu.com/p/28888470)\n- [ELAN Input Device for WDF Driver 16.21.13.3 for Windows 10 Anniversary Update 64-bit](http://drivers.softpedia.com/get/KEYBOARD-and-MOUSE/Elantech/ELAN-Input-Device-for-WDF-Driver-16-21-13-3-for-Windows-10-Anniversary-Update-64-bit.shtml)\n- [Two finger right click does not work](https://answers.microsoft.com/en-us/windows/forum/windows8_1-hardware/two-finger-right-click-does-not-work/c7fa3239-0c53-4e7b-87d8-57170293513d)\n- [修改注册表键值扩充y50触摸板功能](http://tieba.baidu.com/p/4099196263)\n- [关于elan触摸板实现三指点击的方法](https://blog.csdn.net/IKQMKSQM/article/details/73470032)","source":"_posts/Win10笔记本触控板重生.md","raw":"---\ntitle: Win10笔记本触控板重生\nurlname: Rebirth-of-Touchpad-on-Win10-Laptop\nalias: [Windows10 touchpad]\ntags: [Windows, Productivity]\ndate: 2018-06-17, 15:31:54\nupdated: 2018-06-18 14:31:06\n---\n\n改善Windows10笔记本触控板体验的方法！！\n\n## 背景\n一直以来，我都无比羡慕MacBook超强大的触控板，其可以脱离鼠标进行各种高效的操作。随着对笔记本使用的增加，我越来越忍受不了手里这台联想笔记本的“智障式”触摸板，并让我十分的好奇：“为什么Windows的触控板会如此难用？” 然而，这两天查找了[各种资料](Win10%E7%AC%94%E8%AE%B0%E6%9C%AC%E8%A7%A6%E6%8E%A7%E6%9D%BF%E9%87%8D%E7%94%9F.md#%E5%8F%82%E8%80%83%E6%BA%90)，惊喜的发现这个问题是可以被解决的！\n\n<!--more-->\n\n## 精确式触控(Precision Touchpad)\n>长久以来，在PC上触摸板的体验一直不尽人意。微软也一度试图解决这个问题，但PC厂商数量众多，产品也良莠不齐。面对这种状况，微软联合英特尔、义隆电子和新思科技提出“精确式触控板”概念。精确式触控板支持多点触控，并直接由Windows操作系统控制而非第三方驱动程序。相比与传统触摸板，精确式触摸板能够给用户提供更好的交互体验。\n\n## 我的设备信息\n- 5年老机联想Y500\n- 操作系统：Windows 10 (Cumulative Update, Version 1706, x64-based Systems)\n- 触控板厂商：Elan\n- 触控板驱动： 联想适配，但2014年后不再更新。\n\n## 操作步骤\n1. 确定触控板厂商：Elan/Synaptics。\n我的是Elan，其他Synaptics触控板可以参考这篇->[文章](https://zhuanlan.zhihu.com/p/28888470)\n2. 下载精确式触控驱动。\n去微软官方的[Microsoft update catalog](https://www.catalog.update.microsoft.com/Home.aspx)上搜索`elan wdf`，下载最新版驱动。\n**这里有几个细节**：\n  - 该驱动随Win10更新而更新，尽量下载最新版。\n  - 当时我直觉认为列表最上面的是最新版，然后直接点选了第一条的`Elan - Other hardware - ELAN Input Device For WDF`，信息如下：\n    ![Screenshot from 2018-06-18 11-08-05](../images/20180618110805000.png)\n    然后，按之后步骤更新了驱动，是正常有效的。但是后来才发现此驱动更新日期为`2016/9/30`，不是最新版，但也不影响使用（摊手.jpg)...且效果提升已然很好，所以没有试其他的，你们可以自己试下其他的驱动。\n3. 将下载的驱动放到任意一个空的文件夹，并解压。\n4. 双击dpinst.exe运行。\n[参考这篇](https://zhuanlan.zhihu.com/p/28888470)是建议手动查找驱动然后更新的方法，比较麻烦，而且试的时候我的笔记本一直报错，索性选择直接运行解压后的dpinst.exe文件，发现是这样也是可以的。\n**更新：** 昨天更新了win10系统至1803，触控板的驱动失效了，需要重新装，发现直接运行dpinst.exe并没有效果，于是按照[参考文章](https://zhuanlan.zhihu.com/p/28888470)手动更新后才生效，方法：\n>打开设备管理器，选择自己的触摸板设备，右键选择更新驱动。在弹出的窗口中选择“浏览我的计算机以查找驱动程序”，之后选则“让我从计算机上的可用驱动程序列表中选取”，再在弹出的窗口中选择`从磁盘安装`，选择刚刚才解压目录中的`AutoRun`(我点了`ETD.inf`)，一路next，之后重启就大功告成了。\n\n5. 重启电脑后生效，系统设置中出现精确式触控的设置选项：\n![multi](../images/20180618110805001.png)\n6. 享受飞一般效率提升吧！！\n7. <p><span style='background-color:rgb(241, 239, 8);color:rgb(255, 15, 0)'>注意：</span></p>\n- 此方法在我的电脑（联想Y500）上是可行的，其余厂商如Thinkpad、Dell、神州、微星等等在[这篇文章](https://zhuanlan.zhihu.com/p/28888470)中都有成功案例。但是不保证每台机器都有效，也有评论说按此方法更新驱动后出现各种问题，请自己斟酌。\n- 不想冒风险重装的，也可以试着通过修改注册表的方式更改设置：\n    - `Win + r`打开运行，输入`regedit`进入注册表页面。\n    - 找到Elan驱动的注册表位置`[HKEY_CURRENT_USER\\Software\\Elantech]`，参考以下两篇文章操作：\n    [修改注册表键值扩充y50触摸板功能](http://tieba.baidu.com/p/4099196263)\n    [关于elan触摸板实现三指点击的方法](https://blog.csdn.net/IKQMKSQM/article/details/73470032)\n    - 修改完成后，重启才能生效。\n    - 如果失败，或者没用可以再改回来～\n- 安装完成后，一定记得重启电脑使更改生效。我弄完后没重启，发现触控板虽然可以识别，但是点击确认只能按压，无法通过触摸完成，然后绕了很多弯路都没解决，最后重启了才变正常(当然，也可能是因为没安装最新版驱动的原因)。\n- 发现三指或四指有时有误判的情况，可以适当的将手指略分开一点，误判会减少许多。\n- 新装的驱动注册表位置： `[HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\PrecisionTouchPad]`，可以自己继续更改探索～\n## 参考源\n- [为Synaptics与Elan驱动的触控板安装微软精确式触控板驱动](https://zhuanlan.zhihu.com/p/28888470)\n- [ELAN Input Device for WDF Driver 16.21.13.3 for Windows 10 Anniversary Update 64-bit](http://drivers.softpedia.com/get/KEYBOARD-and-MOUSE/Elantech/ELAN-Input-Device-for-WDF-Driver-16-21-13-3-for-Windows-10-Anniversary-Update-64-bit.shtml)\n- [Two finger right click does not work](https://answers.microsoft.com/en-us/windows/forum/windows8_1-hardware/two-finger-right-click-does-not-work/c7fa3239-0c53-4e7b-87d8-57170293513d)\n- [修改注册表键值扩充y50触摸板功能](http://tieba.baidu.com/p/4099196263)\n- [关于elan触摸板实现三指点击的方法](https://blog.csdn.net/IKQMKSQM/article/details/73470032)","slug":"Win10笔记本触控板重生","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckozvuosr000fdbsg1j6cgc7n","content":"<p>改善Windows10笔记本触控板体验的方法！！</p>\n<h2 id=\"背景\">背景</h2>\n<p>一直以来，我都无比羡慕MacBook超强大的触控板，其可以脱离鼠标进行各种高效的操作。随着对笔记本使用的增加，我越来越忍受不了手里这台联想笔记本的“智障式”触摸板，并让我十分的好奇：“为什么Windows的触控板会如此难用？” 然而，这两天查找了<a href=\"Win10%E7%AC%94%E8%AE%B0%E6%9C%AC%E8%A7%A6%E6%8E%A7%E6%9D%BF%E9%87%8D%E7%94%9F.md#%E5%8F%82%E8%80%83%E6%BA%90\">各种资料</a>，惊喜的发现这个问题是可以被解决的！</p>\n<span id=\"more\"></span>\n<h2 id=\"精确式触控precision-touchpad\">精确式触控(Precision Touchpad)</h2>\n<blockquote>\n<p>长久以来，在PC上触摸板的体验一直不尽人意。微软也一度试图解决这个问题，但PC厂商数量众多，产品也良莠不齐。面对这种状况，微软联合英特尔、义隆电子和新思科技提出“精确式触控板”概念。精确式触控板支持多点触控，并直接由Windows操作系统控制而非第三方驱动程序。相比与传统触摸板，精确式触摸板能够给用户提供更好的交互体验。</p>\n</blockquote>\n<h2 id=\"我的设备信息\">我的设备信息</h2>\n<ul>\n<li>5年老机联想Y500</li>\n<li>操作系统：Windows 10 (Cumulative Update, Version 1706, x64-based Systems)</li>\n<li>触控板厂商：Elan</li>\n<li>触控板驱动： 联想适配，但2014年后不再更新。</li>\n</ul>\n<h2 id=\"操作步骤\">操作步骤</h2>\n<ol type=\"1\">\n<li>确定触控板厂商：Elan/Synaptics。 我的是Elan，其他Synaptics触控板可以参考这篇-&gt;<a href=\"https://zhuanlan.zhihu.com/p/28888470\">文章</a></li>\n<li>下载精确式触控驱动。 去微软官方的<a href=\"https://www.catalog.update.microsoft.com/Home.aspx\">Microsoft update catalog</a>上搜索<code>elan wdf</code>，下载最新版驱动。 <strong>这里有几个细节</strong>：</li>\n</ol>\n<ul>\n<li>该驱动随Win10更新而更新，尽量下载最新版。</li>\n<li>当时我直觉认为列表最上面的是最新版，然后直接点选了第一条的<code>Elan - Other hardware - ELAN Input Device For WDF</code>，信息如下： <img src=\"../images/20180618110805000.png\" alt=\"Screenshot from 2018-06-18 11-08-05\" /> 然后，按之后步骤更新了驱动，是正常有效的。但是后来才发现此驱动更新日期为<code>2016/9/30</code>，不是最新版，但也不影响使用（摊手.jpg)...且效果提升已然很好，所以没有试其他的，你们可以自己试下其他的驱动。</li>\n</ul>\n<ol start=\"3\" type=\"1\">\n<li><p>将下载的驱动放到任意一个空的文件夹，并解压。</p></li>\n<li><p>双击dpinst.exe运行。 <a href=\"https://zhuanlan.zhihu.com/p/28888470\">参考这篇</a>是建议手动查找驱动然后更新的方法，比较麻烦，而且试的时候我的笔记本一直报错，索性选择直接运行解压后的dpinst.exe文件，发现是这样也是可以的。 <strong>更新：</strong> 昨天更新了win10系统至1803，触控板的驱动失效了，需要重新装，发现直接运行dpinst.exe并没有效果，于是按照<a href=\"https://zhuanlan.zhihu.com/p/28888470\">参考文章</a>手动更新后才生效，方法： &gt;打开设备管理器，选择自己的触摸板设备，右键选择更新驱动。在弹出的窗口中选择“浏览我的计算机以查找驱动程序”，之后选则“让我从计算机上的可用驱动程序列表中选取”，再在弹出的窗口中选择<code>从磁盘安装</code>，选择刚刚才解压目录中的<code>AutoRun</code>(我点了<code>ETD.inf</code>)，一路next，之后重启就大功告成了。</p></li>\n<li><p>重启电脑后生效，系统设置中出现精确式触控的设置选项： <img src=\"../images/20180618110805001.png\" alt=\"multi\" /></p></li>\n<li><p>享受飞一般效率提升吧！！</p></li>\n<li><p>\n<p><span style=\"background-color:rgb(241, 239, 8);color:rgb(255, 15, 0)\">注意：</span></p>\n</p></li>\n</ol>\n<ul>\n<li>此方法在我的电脑（联想Y500）上是可行的，其余厂商如Thinkpad、Dell、神州、微星等等在<a href=\"https://zhuanlan.zhihu.com/p/28888470\">这篇文章</a>中都有成功案例。但是不保证每台机器都有效，也有评论说按此方法更新驱动后出现各种问题，请自己斟酌。</li>\n<li>不想冒风险重装的，也可以试着通过修改注册表的方式更改设置：\n<ul>\n<li><code>Win + r</code>打开运行，输入<code>regedit</code>进入注册表页面。</li>\n<li>找到Elan驱动的注册表位置<code>[HKEY_CURRENT_USER\\Software\\Elantech]</code>，参考以下两篇文章操作： <a href=\"http://tieba.baidu.com/p/4099196263\">修改注册表键值扩充y50触摸板功能</a> <a href=\"https://blog.csdn.net/IKQMKSQM/article/details/73470032\">关于elan触摸板实现三指点击的方法</a></li>\n<li>修改完成后，重启才能生效。</li>\n<li>如果失败，或者没用可以再改回来～</li>\n</ul></li>\n<li>安装完成后，一定记得重启电脑使更改生效。我弄完后没重启，发现触控板虽然可以识别，但是点击确认只能按压，无法通过触摸完成，然后绕了很多弯路都没解决，最后重启了才变正常(当然，也可能是因为没安装最新版驱动的原因)。</li>\n<li>发现三指或四指有时有误判的情况，可以适当的将手指略分开一点，误判会减少许多。</li>\n<li>新装的驱动注册表位置： <code>[HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\PrecisionTouchPad]</code>，可以自己继续更改探索～ ## 参考源</li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/28888470\">为Synaptics与Elan驱动的触控板安装微软精确式触控板驱动</a></li>\n<li><a href=\"http://drivers.softpedia.com/get/KEYBOARD-and-MOUSE/Elantech/ELAN-Input-Device-for-WDF-Driver-16-21-13-3-for-Windows-10-Anniversary-Update-64-bit.shtml\">ELAN Input Device for WDF Driver 16.21.13.3 for Windows 10 Anniversary Update 64-bit</a></li>\n<li><a href=\"https://answers.microsoft.com/en-us/windows/forum/windows8_1-hardware/two-finger-right-click-does-not-work/c7fa3239-0c53-4e7b-87d8-57170293513d\">Two finger right click does not work</a></li>\n<li><a href=\"http://tieba.baidu.com/p/4099196263\">修改注册表键值扩充y50触摸板功能</a></li>\n<li><a href=\"https://blog.csdn.net/IKQMKSQM/article/details/73470032\">关于elan触摸板实现三指点击的方法</a></li>\n</ul>\n","site":{"data":{"projects":[{"name":"PDF2Audio","url":"Convert PDFs to Audiobooks with Machine Learning","desc":"Convert PDFs to Audiobooks with Machine Learning"},{"name":"Alfred PKManager","url":"https://github.com/Konfido/alfred-pkmanager","desc":"A handful Alfred Workflow which helps searching and managing your Personal Knowledge Markdown notes."}]}},"excerpt":"<p>改善Windows10笔记本触控板体验的方法！！</p>\n<h2 id=\"背景\">背景</h2>\n<p>一直以来，我都无比羡慕MacBook超强大的触控板，其可以脱离鼠标进行各种高效的操作。随着对笔记本使用的增加，我越来越忍受不了手里这台联想笔记本的“智障式”触摸板，并让我十分的好奇：“为什么Windows的触控板会如此难用？” 然而，这两天查找了<a href=\"Win10%E7%AC%94%E8%AE%B0%E6%9C%AC%E8%A7%A6%E6%8E%A7%E6%9D%BF%E9%87%8D%E7%94%9F.md#%E5%8F%82%E8%80%83%E6%BA%90\">各种资料</a>，惊喜的发现这个问题是可以被解决的！</p>","more":"<h2 id=\"精确式触控precision-touchpad\">精确式触控(Precision Touchpad)</h2>\n<blockquote>\n<p>长久以来，在PC上触摸板的体验一直不尽人意。微软也一度试图解决这个问题，但PC厂商数量众多，产品也良莠不齐。面对这种状况，微软联合英特尔、义隆电子和新思科技提出“精确式触控板”概念。精确式触控板支持多点触控，并直接由Windows操作系统控制而非第三方驱动程序。相比与传统触摸板，精确式触摸板能够给用户提供更好的交互体验。</p>\n</blockquote>\n<h2 id=\"我的设备信息\">我的设备信息</h2>\n<ul>\n<li>5年老机联想Y500</li>\n<li>操作系统：Windows 10 (Cumulative Update, Version 1706, x64-based Systems)</li>\n<li>触控板厂商：Elan</li>\n<li>触控板驱动： 联想适配，但2014年后不再更新。</li>\n</ul>\n<h2 id=\"操作步骤\">操作步骤</h2>\n<ol type=\"1\">\n<li>确定触控板厂商：Elan/Synaptics。 我的是Elan，其他Synaptics触控板可以参考这篇-&gt;<a href=\"https://zhuanlan.zhihu.com/p/28888470\">文章</a></li>\n<li>下载精确式触控驱动。 去微软官方的<a href=\"https://www.catalog.update.microsoft.com/Home.aspx\">Microsoft update catalog</a>上搜索<code>elan wdf</code>，下载最新版驱动。 <strong>这里有几个细节</strong>：</li>\n</ol>\n<ul>\n<li>该驱动随Win10更新而更新，尽量下载最新版。</li>\n<li>当时我直觉认为列表最上面的是最新版，然后直接点选了第一条的<code>Elan - Other hardware - ELAN Input Device For WDF</code>，信息如下： <img src=\"../images/20180618110805000.png\" alt=\"Screenshot from 2018-06-18 11-08-05\" /> 然后，按之后步骤更新了驱动，是正常有效的。但是后来才发现此驱动更新日期为<code>2016/9/30</code>，不是最新版，但也不影响使用（摊手.jpg)...且效果提升已然很好，所以没有试其他的，你们可以自己试下其他的驱动。</li>\n</ul>\n<ol start=\"3\" type=\"1\">\n<li><p>将下载的驱动放到任意一个空的文件夹，并解压。</p></li>\n<li><p>双击dpinst.exe运行。 <a href=\"https://zhuanlan.zhihu.com/p/28888470\">参考这篇</a>是建议手动查找驱动然后更新的方法，比较麻烦，而且试的时候我的笔记本一直报错，索性选择直接运行解压后的dpinst.exe文件，发现是这样也是可以的。 <strong>更新：</strong> 昨天更新了win10系统至1803，触控板的驱动失效了，需要重新装，发现直接运行dpinst.exe并没有效果，于是按照<a href=\"https://zhuanlan.zhihu.com/p/28888470\">参考文章</a>手动更新后才生效，方法： &gt;打开设备管理器，选择自己的触摸板设备，右键选择更新驱动。在弹出的窗口中选择“浏览我的计算机以查找驱动程序”，之后选则“让我从计算机上的可用驱动程序列表中选取”，再在弹出的窗口中选择<code>从磁盘安装</code>，选择刚刚才解压目录中的<code>AutoRun</code>(我点了<code>ETD.inf</code>)，一路next，之后重启就大功告成了。</p></li>\n<li><p>重启电脑后生效，系统设置中出现精确式触控的设置选项： <img src=\"../images/20180618110805001.png\" alt=\"multi\" /></p></li>\n<li><p>享受飞一般效率提升吧！！</p></li>\n<li><p>\n<p><span style=\"background-color:rgb(241, 239, 8);color:rgb(255, 15, 0)\">注意：</span></p>\n</p></li>\n</ol>\n<ul>\n<li>此方法在我的电脑（联想Y500）上是可行的，其余厂商如Thinkpad、Dell、神州、微星等等在<a href=\"https://zhuanlan.zhihu.com/p/28888470\">这篇文章</a>中都有成功案例。但是不保证每台机器都有效，也有评论说按此方法更新驱动后出现各种问题，请自己斟酌。</li>\n<li>不想冒风险重装的，也可以试着通过修改注册表的方式更改设置：\n<ul>\n<li><code>Win + r</code>打开运行，输入<code>regedit</code>进入注册表页面。</li>\n<li>找到Elan驱动的注册表位置<code>[HKEY_CURRENT_USER\\Software\\Elantech]</code>，参考以下两篇文章操作： <a href=\"http://tieba.baidu.com/p/4099196263\">修改注册表键值扩充y50触摸板功能</a> <a href=\"https://blog.csdn.net/IKQMKSQM/article/details/73470032\">关于elan触摸板实现三指点击的方法</a></li>\n<li>修改完成后，重启才能生效。</li>\n<li>如果失败，或者没用可以再改回来～</li>\n</ul></li>\n<li>安装完成后，一定记得重启电脑使更改生效。我弄完后没重启，发现触控板虽然可以识别，但是点击确认只能按压，无法通过触摸完成，然后绕了很多弯路都没解决，最后重启了才变正常(当然，也可能是因为没安装最新版驱动的原因)。</li>\n<li>发现三指或四指有时有误判的情况，可以适当的将手指略分开一点，误判会减少许多。</li>\n<li>新装的驱动注册表位置： <code>[HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\PrecisionTouchPad]</code>，可以自己继续更改探索～ ## 参考源</li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/28888470\">为Synaptics与Elan驱动的触控板安装微软精确式触控板驱动</a></li>\n<li><a href=\"http://drivers.softpedia.com/get/KEYBOARD-and-MOUSE/Elantech/ELAN-Input-Device-for-WDF-Driver-16-21-13-3-for-Windows-10-Anniversary-Update-64-bit.shtml\">ELAN Input Device for WDF Driver 16.21.13.3 for Windows 10 Anniversary Update 64-bit</a></li>\n<li><a href=\"https://answers.microsoft.com/en-us/windows/forum/windows8_1-hardware/two-finger-right-click-does-not-work/c7fa3239-0c53-4e7b-87d8-57170293513d\">Two finger right click does not work</a></li>\n<li><a href=\"http://tieba.baidu.com/p/4099196263\">修改注册表键值扩充y50触摸板功能</a></li>\n<li><a href=\"https://blog.csdn.net/IKQMKSQM/article/details/73470032\">关于elan触摸板实现三指点击的方法</a></li>\n</ul>"},{"title":"pandas 数据处理","alias":["data processing"],"date":"2018-06-24T02:03:14.000Z","updated":"2019-07-09T12:00:30.000Z","blogged":true,"urlname":"data-processing-with-pandas","_content":"\n\n\n## 数据选取 pandas.DateFrame\n\n\n\n### 读取\n\n```shell\n>>> a = pd.read_csv('datasets/results.csv')\n>>> a = a.drop([1,3],axis=0)\n>>> a\n         date home_team   away_team  home_score  away_score\n0  2018-06-03   Andorra  Cape Verde           0           0\n2  2018-06-03  Zimbabwe    Botswana           1           1\n4  2018-06-04    Serbia       Chile           0           1\n5  2018-06-04  Slovakia     Morocco           1           2\n6  2018-06-04   Armenia     Moldova           0           0\n7  2018-06-04     India       Kenya           3           0\n8  2018-06-05    Russia      Turkey           1           1\n9  2018-06-05   Romania     Finland           2           0\n```\n### 生成（转成DataFrame）\n\n- `df = pd.DataFrame([[1,1],[2,2]])`\n\n\n\n### 统计\n\n- 列数：`df.shape[1]`\n- 行数：`df.shape[0]`\n- 相同的个数：`df['id'].value_counts()`\n\n### 行选择\n\n- `df.head()/df.tail()` 展示前/后5行样例\n```shell\n>>> a.head()\n         date home_team   away_team  home_score  away_score\n0  2018-06-03   Andorra  Cape Verde           0           0\n2  2018-06-03  Zimbabwe    Botswana           1           1\n4  2018-06-04    Serbia       Chile           0           1\n5  2018-06-04  Slovakia     Morocco           1           2\n6  2018-06-04   Armenia     Moldova           0           0\n```\n- `slicing` 切片\n```shell\n>>> a[1:3]\n         date home_team away_team  home_score  away_score\n2  2018-06-03  Zimbabwe  Botswana           1           1\n4  2018-06-04    Serbia     Chile           0           1\n```\n- `loc[ ]` 按数据标注的index选取,选取的结果包含下界\n```shell\n>>> a.loc[5:6]\n         date home_team away_team  home_score  away_score\n5  2018-06-04  Slovakia   Morocco           1           2\n6  2018-06-04   Armenia   Moldova           0           0\n```\n- `iloc[ ]` 按数据从0开始的实际index选取，且选取结果不包含下界。\n```shell\n>>> a.iloc[3:5]\n         date home_team away_team  home_score  away_score\n5  2018-06-04  Slovakia   Morocco           1           2\n6  2018-06-04   Armenia   Moldova           0           0\n```\n\n### 列选择\n- 按列名选取\n```shell\n>>> a[['date','home_team']]\n         date home_team\n0  2018-06-03   Andorra\n2  2018-06-03  Zimbabwe\n4  2018-06-04    Serbia\n5  2018-06-04  Slovakia\n6  2018-06-04   Armenia\n7  2018-06-04     India\n8  2018-06-05    Russia\n9  2018-06-05   Romania\n```\n\n### 删除列\n\n```python\ndf.drop(['B', 'C'], axis=1)\ndf.drop(columns=['B', 'C'])\n```\n\n### 删除行\n\n```python\ndf.drop([0, 1]) \t# 默认axis=0\ndf.drop(index=[0, 1])\n```\n\n\n\n### 选取数据\n\n#### 按条件选取\n\n```python\n>>> df[df['ip_address']==\"213.234.238.52\"]\n    ip_address\t\tport\tprotocal    country\tanonymous\tresponse\n0   213.234.238.52\t8080.0\tHTTPS\t    Russia\tTransparent\t3407 ms\n```\n\n```python\n>>> a.loc[a['date']>'2018-06-04']\n         date home_team away_team  home_score  away_score\n8  2018-06-05    Russia    Turkey           1           1\n9  2018-06-05   Romania   Finland           2           0\n```\n```python\n>>> b = a.loc[(a['date']=='2018-06-04')&(a['home_team']=='Slovakia')]\n>>> b\n         date home_team away_team  home_score  away_score\n5  2018-06-04  Slovakia   Morocco           1           2\n```\n#### 由具体值选取\n- `.values`\n```\n>>> b['away_team'].values[0]\n'Morocco'\n```\n- `loc[]`\n```shell\n>>> a.loc[4,'date']\n'2018-06-04'\n```\n\n## 数据清洗\n\n### 重复值\n\n- 查找重复值：`data.duplicated()`\n- 删除重复值：`data.drop_duplicates()`\n\n### 空值\n\n- Note: 在pandas中空值显示为NaN\n- 空值：`data.isnull()`\n- 非空值：\n  - dataframe: `df.notna()`\n  - float: `np.isnan()`\n- 空值数量：`data['column'].isnull().value_counts()`\n- 处理空值：\n  - 填充：\n    - 填充0：`data.fillna(0)`\n    - 用字典对不同列填充：`data.fillna({'col1':0,'col2':1})`\n  - 删除：\n    - 删除全部为NaN的行：`data.dropna(axis=0, how='all'))`\n    - 删除在列名为\"age\"和\"sex\"中有NaN的行`df.dropna(subset=[\"age\", \"sex\"])`\n    - 删除任何含有NaN的列：`data.dropna(axis=1, how='any')`\n\n### 空格\n\n- 用null替代空格\n\t- `df[\"VIN\"]=df[\"VIN\"].apply(lambda x: np.NaN if str(x).isspace() else x)`\n- 去除数据间的空格：\n\t- `a['column'] = a['column'].map(str.strip)`\n\t- `a['column'] = a['column'].map(str.lstrip)`\n\t- `a['column'] = a['column'].map(str.rstrip)`\n\n### 大小写\n\n- 全部大写：`a['column'] = a['column'].map(str.upper)`\n- 全部小写：`a['column'] = a['column'].map(str.lower)`\n- 首字母大写：`a['column'] = a['column'].map(str.title)`\n\n### 极值/异常值\n\n- 检查数据情况：`data.describe().astype(np.int64).T`\n- 替换异常值：`data.replace([max, min],data['col'].mean())`\n\n### 数据格式\n\n- 数值类型转换：`data['col1'] = data['col1'].astype(np.int64)`\n- 日期格式：`data['time'] = pd.to_datetime(data['time'])`\n\n\n\n## 数据处理\n\n### 统计\n\n- 字符数：`string.count(\" \")`\n- `pd.value_counts(x)`\n\n### 排序\n\n- `df.sort_values(by = \"a\", ascending = False)`\n\n\n\n### 新增/赋值数据\n\n- 新增/赋值行：`df.loc['raw'] = value`\n- 新增/赋值列：`df['column'] = value`\n- 单个数据\n  - `df.loc[index,'column'] = value`\n  - `df.insert(idx, 'column', value)`\n\n### Column重命名\n\n- `df.rename(columns={'col':'new_col'},inplace=True)`\n\n### 类型转换\n\n- Str to Float: `pd.to_numeric(df)`/`df.apply(pd.to_numeric)`\n\n- DataFrame to List：首先使用np.array()函数把DataFrame转化为np.ndarray()，再利用tolist()函数把np.ndarray()转为list\n\n  ```python\n  data = pd.read_csv(\"a.csv\")\n  data_array = np.array(data)\n  data_list = data_array.tolist()\n  ```\n\n### 运算\n\n- 单列运算：`map()`函数，用于**Series对象**（或DataFrame对象的一列），接收函数作为或字典对象作为参数，返回经过函数或字典映射处理后的值。例：对a['text']列中的每一项进行分句：\n\n  ```python\n  a['text'] = a['text'].map(lambda x:sent_tokenize(x))\n  ```\n\n- 多列运算：`apply()`函数，用于**DataFrame对象**。col3 = col1 + col2\n\n  ```python\n  a['col3'] = a.apply(lambda x: x['col1'] + x['col2'], axis=1)\n  ```\n\n- 平均值：mean(axis=1)\n\n  - **axis**:  along which the means are computed. `axis=0` means along index, `axis=1` means along colunms.\n\n\n\n### 遍历列\n\n```python\nfor index, row in df.iterrows():\n    print(row[\"c1\"], row[\"c2\"])\n```\n\n\n\n### 分组 groupby\n\n- 使用`cut()`函数\n\n  ```python\n  interval = [0, 5, 10, 15, 20]  #根据数值大小分区间\n  group_name = ['A', 'B', 'C', 'D', 'E']\n  data['categories'] = pd.cut(data['col2'], interval, labels = group_names)\n  ```\n\n- 使用`groupby()`，`transform()`函数\n  - 分组后每组的size： `df.groupby('type').size()`\n  - 按A列分组，获取**其他列**的均值：`df.groupby('A').mean()`\n  - 根据`type`列将数据分组后，对组内`col`的值进行求和。\n    ```python\n    >>> df.groupby('type')[\"col\"].sum()\n    type\n    1     12.0\n    2     23.1\n    3     34.2\n    Name: col, dtype: float64\n    ```\n  - 根据`type`列将数据分组后，对组内`col`的值进行多种计算。\n    ```python\n    df.groupby('type')['col'].agg({'sum','size'})\n    ```\n  - 添加一列数据，其按类显示每行数据`col`占总数的百分比\n    ```python\n    a['percentage'] = a.groupby('type')['col'].transform(lambda x: x / x.sum())\n    ```\n\n### 合并 [merge](https://pandas-docs.github.io/pandas-docs-travis/user_guide/merging.html#brief-primer-on-merge-methods-relational-algebra)\n\n- Merge on one key：`pd.merge(left,right)`\n\n    ```python\n    >>> left\n        A   B key\n    0  A0  B0  K0\n    1  A1  B1  K1\n    2  A2  B2  K2\n    3  A3  B3  K3\n    >>> right\n        C   D key\n    0  C0  D0  K0\n    1  C1  D1  K1\n    2  C2  D2  K2\n    3  C3  D3  K3\n    >>> pd.merge(left,right)\n        A   B key   C   D\n    0  A0  B0  K0  C0  D0\n    1  A1  B1  K1  C1  D1\n    2  A2  B2  K2  C2  D2\n    3  A3  B3  K3  C3  D3\n    ```\n\n- Merge on two keys:\n\n    ```python\n    >>> left\n        A   B key1 key2\n    0  A0  B0   K0   K0\n    1  A1  B1   K1   K1\n    2  A2  B2   K2   K2\n    3  A3  B3   K3   K3\n\n    >>> right\n        C   D key1 key3\n    0  C0  D0   K0   K0\n    1  C1  D1   K1   K1\n    2  C2  D2   K2   K2\n    3  C3  D3   K3   K4\n\n    >>> pd.merge(left, right, on = 'key2',suffixes=['_left','_right'])\t#默认合并方式how=\"inner\"\n        A   B key1_left key2   C   D key1_right\n    0  A0  B0        K0   K0  C0  D0         K0\n    1  A1  B1        K1   K1  C1  D1         K1\n    2  A2  B2        K2   K2  C2  D2         K2\n    ```\n\n- 若合并的两个对象的列名不同，可以单独指定:\n  `pd.merge(left, right, left_on='key1',right_on='key2')`\n\n    ```shell\n    >>> pd.merge(left, right, on=['key1','key2'])\n        A   B key1 key2   C   D\n    0  A0  B0   K0   K0  C0  D0\n    1  A1  B1   K1   K1  C1  D1\n    2  A2  B2   K2   K2  C2  D2\n  \n    >>> pd.merge(left, right, on = ['key1', 'key2'], how = 'left', indicator = True) #indicator展示合并方式\n        A   B key1 key2    C    D     _merge\n    0  A0  B0   K0   K0   C0   D0       both\n    1  A1  B1   K1   K1   C1   D1       both\n    2  A2  B2   K2   K2   C2   D2       both\n    3  A3  B3   K3   K3  NaN  NaN  left_only\n    ```\n- right on index合并： `pd.merge(left,right,right_index=True,left_on=['key'])`\n\n### 导出数据 csv\n\n- `df.to_csv('data.csv')`\n- `df.to_csv('data.csv',header=0,index=0) `不保留列名，索引\n\n\n\n## 作图plot\n\n```python\npd.plot(*args, **kwargs)\n```\n\n重要参数\n\n```python\nDataFrame.plot(x=None, y=None, kind='line', ax=None, subplots=False, sharex=None, sharey=False, layout=None,figsize=None, use_index=True, title=None, grid=None, legend=True, style=None, logx=False, logy=False, loglog=False, xticks=None, yticks=None, xlim=None, ylim=None, rot=None,xerr=None,secondary_y=False, sort_columns=False, **kwds)\n```\n\n- logx / logy：设置坐标轴刻度是否取对数，boolean\n- xlim / ylim：设置坐标轴范围，2-tuple/list\n- linestyle：可取：\":\", \"--\", \"-.\", \"-\"\n\n\n\n## References\n\n- [pandas的基本用法(七)——合并数据merge](http://noahsnail.com/2017/04/29/2017-4-29-pandas%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95(%E4%B8%83)%E2%80%94%E2%80%94%E5%90%88%E5%B9%B6%E6%95%B0%E6%8D%AEmerge/)\n- [使用python进行数据清洗](http://bluewhale.cc/2016-08-21/python-data-cleaning.html)\n- [Pandas分组运算（groupby）修炼](https://www.cnblogs.com/lemonbit/p/6810972.html)\n- [详解pandas.DataFrame.plot()](https://blog.csdn.net/brucewong0516/article/details/80524442)\n","source":"_posts/pandas 数据处理.md","raw":"---\ntitle: pandas 数据处理\nalias: [data processing]\ntags: [python]\ndate: 6/24/2018, 10:03:14\nupdated: 2019-07-09 20:00:30\nblogged: true\nurlname: data-processing-with-pandas\n---\n\n\n\n## 数据选取 pandas.DateFrame\n\n\n\n### 读取\n\n```shell\n>>> a = pd.read_csv('datasets/results.csv')\n>>> a = a.drop([1,3],axis=0)\n>>> a\n         date home_team   away_team  home_score  away_score\n0  2018-06-03   Andorra  Cape Verde           0           0\n2  2018-06-03  Zimbabwe    Botswana           1           1\n4  2018-06-04    Serbia       Chile           0           1\n5  2018-06-04  Slovakia     Morocco           1           2\n6  2018-06-04   Armenia     Moldova           0           0\n7  2018-06-04     India       Kenya           3           0\n8  2018-06-05    Russia      Turkey           1           1\n9  2018-06-05   Romania     Finland           2           0\n```\n### 生成（转成DataFrame）\n\n- `df = pd.DataFrame([[1,1],[2,2]])`\n\n\n\n### 统计\n\n- 列数：`df.shape[1]`\n- 行数：`df.shape[0]`\n- 相同的个数：`df['id'].value_counts()`\n\n### 行选择\n\n- `df.head()/df.tail()` 展示前/后5行样例\n```shell\n>>> a.head()\n         date home_team   away_team  home_score  away_score\n0  2018-06-03   Andorra  Cape Verde           0           0\n2  2018-06-03  Zimbabwe    Botswana           1           1\n4  2018-06-04    Serbia       Chile           0           1\n5  2018-06-04  Slovakia     Morocco           1           2\n6  2018-06-04   Armenia     Moldova           0           0\n```\n- `slicing` 切片\n```shell\n>>> a[1:3]\n         date home_team away_team  home_score  away_score\n2  2018-06-03  Zimbabwe  Botswana           1           1\n4  2018-06-04    Serbia     Chile           0           1\n```\n- `loc[ ]` 按数据标注的index选取,选取的结果包含下界\n```shell\n>>> a.loc[5:6]\n         date home_team away_team  home_score  away_score\n5  2018-06-04  Slovakia   Morocco           1           2\n6  2018-06-04   Armenia   Moldova           0           0\n```\n- `iloc[ ]` 按数据从0开始的实际index选取，且选取结果不包含下界。\n```shell\n>>> a.iloc[3:5]\n         date home_team away_team  home_score  away_score\n5  2018-06-04  Slovakia   Morocco           1           2\n6  2018-06-04   Armenia   Moldova           0           0\n```\n\n### 列选择\n- 按列名选取\n```shell\n>>> a[['date','home_team']]\n         date home_team\n0  2018-06-03   Andorra\n2  2018-06-03  Zimbabwe\n4  2018-06-04    Serbia\n5  2018-06-04  Slovakia\n6  2018-06-04   Armenia\n7  2018-06-04     India\n8  2018-06-05    Russia\n9  2018-06-05   Romania\n```\n\n### 删除列\n\n```python\ndf.drop(['B', 'C'], axis=1)\ndf.drop(columns=['B', 'C'])\n```\n\n### 删除行\n\n```python\ndf.drop([0, 1]) \t# 默认axis=0\ndf.drop(index=[0, 1])\n```\n\n\n\n### 选取数据\n\n#### 按条件选取\n\n```python\n>>> df[df['ip_address']==\"213.234.238.52\"]\n    ip_address\t\tport\tprotocal    country\tanonymous\tresponse\n0   213.234.238.52\t8080.0\tHTTPS\t    Russia\tTransparent\t3407 ms\n```\n\n```python\n>>> a.loc[a['date']>'2018-06-04']\n         date home_team away_team  home_score  away_score\n8  2018-06-05    Russia    Turkey           1           1\n9  2018-06-05   Romania   Finland           2           0\n```\n```python\n>>> b = a.loc[(a['date']=='2018-06-04')&(a['home_team']=='Slovakia')]\n>>> b\n         date home_team away_team  home_score  away_score\n5  2018-06-04  Slovakia   Morocco           1           2\n```\n#### 由具体值选取\n- `.values`\n```\n>>> b['away_team'].values[0]\n'Morocco'\n```\n- `loc[]`\n```shell\n>>> a.loc[4,'date']\n'2018-06-04'\n```\n\n## 数据清洗\n\n### 重复值\n\n- 查找重复值：`data.duplicated()`\n- 删除重复值：`data.drop_duplicates()`\n\n### 空值\n\n- Note: 在pandas中空值显示为NaN\n- 空值：`data.isnull()`\n- 非空值：\n  - dataframe: `df.notna()`\n  - float: `np.isnan()`\n- 空值数量：`data['column'].isnull().value_counts()`\n- 处理空值：\n  - 填充：\n    - 填充0：`data.fillna(0)`\n    - 用字典对不同列填充：`data.fillna({'col1':0,'col2':1})`\n  - 删除：\n    - 删除全部为NaN的行：`data.dropna(axis=0, how='all'))`\n    - 删除在列名为\"age\"和\"sex\"中有NaN的行`df.dropna(subset=[\"age\", \"sex\"])`\n    - 删除任何含有NaN的列：`data.dropna(axis=1, how='any')`\n\n### 空格\n\n- 用null替代空格\n\t- `df[\"VIN\"]=df[\"VIN\"].apply(lambda x: np.NaN if str(x).isspace() else x)`\n- 去除数据间的空格：\n\t- `a['column'] = a['column'].map(str.strip)`\n\t- `a['column'] = a['column'].map(str.lstrip)`\n\t- `a['column'] = a['column'].map(str.rstrip)`\n\n### 大小写\n\n- 全部大写：`a['column'] = a['column'].map(str.upper)`\n- 全部小写：`a['column'] = a['column'].map(str.lower)`\n- 首字母大写：`a['column'] = a['column'].map(str.title)`\n\n### 极值/异常值\n\n- 检查数据情况：`data.describe().astype(np.int64).T`\n- 替换异常值：`data.replace([max, min],data['col'].mean())`\n\n### 数据格式\n\n- 数值类型转换：`data['col1'] = data['col1'].astype(np.int64)`\n- 日期格式：`data['time'] = pd.to_datetime(data['time'])`\n\n\n\n## 数据处理\n\n### 统计\n\n- 字符数：`string.count(\" \")`\n- `pd.value_counts(x)`\n\n### 排序\n\n- `df.sort_values(by = \"a\", ascending = False)`\n\n\n\n### 新增/赋值数据\n\n- 新增/赋值行：`df.loc['raw'] = value`\n- 新增/赋值列：`df['column'] = value`\n- 单个数据\n  - `df.loc[index,'column'] = value`\n  - `df.insert(idx, 'column', value)`\n\n### Column重命名\n\n- `df.rename(columns={'col':'new_col'},inplace=True)`\n\n### 类型转换\n\n- Str to Float: `pd.to_numeric(df)`/`df.apply(pd.to_numeric)`\n\n- DataFrame to List：首先使用np.array()函数把DataFrame转化为np.ndarray()，再利用tolist()函数把np.ndarray()转为list\n\n  ```python\n  data = pd.read_csv(\"a.csv\")\n  data_array = np.array(data)\n  data_list = data_array.tolist()\n  ```\n\n### 运算\n\n- 单列运算：`map()`函数，用于**Series对象**（或DataFrame对象的一列），接收函数作为或字典对象作为参数，返回经过函数或字典映射处理后的值。例：对a['text']列中的每一项进行分句：\n\n  ```python\n  a['text'] = a['text'].map(lambda x:sent_tokenize(x))\n  ```\n\n- 多列运算：`apply()`函数，用于**DataFrame对象**。col3 = col1 + col2\n\n  ```python\n  a['col3'] = a.apply(lambda x: x['col1'] + x['col2'], axis=1)\n  ```\n\n- 平均值：mean(axis=1)\n\n  - **axis**:  along which the means are computed. `axis=0` means along index, `axis=1` means along colunms.\n\n\n\n### 遍历列\n\n```python\nfor index, row in df.iterrows():\n    print(row[\"c1\"], row[\"c2\"])\n```\n\n\n\n### 分组 groupby\n\n- 使用`cut()`函数\n\n  ```python\n  interval = [0, 5, 10, 15, 20]  #根据数值大小分区间\n  group_name = ['A', 'B', 'C', 'D', 'E']\n  data['categories'] = pd.cut(data['col2'], interval, labels = group_names)\n  ```\n\n- 使用`groupby()`，`transform()`函数\n  - 分组后每组的size： `df.groupby('type').size()`\n  - 按A列分组，获取**其他列**的均值：`df.groupby('A').mean()`\n  - 根据`type`列将数据分组后，对组内`col`的值进行求和。\n    ```python\n    >>> df.groupby('type')[\"col\"].sum()\n    type\n    1     12.0\n    2     23.1\n    3     34.2\n    Name: col, dtype: float64\n    ```\n  - 根据`type`列将数据分组后，对组内`col`的值进行多种计算。\n    ```python\n    df.groupby('type')['col'].agg({'sum','size'})\n    ```\n  - 添加一列数据，其按类显示每行数据`col`占总数的百分比\n    ```python\n    a['percentage'] = a.groupby('type')['col'].transform(lambda x: x / x.sum())\n    ```\n\n### 合并 [merge](https://pandas-docs.github.io/pandas-docs-travis/user_guide/merging.html#brief-primer-on-merge-methods-relational-algebra)\n\n- Merge on one key：`pd.merge(left,right)`\n\n    ```python\n    >>> left\n        A   B key\n    0  A0  B0  K0\n    1  A1  B1  K1\n    2  A2  B2  K2\n    3  A3  B3  K3\n    >>> right\n        C   D key\n    0  C0  D0  K0\n    1  C1  D1  K1\n    2  C2  D2  K2\n    3  C3  D3  K3\n    >>> pd.merge(left,right)\n        A   B key   C   D\n    0  A0  B0  K0  C0  D0\n    1  A1  B1  K1  C1  D1\n    2  A2  B2  K2  C2  D2\n    3  A3  B3  K3  C3  D3\n    ```\n\n- Merge on two keys:\n\n    ```python\n    >>> left\n        A   B key1 key2\n    0  A0  B0   K0   K0\n    1  A1  B1   K1   K1\n    2  A2  B2   K2   K2\n    3  A3  B3   K3   K3\n\n    >>> right\n        C   D key1 key3\n    0  C0  D0   K0   K0\n    1  C1  D1   K1   K1\n    2  C2  D2   K2   K2\n    3  C3  D3   K3   K4\n\n    >>> pd.merge(left, right, on = 'key2',suffixes=['_left','_right'])\t#默认合并方式how=\"inner\"\n        A   B key1_left key2   C   D key1_right\n    0  A0  B0        K0   K0  C0  D0         K0\n    1  A1  B1        K1   K1  C1  D1         K1\n    2  A2  B2        K2   K2  C2  D2         K2\n    ```\n\n- 若合并的两个对象的列名不同，可以单独指定:\n  `pd.merge(left, right, left_on='key1',right_on='key2')`\n\n    ```shell\n    >>> pd.merge(left, right, on=['key1','key2'])\n        A   B key1 key2   C   D\n    0  A0  B0   K0   K0  C0  D0\n    1  A1  B1   K1   K1  C1  D1\n    2  A2  B2   K2   K2  C2  D2\n  \n    >>> pd.merge(left, right, on = ['key1', 'key2'], how = 'left', indicator = True) #indicator展示合并方式\n        A   B key1 key2    C    D     _merge\n    0  A0  B0   K0   K0   C0   D0       both\n    1  A1  B1   K1   K1   C1   D1       both\n    2  A2  B2   K2   K2   C2   D2       both\n    3  A3  B3   K3   K3  NaN  NaN  left_only\n    ```\n- right on index合并： `pd.merge(left,right,right_index=True,left_on=['key'])`\n\n### 导出数据 csv\n\n- `df.to_csv('data.csv')`\n- `df.to_csv('data.csv',header=0,index=0) `不保留列名，索引\n\n\n\n## 作图plot\n\n```python\npd.plot(*args, **kwargs)\n```\n\n重要参数\n\n```python\nDataFrame.plot(x=None, y=None, kind='line', ax=None, subplots=False, sharex=None, sharey=False, layout=None,figsize=None, use_index=True, title=None, grid=None, legend=True, style=None, logx=False, logy=False, loglog=False, xticks=None, yticks=None, xlim=None, ylim=None, rot=None,xerr=None,secondary_y=False, sort_columns=False, **kwds)\n```\n\n- logx / logy：设置坐标轴刻度是否取对数，boolean\n- xlim / ylim：设置坐标轴范围，2-tuple/list\n- linestyle：可取：\":\", \"--\", \"-.\", \"-\"\n\n\n\n## References\n\n- [pandas的基本用法(七)——合并数据merge](http://noahsnail.com/2017/04/29/2017-4-29-pandas%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95(%E4%B8%83)%E2%80%94%E2%80%94%E5%90%88%E5%B9%B6%E6%95%B0%E6%8D%AEmerge/)\n- [使用python进行数据清洗](http://bluewhale.cc/2016-08-21/python-data-cleaning.html)\n- [Pandas分组运算（groupby）修炼](https://www.cnblogs.com/lemonbit/p/6810972.html)\n- [详解pandas.DataFrame.plot()](https://blog.csdn.net/brucewong0516/article/details/80524442)\n","slug":"pandas 数据处理","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckozvuost000hdbsg46qccir0","content":"<h2 id=\"数据选取-pandas.dateframe\">数据选取 pandas.DateFrame</h2>\n<h3 id=\"读取\">读取</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; a = pd.read_csv(<span class=\"string\">&#x27;datasets/results.csv&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; a = a.drop([1,3],axis=0)</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; a</span></span><br><span class=\"line\">         date home_team   away_team  home_score  away_score</span><br><span class=\"line\">0  2018-06-03   Andorra  Cape Verde           0           0</span><br><span class=\"line\">2  2018-06-03  Zimbabwe    Botswana           1           1</span><br><span class=\"line\">4  2018-06-04    Serbia       Chile           0           1</span><br><span class=\"line\">5  2018-06-04  Slovakia     Morocco           1           2</span><br><span class=\"line\">6  2018-06-04   Armenia     Moldova           0           0</span><br><span class=\"line\">7  2018-06-04     India       Kenya           3           0</span><br><span class=\"line\">8  2018-06-05    Russia      Turkey           1           1</span><br><span class=\"line\">9  2018-06-05   Romania     Finland           2           0</span><br></pre></td></tr></table></figure>\n<h3 id=\"生成转成dataframe\">生成（转成DataFrame）</h3>\n<ul>\n<li><code>df = pd.DataFrame([[1,1],[2,2]])</code></li>\n</ul>\n<h3 id=\"统计\">统计</h3>\n<ul>\n<li>列数：<code>df.shape[1]</code></li>\n<li>行数：<code>df.shape[0]</code></li>\n<li>相同的个数：<code>df['id'].value_counts()</code></li>\n</ul>\n<h3 id=\"行选择\">行选择</h3>\n<ul>\n<li><code>df.head()/df.tail()</code> 展示前/后5行样例 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; a.head()</span></span><br><span class=\"line\">         date home_team   away_team  home_score  away_score</span><br><span class=\"line\">0  2018-06-03   Andorra  Cape Verde           0           0</span><br><span class=\"line\">2  2018-06-03  Zimbabwe    Botswana           1           1</span><br><span class=\"line\">4  2018-06-04    Serbia       Chile           0           1</span><br><span class=\"line\">5  2018-06-04  Slovakia     Morocco           1           2</span><br><span class=\"line\">6  2018-06-04   Armenia     Moldova           0           0</span><br></pre></td></tr></table></figure></li>\n<li><code>slicing</code> 切片 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; a[1:3]</span></span><br><span class=\"line\">         date home_team away_team  home_score  away_score</span><br><span class=\"line\">2  2018-06-03  Zimbabwe  Botswana           1           1</span><br><span class=\"line\">4  2018-06-04    Serbia     Chile           0           1</span><br></pre></td></tr></table></figure></li>\n<li><code>loc[ ]</code> 按数据标注的index选取,选取的结果包含下界 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; a.loc[5:6]</span></span><br><span class=\"line\">         date home_team away_team  home_score  away_score</span><br><span class=\"line\">5  2018-06-04  Slovakia   Morocco           1           2</span><br><span class=\"line\">6  2018-06-04   Armenia   Moldova           0           0</span><br></pre></td></tr></table></figure></li>\n<li><code>iloc[ ]</code> 按数据从0开始的实际index选取，且选取结果不包含下界。 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; a.iloc[3:5]</span></span><br><span class=\"line\">         date home_team away_team  home_score  away_score</span><br><span class=\"line\">5  2018-06-04  Slovakia   Morocco           1           2</span><br><span class=\"line\">6  2018-06-04   Armenia   Moldova           0           0</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"列选择\">列选择</h3>\n<ul>\n<li>按列名选取 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; a[[<span class=\"string\">&#x27;date&#x27;</span>,<span class=\"string\">&#x27;home_team&#x27;</span>]]</span></span><br><span class=\"line\">         date home_team</span><br><span class=\"line\">0  2018-06-03   Andorra</span><br><span class=\"line\">2  2018-06-03  Zimbabwe</span><br><span class=\"line\">4  2018-06-04    Serbia</span><br><span class=\"line\">5  2018-06-04  Slovakia</span><br><span class=\"line\">6  2018-06-04   Armenia</span><br><span class=\"line\">7  2018-06-04     India</span><br><span class=\"line\">8  2018-06-05    Russia</span><br><span class=\"line\">9  2018-06-05   Romania</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"删除列\">删除列</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df.drop([<span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>], axis=<span class=\"number\">1</span>)</span><br><span class=\"line\">df.drop(columns=[<span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除行\">删除行</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df.drop([<span class=\"number\">0</span>, <span class=\"number\">1</span>]) \t<span class=\"comment\"># 默认axis=0</span></span><br><span class=\"line\">df.drop(index=[<span class=\"number\">0</span>, <span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n<h3 id=\"选取数据\">选取数据</h3>\n<h4 id=\"按条件选取\">按条件选取</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>df[df[<span class=\"string\">&#x27;ip_address&#x27;</span>]==<span class=\"string\">&quot;213.234.238.52&quot;</span>]</span><br><span class=\"line\">    ip_address\t\tport\tprotocal    country\tanonymous\tresponse</span><br><span class=\"line\"><span class=\"number\">0</span>   <span class=\"number\">213.234</span><span class=\"number\">.238</span><span class=\"number\">.52</span>\t<span class=\"number\">8080.0</span>\tHTTPS\t    Russia\tTransparent\t<span class=\"number\">3407</span> ms</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.loc[a[<span class=\"string\">&#x27;date&#x27;</span>]&gt;<span class=\"string\">&#x27;2018-06-04&#x27;</span>]</span><br><span class=\"line\">         date home_team away_team  home_score  away_score</span><br><span class=\"line\"><span class=\"number\">8</span>  <span class=\"number\">2018</span>-06-05    Russia    Turkey           <span class=\"number\">1</span>           <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">9</span>  <span class=\"number\">2018</span>-06-05   Romania   Finland           <span class=\"number\">2</span>           <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = a.loc[(a[<span class=\"string\">&#x27;date&#x27;</span>]==<span class=\"string\">&#x27;2018-06-04&#x27;</span>)&amp;(a[<span class=\"string\">&#x27;home_team&#x27;</span>]==<span class=\"string\">&#x27;Slovakia&#x27;</span>)]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b</span><br><span class=\"line\">         date home_team away_team  home_score  away_score</span><br><span class=\"line\"><span class=\"number\">5</span>  <span class=\"number\">2018</span>-06-04  Slovakia   Morocco           <span class=\"number\">1</span>           <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"由具体值选取\">由具体值选取</h4>\n<ul>\n<li><code>.values</code> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; b[&#x27;away_team&#x27;].values[0]</span><br><span class=\"line\">&#x27;Morocco&#x27;</span><br></pre></td></tr></table></figure></li>\n<li><code>loc[]</code> <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; a.loc[4,<span class=\"string\">&#x27;date&#x27;</span>]</span></span><br><span class=\"line\">&#x27;2018-06-04&#x27;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"数据清洗\">数据清洗</h2>\n<h3 id=\"重复值\">重复值</h3>\n<ul>\n<li>查找重复值：<code>data.duplicated()</code></li>\n<li>删除重复值：<code>data.drop_duplicates()</code></li>\n</ul>\n<h3 id=\"空值\">空值</h3>\n<ul>\n<li>Note: 在pandas中空值显示为NaN</li>\n<li>空值：<code>data.isnull()</code></li>\n<li>非空值：\n<ul>\n<li>dataframe: <code>df.notna()</code></li>\n<li>float: <code>np.isnan()</code></li>\n</ul></li>\n<li>空值数量：<code>data['column'].isnull().value_counts()</code></li>\n<li>处理空值：\n<ul>\n<li>填充：\n<ul>\n<li>填充0：<code>data.fillna(0)</code></li>\n<li>用字典对不同列填充：<code>data.fillna(&#123;'col1':0,'col2':1&#125;)</code></li>\n</ul></li>\n<li>删除：\n<ul>\n<li>删除全部为NaN的行：<code>data.dropna(axis=0, how='all'))</code></li>\n<li>删除在列名为\"age\"和\"sex\"中有NaN的行<code>df.dropna(subset=[\"age\", \"sex\"])</code></li>\n<li>删除任何含有NaN的列：<code>data.dropna(axis=1, how='any')</code></li>\n</ul></li>\n</ul></li>\n</ul>\n<h3 id=\"空格\">空格</h3>\n<ul>\n<li>用null替代空格\n<ul>\n<li><code>df[\"VIN\"]=df[\"VIN\"].apply(lambda x: np.NaN if str(x).isspace() else x)</code></li>\n</ul></li>\n<li>去除数据间的空格：\n<ul>\n<li><code>a['column'] = a['column'].map(str.strip)</code></li>\n<li><code>a['column'] = a['column'].map(str.lstrip)</code></li>\n<li><code>a['column'] = a['column'].map(str.rstrip)</code></li>\n</ul></li>\n</ul>\n<h3 id=\"大小写\">大小写</h3>\n<ul>\n<li>全部大写：<code>a['column'] = a['column'].map(str.upper)</code></li>\n<li>全部小写：<code>a['column'] = a['column'].map(str.lower)</code></li>\n<li>首字母大写：<code>a['column'] = a['column'].map(str.title)</code></li>\n</ul>\n<h3 id=\"极值异常值\">极值/异常值</h3>\n<ul>\n<li>检查数据情况：<code>data.describe().astype(np.int64).T</code></li>\n<li>替换异常值：<code>data.replace([max, min],data['col'].mean())</code></li>\n</ul>\n<h3 id=\"数据格式\">数据格式</h3>\n<ul>\n<li>数值类型转换：<code>data['col1'] = data['col1'].astype(np.int64)</code></li>\n<li>日期格式：<code>data['time'] = pd.to_datetime(data['time'])</code></li>\n</ul>\n<h2 id=\"数据处理\">数据处理</h2>\n<h3 id=\"统计-1\">统计</h3>\n<ul>\n<li>字符数：<code>string.count(\" \")</code></li>\n<li><code>pd.value_counts(x)</code></li>\n</ul>\n<h3 id=\"排序\">排序</h3>\n<ul>\n<li><code>df.sort_values(by = \"a\", ascending = False)</code></li>\n</ul>\n<h3 id=\"新增赋值数据\">新增/赋值数据</h3>\n<ul>\n<li>新增/赋值行：<code>df.loc['raw'] = value</code></li>\n<li>新增/赋值列：<code>df['column'] = value</code></li>\n<li>单个数据\n<ul>\n<li><code>df.loc[index,'column'] = value</code></li>\n<li><code>df.insert(idx, 'column', value)</code></li>\n</ul></li>\n</ul>\n<h3 id=\"column重命名\">Column重命名</h3>\n<ul>\n<li><code>df.rename(columns=&#123;'col':'new_col'&#125;,inplace=True)</code></li>\n</ul>\n<h3 id=\"类型转换\">类型转换</h3>\n<ul>\n<li><p>Str to Float: <code>pd.to_numeric(df)</code>/<code>df.apply(pd.to_numeric)</code></p></li>\n<li><p>DataFrame to List：首先使用np.array()函数把DataFrame转化为np.ndarray()，再利用tolist()函数把np.ndarray()转为list</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = pd.read_csv(<span class=\"string\">&quot;a.csv&quot;</span>)</span><br><span class=\"line\">data_array = np.array(data)</span><br><span class=\"line\">data_list = data_array.tolist()</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"运算\">运算</h3>\n<ul>\n<li><p>单列运算：<code>map()</code>函数，用于<strong>Series对象</strong>（或DataFrame对象的一列），接收函数作为或字典对象作为参数，返回经过函数或字典映射处理后的值。例：对a['text']列中的每一项进行分句：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[<span class=\"string\">&#x27;text&#x27;</span>] = a[<span class=\"string\">&#x27;text&#x27;</span>].<span class=\"built_in\">map</span>(<span class=\"keyword\">lambda</span> x:sent_tokenize(x))</span><br></pre></td></tr></table></figure></li>\n<li><p>多列运算：<code>apply()</code>函数，用于<strong>DataFrame对象</strong>。col3 = col1 + col2</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[<span class=\"string\">&#x27;col3&#x27;</span>] = a.apply(<span class=\"keyword\">lambda</span> x: x[<span class=\"string\">&#x27;col1&#x27;</span>] + x[<span class=\"string\">&#x27;col2&#x27;</span>], axis=<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure></li>\n<li><p>平均值：mean(axis=1)</p>\n<ul>\n<li><strong>axis</strong>: along which the means are computed. <code>axis=0</code> means along index, <code>axis=1</code> means along colunms.</li>\n</ul></li>\n</ul>\n<h3 id=\"遍历列\">遍历列</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> index, row <span class=\"keyword\">in</span> df.iterrows():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(row[<span class=\"string\">&quot;c1&quot;</span>], row[<span class=\"string\">&quot;c2&quot;</span>])</span><br></pre></td></tr></table></figure>\n<h3 id=\"分组-groupby\">分组 groupby</h3>\n<ul>\n<li><p>使用<code>cut()</code>函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interval = [<span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>, <span class=\"number\">20</span>]  <span class=\"comment\">#根据数值大小分区间</span></span><br><span class=\"line\">group_name = [<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>, <span class=\"string\">&#x27;D&#x27;</span>, <span class=\"string\">&#x27;E&#x27;</span>]</span><br><span class=\"line\">data[<span class=\"string\">&#x27;categories&#x27;</span>] = pd.cut(data[<span class=\"string\">&#x27;col2&#x27;</span>], interval, labels = group_names)</span><br></pre></td></tr></table></figure></li>\n<li><p>使用<code>groupby()</code>，<code>transform()</code>函数</p>\n<ul>\n<li>分组后每组的size： <code>df.groupby('type').size()</code></li>\n<li>按A列分组，获取<strong>其他列</strong>的均值：<code>df.groupby('A').mean()</code></li>\n<li>根据<code>type</code>列将数据分组后，对组内<code>col</code>的值进行求和。 <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>df.groupby(<span class=\"string\">&#x27;type&#x27;</span>)[<span class=\"string\">&quot;col&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\"><span class=\"built_in\">type</span></span><br><span class=\"line\"><span class=\"number\">1</span>     <span class=\"number\">12.0</span></span><br><span class=\"line\"><span class=\"number\">2</span>     <span class=\"number\">23.1</span></span><br><span class=\"line\"><span class=\"number\">3</span>     <span class=\"number\">34.2</span></span><br><span class=\"line\">Name: col, dtype: float64</span><br></pre></td></tr></table></figure></li>\n<li>根据<code>type</code>列将数据分组后，对组内<code>col</code>的值进行多种计算。 <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df.groupby(<span class=\"string\">&#x27;type&#x27;</span>)[<span class=\"string\">&#x27;col&#x27;</span>].agg(&#123;<span class=\"string\">&#x27;sum&#x27;</span>,<span class=\"string\">&#x27;size&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></li>\n<li>添加一列数据，其按类显示每行数据<code>col</code>占总数的百分比 <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[<span class=\"string\">&#x27;percentage&#x27;</span>] = a.groupby(<span class=\"string\">&#x27;type&#x27;</span>)[<span class=\"string\">&#x27;col&#x27;</span>].transform(<span class=\"keyword\">lambda</span> x: x / x.<span class=\"built_in\">sum</span>())</span><br></pre></td></tr></table></figure></li>\n</ul></li>\n</ul>\n<h3 id=\"合并-merge\">合并 <a href=\"https://pandas-docs.github.io/pandas-docs-travis/user_guide/merging.html#brief-primer-on-merge-methods-relational-algebra\">merge</a></h3>\n<ul>\n<li><p>Merge on one key：<code>pd.merge(left,right)</code></p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>left</span><br><span class=\"line\">    A   B key</span><br><span class=\"line\"><span class=\"number\">0</span>  A0  B0  K0</span><br><span class=\"line\"><span class=\"number\">1</span>  A1  B1  K1</span><br><span class=\"line\"><span class=\"number\">2</span>  A2  B2  K2</span><br><span class=\"line\"><span class=\"number\">3</span>  A3  B3  K3</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>right</span><br><span class=\"line\">    C   D key</span><br><span class=\"line\"><span class=\"number\">0</span>  C0  D0  K0</span><br><span class=\"line\"><span class=\"number\">1</span>  C1  D1  K1</span><br><span class=\"line\"><span class=\"number\">2</span>  C2  D2  K2</span><br><span class=\"line\"><span class=\"number\">3</span>  C3  D3  K3</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>pd.merge(left,right)</span><br><span class=\"line\">    A   B key   C   D</span><br><span class=\"line\"><span class=\"number\">0</span>  A0  B0  K0  C0  D0</span><br><span class=\"line\"><span class=\"number\">1</span>  A1  B1  K1  C1  D1</span><br><span class=\"line\"><span class=\"number\">2</span>  A2  B2  K2  C2  D2</span><br><span class=\"line\"><span class=\"number\">3</span>  A3  B3  K3  C3  D3</span><br></pre></td></tr></table></figure></p></li>\n<li><p>Merge on two keys:</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>left</span><br><span class=\"line\">    A   B key1 key2</span><br><span class=\"line\"><span class=\"number\">0</span>  A0  B0   K0   K0</span><br><span class=\"line\"><span class=\"number\">1</span>  A1  B1   K1   K1</span><br><span class=\"line\"><span class=\"number\">2</span>  A2  B2   K2   K2</span><br><span class=\"line\"><span class=\"number\">3</span>  A3  B3   K3   K3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>right</span><br><span class=\"line\">    C   D key1 key3</span><br><span class=\"line\"><span class=\"number\">0</span>  C0  D0   K0   K0</span><br><span class=\"line\"><span class=\"number\">1</span>  C1  D1   K1   K1</span><br><span class=\"line\"><span class=\"number\">2</span>  C2  D2   K2   K2</span><br><span class=\"line\"><span class=\"number\">3</span>  C3  D3   K3   K4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>pd.merge(left, right, on = <span class=\"string\">&#x27;key2&#x27;</span>,suffixes=[<span class=\"string\">&#x27;_left&#x27;</span>,<span class=\"string\">&#x27;_right&#x27;</span>])\t<span class=\"comment\">#默认合并方式how=&quot;inner&quot;</span></span><br><span class=\"line\">    A   B key1_left key2   C   D key1_right</span><br><span class=\"line\"><span class=\"number\">0</span>  A0  B0        K0   K0  C0  D0         K0</span><br><span class=\"line\"><span class=\"number\">1</span>  A1  B1        K1   K1  C1  D1         K1</span><br><span class=\"line\"><span class=\"number\">2</span>  A2  B2        K2   K2  C2  D2         K2</span><br></pre></td></tr></table></figure></p></li>\n<li><p>若合并的两个对象的列名不同，可以单独指定: <code>pd.merge(left, right, left_on='key1',right_on='key2')</code></p>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; pd.merge(left, right, on=[<span class=\"string\">&#x27;key1&#x27;</span>,<span class=\"string\">&#x27;key2&#x27;</span>])</span></span><br><span class=\"line\">    A   B key1 key2   C   D</span><br><span class=\"line\">0  A0  B0   K0   K0  C0  D0</span><br><span class=\"line\">1  A1  B1   K1   K1  C1  D1</span><br><span class=\"line\">2  A2  B2   K2   K2  C2  D2</span><br><span class=\"line\"><span class=\"meta\">  </span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; pd.merge(left, right, on = [<span class=\"string\">&#x27;key1&#x27;</span>, <span class=\"string\">&#x27;key2&#x27;</span>], how = <span class=\"string\">&#x27;left&#x27;</span>, indicator = True) <span class=\"comment\">#indicator展示合并方式</span></span></span><br><span class=\"line\">    A   B key1 key2    C    D     _merge</span><br><span class=\"line\">0  A0  B0   K0   K0   C0   D0       both</span><br><span class=\"line\">1  A1  B1   K1   K1   C1   D1       both</span><br><span class=\"line\">2  A2  B2   K2   K2   C2   D2       both</span><br><span class=\"line\">3  A3  B3   K3   K3  NaN  NaN  left_only</span><br></pre></td></tr></table></figure></p></li>\n<li><p>right on index合并： <code>pd.merge(left,right,right_index=True,left_on=['key'])</code></p></li>\n</ul>\n<h3 id=\"导出数据-csv\">导出数据 csv</h3>\n<ul>\n<li><code>df.to_csv('data.csv')</code></li>\n<li><code>df.to_csv('data.csv',header=0,index=0)</code>不保留列名，索引</li>\n</ul>\n<h2 id=\"作图plot\">作图plot</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pd.plot(*args, **kwargs)</span><br></pre></td></tr></table></figure>\n<p>重要参数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DataFrame.plot(x=<span class=\"literal\">None</span>, y=<span class=\"literal\">None</span>, kind=<span class=\"string\">&#x27;line&#x27;</span>, ax=<span class=\"literal\">None</span>, subplots=<span class=\"literal\">False</span>, sharex=<span class=\"literal\">None</span>, sharey=<span class=\"literal\">False</span>, layout=<span class=\"literal\">None</span>,figsize=<span class=\"literal\">None</span>, use_index=<span class=\"literal\">True</span>, title=<span class=\"literal\">None</span>, grid=<span class=\"literal\">None</span>, legend=<span class=\"literal\">True</span>, style=<span class=\"literal\">None</span>, logx=<span class=\"literal\">False</span>, logy=<span class=\"literal\">False</span>, loglog=<span class=\"literal\">False</span>, xticks=<span class=\"literal\">None</span>, yticks=<span class=\"literal\">None</span>, xlim=<span class=\"literal\">None</span>, ylim=<span class=\"literal\">None</span>, rot=<span class=\"literal\">None</span>,xerr=<span class=\"literal\">None</span>,secondary_y=<span class=\"literal\">False</span>, sort_columns=<span class=\"literal\">False</span>, **kwds)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>logx / logy：设置坐标轴刻度是否取对数，boolean</li>\n<li>xlim / ylim：设置坐标轴范围，2-tuple/list</li>\n<li>linestyle：可取：\":\", \"--\", \"-.\", \"-\"</li>\n</ul>\n<h2 id=\"references\">References</h2>\n<ul>\n<li><a href=\"http://noahsnail.com/2017/04/29/2017-4-29-pandas%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95(%E4%B8%83)%E2%80%94%E2%80%94%E5%90%88%E5%B9%B6%E6%95%B0%E6%8D%AEmerge/\">pandas的基本用法(七)——合并数据merge</a></li>\n<li><a href=\"http://bluewhale.cc/2016-08-21/python-data-cleaning.html\">使用python进行数据清洗</a></li>\n<li><a href=\"https://www.cnblogs.com/lemonbit/p/6810972.html\">Pandas分组运算（groupby）修炼</a></li>\n<li><a href=\"https://blog.csdn.net/brucewong0516/article/details/80524442\">详解pandas.DataFrame.plot()</a></li>\n</ul>\n","site":{"data":{"projects":[{"name":"PDF2Audio","url":"Convert PDFs to Audiobooks with Machine Learning","desc":"Convert PDFs to Audiobooks with Machine Learning"},{"name":"Alfred PKManager","url":"https://github.com/Konfido/alfred-pkmanager","desc":"A handful Alfred Workflow which helps searching and managing your Personal Knowledge Markdown notes."}]}},"excerpt":"","more":"<h2 id=\"数据选取-pandas.dateframe\">数据选取 pandas.DateFrame</h2>\n<h3 id=\"读取\">读取</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; a = pd.read_csv(<span class=\"string\">&#x27;datasets/results.csv&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; a = a.drop([1,3],axis=0)</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; a</span></span><br><span class=\"line\">         date home_team   away_team  home_score  away_score</span><br><span class=\"line\">0  2018-06-03   Andorra  Cape Verde           0           0</span><br><span class=\"line\">2  2018-06-03  Zimbabwe    Botswana           1           1</span><br><span class=\"line\">4  2018-06-04    Serbia       Chile           0           1</span><br><span class=\"line\">5  2018-06-04  Slovakia     Morocco           1           2</span><br><span class=\"line\">6  2018-06-04   Armenia     Moldova           0           0</span><br><span class=\"line\">7  2018-06-04     India       Kenya           3           0</span><br><span class=\"line\">8  2018-06-05    Russia      Turkey           1           1</span><br><span class=\"line\">9  2018-06-05   Romania     Finland           2           0</span><br></pre></td></tr></table></figure>\n<h3 id=\"生成转成dataframe\">生成（转成DataFrame）</h3>\n<ul>\n<li><code>df = pd.DataFrame([[1,1],[2,2]])</code></li>\n</ul>\n<h3 id=\"统计\">统计</h3>\n<ul>\n<li>列数：<code>df.shape[1]</code></li>\n<li>行数：<code>df.shape[0]</code></li>\n<li>相同的个数：<code>df['id'].value_counts()</code></li>\n</ul>\n<h3 id=\"行选择\">行选择</h3>\n<ul>\n<li><code>df.head()/df.tail()</code> 展示前/后5行样例 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; a.head()</span></span><br><span class=\"line\">         date home_team   away_team  home_score  away_score</span><br><span class=\"line\">0  2018-06-03   Andorra  Cape Verde           0           0</span><br><span class=\"line\">2  2018-06-03  Zimbabwe    Botswana           1           1</span><br><span class=\"line\">4  2018-06-04    Serbia       Chile           0           1</span><br><span class=\"line\">5  2018-06-04  Slovakia     Morocco           1           2</span><br><span class=\"line\">6  2018-06-04   Armenia     Moldova           0           0</span><br></pre></td></tr></table></figure></li>\n<li><code>slicing</code> 切片 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; a[1:3]</span></span><br><span class=\"line\">         date home_team away_team  home_score  away_score</span><br><span class=\"line\">2  2018-06-03  Zimbabwe  Botswana           1           1</span><br><span class=\"line\">4  2018-06-04    Serbia     Chile           0           1</span><br></pre></td></tr></table></figure></li>\n<li><code>loc[ ]</code> 按数据标注的index选取,选取的结果包含下界 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; a.loc[5:6]</span></span><br><span class=\"line\">         date home_team away_team  home_score  away_score</span><br><span class=\"line\">5  2018-06-04  Slovakia   Morocco           1           2</span><br><span class=\"line\">6  2018-06-04   Armenia   Moldova           0           0</span><br></pre></td></tr></table></figure></li>\n<li><code>iloc[ ]</code> 按数据从0开始的实际index选取，且选取结果不包含下界。 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; a.iloc[3:5]</span></span><br><span class=\"line\">         date home_team away_team  home_score  away_score</span><br><span class=\"line\">5  2018-06-04  Slovakia   Morocco           1           2</span><br><span class=\"line\">6  2018-06-04   Armenia   Moldova           0           0</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"列选择\">列选择</h3>\n<ul>\n<li>按列名选取 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; a[[<span class=\"string\">&#x27;date&#x27;</span>,<span class=\"string\">&#x27;home_team&#x27;</span>]]</span></span><br><span class=\"line\">         date home_team</span><br><span class=\"line\">0  2018-06-03   Andorra</span><br><span class=\"line\">2  2018-06-03  Zimbabwe</span><br><span class=\"line\">4  2018-06-04    Serbia</span><br><span class=\"line\">5  2018-06-04  Slovakia</span><br><span class=\"line\">6  2018-06-04   Armenia</span><br><span class=\"line\">7  2018-06-04     India</span><br><span class=\"line\">8  2018-06-05    Russia</span><br><span class=\"line\">9  2018-06-05   Romania</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"删除列\">删除列</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df.drop([<span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>], axis=<span class=\"number\">1</span>)</span><br><span class=\"line\">df.drop(columns=[<span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除行\">删除行</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df.drop([<span class=\"number\">0</span>, <span class=\"number\">1</span>]) \t<span class=\"comment\"># 默认axis=0</span></span><br><span class=\"line\">df.drop(index=[<span class=\"number\">0</span>, <span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n<h3 id=\"选取数据\">选取数据</h3>\n<h4 id=\"按条件选取\">按条件选取</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>df[df[<span class=\"string\">&#x27;ip_address&#x27;</span>]==<span class=\"string\">&quot;213.234.238.52&quot;</span>]</span><br><span class=\"line\">    ip_address\t\tport\tprotocal    country\tanonymous\tresponse</span><br><span class=\"line\"><span class=\"number\">0</span>   <span class=\"number\">213.234</span><span class=\"number\">.238</span><span class=\"number\">.52</span>\t<span class=\"number\">8080.0</span>\tHTTPS\t    Russia\tTransparent\t<span class=\"number\">3407</span> ms</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.loc[a[<span class=\"string\">&#x27;date&#x27;</span>]&gt;<span class=\"string\">&#x27;2018-06-04&#x27;</span>]</span><br><span class=\"line\">         date home_team away_team  home_score  away_score</span><br><span class=\"line\"><span class=\"number\">8</span>  <span class=\"number\">2018</span>-06-05    Russia    Turkey           <span class=\"number\">1</span>           <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">9</span>  <span class=\"number\">2018</span>-06-05   Romania   Finland           <span class=\"number\">2</span>           <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = a.loc[(a[<span class=\"string\">&#x27;date&#x27;</span>]==<span class=\"string\">&#x27;2018-06-04&#x27;</span>)&amp;(a[<span class=\"string\">&#x27;home_team&#x27;</span>]==<span class=\"string\">&#x27;Slovakia&#x27;</span>)]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b</span><br><span class=\"line\">         date home_team away_team  home_score  away_score</span><br><span class=\"line\"><span class=\"number\">5</span>  <span class=\"number\">2018</span>-06-04  Slovakia   Morocco           <span class=\"number\">1</span>           <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"由具体值选取\">由具体值选取</h4>\n<ul>\n<li><code>.values</code> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; b[&#x27;away_team&#x27;].values[0]</span><br><span class=\"line\">&#x27;Morocco&#x27;</span><br></pre></td></tr></table></figure></li>\n<li><code>loc[]</code> <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; a.loc[4,<span class=\"string\">&#x27;date&#x27;</span>]</span></span><br><span class=\"line\">&#x27;2018-06-04&#x27;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"数据清洗\">数据清洗</h2>\n<h3 id=\"重复值\">重复值</h3>\n<ul>\n<li>查找重复值：<code>data.duplicated()</code></li>\n<li>删除重复值：<code>data.drop_duplicates()</code></li>\n</ul>\n<h3 id=\"空值\">空值</h3>\n<ul>\n<li>Note: 在pandas中空值显示为NaN</li>\n<li>空值：<code>data.isnull()</code></li>\n<li>非空值：\n<ul>\n<li>dataframe: <code>df.notna()</code></li>\n<li>float: <code>np.isnan()</code></li>\n</ul></li>\n<li>空值数量：<code>data['column'].isnull().value_counts()</code></li>\n<li>处理空值：\n<ul>\n<li>填充：\n<ul>\n<li>填充0：<code>data.fillna(0)</code></li>\n<li>用字典对不同列填充：<code>data.fillna(&#123;'col1':0,'col2':1&#125;)</code></li>\n</ul></li>\n<li>删除：\n<ul>\n<li>删除全部为NaN的行：<code>data.dropna(axis=0, how='all'))</code></li>\n<li>删除在列名为\"age\"和\"sex\"中有NaN的行<code>df.dropna(subset=[\"age\", \"sex\"])</code></li>\n<li>删除任何含有NaN的列：<code>data.dropna(axis=1, how='any')</code></li>\n</ul></li>\n</ul></li>\n</ul>\n<h3 id=\"空格\">空格</h3>\n<ul>\n<li>用null替代空格\n<ul>\n<li><code>df[\"VIN\"]=df[\"VIN\"].apply(lambda x: np.NaN if str(x).isspace() else x)</code></li>\n</ul></li>\n<li>去除数据间的空格：\n<ul>\n<li><code>a['column'] = a['column'].map(str.strip)</code></li>\n<li><code>a['column'] = a['column'].map(str.lstrip)</code></li>\n<li><code>a['column'] = a['column'].map(str.rstrip)</code></li>\n</ul></li>\n</ul>\n<h3 id=\"大小写\">大小写</h3>\n<ul>\n<li>全部大写：<code>a['column'] = a['column'].map(str.upper)</code></li>\n<li>全部小写：<code>a['column'] = a['column'].map(str.lower)</code></li>\n<li>首字母大写：<code>a['column'] = a['column'].map(str.title)</code></li>\n</ul>\n<h3 id=\"极值异常值\">极值/异常值</h3>\n<ul>\n<li>检查数据情况：<code>data.describe().astype(np.int64).T</code></li>\n<li>替换异常值：<code>data.replace([max, min],data['col'].mean())</code></li>\n</ul>\n<h3 id=\"数据格式\">数据格式</h3>\n<ul>\n<li>数值类型转换：<code>data['col1'] = data['col1'].astype(np.int64)</code></li>\n<li>日期格式：<code>data['time'] = pd.to_datetime(data['time'])</code></li>\n</ul>\n<h2 id=\"数据处理\">数据处理</h2>\n<h3 id=\"统计-1\">统计</h3>\n<ul>\n<li>字符数：<code>string.count(\" \")</code></li>\n<li><code>pd.value_counts(x)</code></li>\n</ul>\n<h3 id=\"排序\">排序</h3>\n<ul>\n<li><code>df.sort_values(by = \"a\", ascending = False)</code></li>\n</ul>\n<h3 id=\"新增赋值数据\">新增/赋值数据</h3>\n<ul>\n<li>新增/赋值行：<code>df.loc['raw'] = value</code></li>\n<li>新增/赋值列：<code>df['column'] = value</code></li>\n<li>单个数据\n<ul>\n<li><code>df.loc[index,'column'] = value</code></li>\n<li><code>df.insert(idx, 'column', value)</code></li>\n</ul></li>\n</ul>\n<h3 id=\"column重命名\">Column重命名</h3>\n<ul>\n<li><code>df.rename(columns=&#123;'col':'new_col'&#125;,inplace=True)</code></li>\n</ul>\n<h3 id=\"类型转换\">类型转换</h3>\n<ul>\n<li><p>Str to Float: <code>pd.to_numeric(df)</code>/<code>df.apply(pd.to_numeric)</code></p></li>\n<li><p>DataFrame to List：首先使用np.array()函数把DataFrame转化为np.ndarray()，再利用tolist()函数把np.ndarray()转为list</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = pd.read_csv(<span class=\"string\">&quot;a.csv&quot;</span>)</span><br><span class=\"line\">data_array = np.array(data)</span><br><span class=\"line\">data_list = data_array.tolist()</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"运算\">运算</h3>\n<ul>\n<li><p>单列运算：<code>map()</code>函数，用于<strong>Series对象</strong>（或DataFrame对象的一列），接收函数作为或字典对象作为参数，返回经过函数或字典映射处理后的值。例：对a['text']列中的每一项进行分句：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[<span class=\"string\">&#x27;text&#x27;</span>] = a[<span class=\"string\">&#x27;text&#x27;</span>].<span class=\"built_in\">map</span>(<span class=\"keyword\">lambda</span> x:sent_tokenize(x))</span><br></pre></td></tr></table></figure></li>\n<li><p>多列运算：<code>apply()</code>函数，用于<strong>DataFrame对象</strong>。col3 = col1 + col2</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[<span class=\"string\">&#x27;col3&#x27;</span>] = a.apply(<span class=\"keyword\">lambda</span> x: x[<span class=\"string\">&#x27;col1&#x27;</span>] + x[<span class=\"string\">&#x27;col2&#x27;</span>], axis=<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure></li>\n<li><p>平均值：mean(axis=1)</p>\n<ul>\n<li><strong>axis</strong>: along which the means are computed. <code>axis=0</code> means along index, <code>axis=1</code> means along colunms.</li>\n</ul></li>\n</ul>\n<h3 id=\"遍历列\">遍历列</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> index, row <span class=\"keyword\">in</span> df.iterrows():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(row[<span class=\"string\">&quot;c1&quot;</span>], row[<span class=\"string\">&quot;c2&quot;</span>])</span><br></pre></td></tr></table></figure>\n<h3 id=\"分组-groupby\">分组 groupby</h3>\n<ul>\n<li><p>使用<code>cut()</code>函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interval = [<span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>, <span class=\"number\">20</span>]  <span class=\"comment\">#根据数值大小分区间</span></span><br><span class=\"line\">group_name = [<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>, <span class=\"string\">&#x27;D&#x27;</span>, <span class=\"string\">&#x27;E&#x27;</span>]</span><br><span class=\"line\">data[<span class=\"string\">&#x27;categories&#x27;</span>] = pd.cut(data[<span class=\"string\">&#x27;col2&#x27;</span>], interval, labels = group_names)</span><br></pre></td></tr></table></figure></li>\n<li><p>使用<code>groupby()</code>，<code>transform()</code>函数</p>\n<ul>\n<li>分组后每组的size： <code>df.groupby('type').size()</code></li>\n<li>按A列分组，获取<strong>其他列</strong>的均值：<code>df.groupby('A').mean()</code></li>\n<li>根据<code>type</code>列将数据分组后，对组内<code>col</code>的值进行求和。 <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>df.groupby(<span class=\"string\">&#x27;type&#x27;</span>)[<span class=\"string\">&quot;col&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\"><span class=\"built_in\">type</span></span><br><span class=\"line\"><span class=\"number\">1</span>     <span class=\"number\">12.0</span></span><br><span class=\"line\"><span class=\"number\">2</span>     <span class=\"number\">23.1</span></span><br><span class=\"line\"><span class=\"number\">3</span>     <span class=\"number\">34.2</span></span><br><span class=\"line\">Name: col, dtype: float64</span><br></pre></td></tr></table></figure></li>\n<li>根据<code>type</code>列将数据分组后，对组内<code>col</code>的值进行多种计算。 <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df.groupby(<span class=\"string\">&#x27;type&#x27;</span>)[<span class=\"string\">&#x27;col&#x27;</span>].agg(&#123;<span class=\"string\">&#x27;sum&#x27;</span>,<span class=\"string\">&#x27;size&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></li>\n<li>添加一列数据，其按类显示每行数据<code>col</code>占总数的百分比 <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[<span class=\"string\">&#x27;percentage&#x27;</span>] = a.groupby(<span class=\"string\">&#x27;type&#x27;</span>)[<span class=\"string\">&#x27;col&#x27;</span>].transform(<span class=\"keyword\">lambda</span> x: x / x.<span class=\"built_in\">sum</span>())</span><br></pre></td></tr></table></figure></li>\n</ul></li>\n</ul>\n<h3 id=\"合并-merge\">合并 <a href=\"https://pandas-docs.github.io/pandas-docs-travis/user_guide/merging.html#brief-primer-on-merge-methods-relational-algebra\">merge</a></h3>\n<ul>\n<li><p>Merge on one key：<code>pd.merge(left,right)</code></p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>left</span><br><span class=\"line\">    A   B key</span><br><span class=\"line\"><span class=\"number\">0</span>  A0  B0  K0</span><br><span class=\"line\"><span class=\"number\">1</span>  A1  B1  K1</span><br><span class=\"line\"><span class=\"number\">2</span>  A2  B2  K2</span><br><span class=\"line\"><span class=\"number\">3</span>  A3  B3  K3</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>right</span><br><span class=\"line\">    C   D key</span><br><span class=\"line\"><span class=\"number\">0</span>  C0  D0  K0</span><br><span class=\"line\"><span class=\"number\">1</span>  C1  D1  K1</span><br><span class=\"line\"><span class=\"number\">2</span>  C2  D2  K2</span><br><span class=\"line\"><span class=\"number\">3</span>  C3  D3  K3</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>pd.merge(left,right)</span><br><span class=\"line\">    A   B key   C   D</span><br><span class=\"line\"><span class=\"number\">0</span>  A0  B0  K0  C0  D0</span><br><span class=\"line\"><span class=\"number\">1</span>  A1  B1  K1  C1  D1</span><br><span class=\"line\"><span class=\"number\">2</span>  A2  B2  K2  C2  D2</span><br><span class=\"line\"><span class=\"number\">3</span>  A3  B3  K3  C3  D3</span><br></pre></td></tr></table></figure></p></li>\n<li><p>Merge on two keys:</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>left</span><br><span class=\"line\">    A   B key1 key2</span><br><span class=\"line\"><span class=\"number\">0</span>  A0  B0   K0   K0</span><br><span class=\"line\"><span class=\"number\">1</span>  A1  B1   K1   K1</span><br><span class=\"line\"><span class=\"number\">2</span>  A2  B2   K2   K2</span><br><span class=\"line\"><span class=\"number\">3</span>  A3  B3   K3   K3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>right</span><br><span class=\"line\">    C   D key1 key3</span><br><span class=\"line\"><span class=\"number\">0</span>  C0  D0   K0   K0</span><br><span class=\"line\"><span class=\"number\">1</span>  C1  D1   K1   K1</span><br><span class=\"line\"><span class=\"number\">2</span>  C2  D2   K2   K2</span><br><span class=\"line\"><span class=\"number\">3</span>  C3  D3   K3   K4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>pd.merge(left, right, on = <span class=\"string\">&#x27;key2&#x27;</span>,suffixes=[<span class=\"string\">&#x27;_left&#x27;</span>,<span class=\"string\">&#x27;_right&#x27;</span>])\t<span class=\"comment\">#默认合并方式how=&quot;inner&quot;</span></span><br><span class=\"line\">    A   B key1_left key2   C   D key1_right</span><br><span class=\"line\"><span class=\"number\">0</span>  A0  B0        K0   K0  C0  D0         K0</span><br><span class=\"line\"><span class=\"number\">1</span>  A1  B1        K1   K1  C1  D1         K1</span><br><span class=\"line\"><span class=\"number\">2</span>  A2  B2        K2   K2  C2  D2         K2</span><br></pre></td></tr></table></figure></p></li>\n<li><p>若合并的两个对象的列名不同，可以单独指定: <code>pd.merge(left, right, left_on='key1',right_on='key2')</code></p>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; pd.merge(left, right, on=[<span class=\"string\">&#x27;key1&#x27;</span>,<span class=\"string\">&#x27;key2&#x27;</span>])</span></span><br><span class=\"line\">    A   B key1 key2   C   D</span><br><span class=\"line\">0  A0  B0   K0   K0  C0  D0</span><br><span class=\"line\">1  A1  B1   K1   K1  C1  D1</span><br><span class=\"line\">2  A2  B2   K2   K2  C2  D2</span><br><span class=\"line\"><span class=\"meta\">  </span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; pd.merge(left, right, on = [<span class=\"string\">&#x27;key1&#x27;</span>, <span class=\"string\">&#x27;key2&#x27;</span>], how = <span class=\"string\">&#x27;left&#x27;</span>, indicator = True) <span class=\"comment\">#indicator展示合并方式</span></span></span><br><span class=\"line\">    A   B key1 key2    C    D     _merge</span><br><span class=\"line\">0  A0  B0   K0   K0   C0   D0       both</span><br><span class=\"line\">1  A1  B1   K1   K1   C1   D1       both</span><br><span class=\"line\">2  A2  B2   K2   K2   C2   D2       both</span><br><span class=\"line\">3  A3  B3   K3   K3  NaN  NaN  left_only</span><br></pre></td></tr></table></figure></p></li>\n<li><p>right on index合并： <code>pd.merge(left,right,right_index=True,left_on=['key'])</code></p></li>\n</ul>\n<h3 id=\"导出数据-csv\">导出数据 csv</h3>\n<ul>\n<li><code>df.to_csv('data.csv')</code></li>\n<li><code>df.to_csv('data.csv',header=0,index=0)</code>不保留列名，索引</li>\n</ul>\n<h2 id=\"作图plot\">作图plot</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pd.plot(*args, **kwargs)</span><br></pre></td></tr></table></figure>\n<p>重要参数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DataFrame.plot(x=<span class=\"literal\">None</span>, y=<span class=\"literal\">None</span>, kind=<span class=\"string\">&#x27;line&#x27;</span>, ax=<span class=\"literal\">None</span>, subplots=<span class=\"literal\">False</span>, sharex=<span class=\"literal\">None</span>, sharey=<span class=\"literal\">False</span>, layout=<span class=\"literal\">None</span>,figsize=<span class=\"literal\">None</span>, use_index=<span class=\"literal\">True</span>, title=<span class=\"literal\">None</span>, grid=<span class=\"literal\">None</span>, legend=<span class=\"literal\">True</span>, style=<span class=\"literal\">None</span>, logx=<span class=\"literal\">False</span>, logy=<span class=\"literal\">False</span>, loglog=<span class=\"literal\">False</span>, xticks=<span class=\"literal\">None</span>, yticks=<span class=\"literal\">None</span>, xlim=<span class=\"literal\">None</span>, ylim=<span class=\"literal\">None</span>, rot=<span class=\"literal\">None</span>,xerr=<span class=\"literal\">None</span>,secondary_y=<span class=\"literal\">False</span>, sort_columns=<span class=\"literal\">False</span>, **kwds)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>logx / logy：设置坐标轴刻度是否取对数，boolean</li>\n<li>xlim / ylim：设置坐标轴范围，2-tuple/list</li>\n<li>linestyle：可取：\":\", \"--\", \"-.\", \"-\"</li>\n</ul>\n<h2 id=\"references\">References</h2>\n<ul>\n<li><a href=\"http://noahsnail.com/2017/04/29/2017-4-29-pandas%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95(%E4%B8%83)%E2%80%94%E2%80%94%E5%90%88%E5%B9%B6%E6%95%B0%E6%8D%AEmerge/\">pandas的基本用法(七)——合并数据merge</a></li>\n<li><a href=\"http://bluewhale.cc/2016-08-21/python-data-cleaning.html\">使用python进行数据清洗</a></li>\n<li><a href=\"https://www.cnblogs.com/lemonbit/p/6810972.html\">Pandas分组运算（groupby）修炼</a></li>\n<li><a href=\"https://blog.csdn.net/brucewong0516/article/details/80524442\">详解pandas.DataFrame.plot()</a></li>\n</ul>\n"},{"title":"PDF2Audio - Convert PDFs to Audiobooks with Machine Learning","alias":[],"typora-copy-images-to":"../images","date":"2021-04-15T01:51:56.000Z","updated":"2021-05-17T19:04:07.000Z","blogged":true,"urlname":"Convert-PDFs-to-Audiobooks-with-Machine-Learning","_content":"\n\n\n## What & Why?\n\n- The other day, while I was wondering and searching if it's possible to convert research papers (PDF file) into audiobooks, which then could be well utilized on my way to the Lab or canteen, the following two articles caught my attention.\n    - Dale Markowitz: [Convert PDFs to Audiobooks with Machine Learning](https://daleonai.com/pdf-to-audiobook)\n    - 佐藤一憲 Kazunori Sato：[〜AutoMLで実践する〜 ビジネスユーザーのための機械学習入門シリーズ 【第 3 回】 「積ん読」と「体重増」の悩みを AutoML で解決しよう](https://cloud.google.com/blog/ja/products/ai-machine-learning/practical-machine-learning-with-automl-series-3)\n\n- Here is an example clip of the generated audio:\n\n    <audio style=\"height: 40px;\" src=\"../images/20210518030009000.mp3\" controls=\"\" preload=\"metadata\"></audio>\n\n- The main converting process (from [Kazunori](https://cloud.google.com/blog/ja/products/ai-machine-learning/practical-machine-learning-with-automl-series-3))\n\n    <img src=\"../images/20210430113414677.png\" width=90%/>\n\n- The [article](https://cloud.google.com/blog/ja/products/ai-machine-learning/practical-machine-learning-with-automl-series-3) and [code](https://github.com/kazunori279/pdf2audiobook) of Kazunori Sato are great and helped me a lot in understanding the general method and process, but they unfortunately didn't provide much information on what exactly procedures I should perform on each step. After working on it for a few days, I managed to accomplish this project and archive my initial purpose. I wrote this blog as a guide to elaborate the required operations, hoping it could help you well.\n\n- And check out my code on [GitHub](https://github.com/Konfido/pdf2audiobook).\n\n## What Google services/APIs are we gonna use?\n\n- [Cloud Storage](https://console.cloud.google.com/storage/browser): We will create a bucket to retain uploaded PDF and generated MP3 files.\n- [Cloud Functions](https://cloud.google.com/functions): Function-as-a-Service, used to describe the whole procedures.\n- [Vision API](https://cloud.google.com/vision): Cloud OCR which extract features (text, positions, size ...) of PDF\n- [AutoML Tables](https://cloud.google.com/automl)：Layout classification (detect and delete unnecessary strings)\n- [Text to Speech](https://cloud.google.com/text-to-speech): Speech synthesis\n- [Apps Script](https://developers.google.com/apps-script)：Annotation tool, easing the process of labelling dataset.\n\n## What can we finally achieve?\n\n- Once we upload a PDF file to the bucket, all functions will be triggered sequentially and a  MP3 file will be generated in the end.\n\n- We can also preset different voices for header, caption and the body of a paper, determining their accent, speed and pitch. And all parts will be naturally synthesized and merged together.\n\n## How to evaluate the final result?\n\n- It's awesome to see that AI can actually help in my routine life.\n\n- But the Google Vision API definitely has room for improvement. Specifically, the most significant problem is the usability for two-column papers. It only performs well for single-column ones, relatively.\n\n- And I overlooked a big issue that there are a lot of formulas in the papers. It usually take me a long time to understand them, let alone just hear some jumbled characters and symbols of them. So I lowered my expectations, only sought to understand general idea of the paper. And it works.\n\n\n\n## Step-by-step guide\n\n### 1. Create a Google Cloud project\n\n- Create a new project in [Cloud Platform console](https://console.cloud.google.com/)\n\n- Enable billing\n\n- Enable all APIs we intend to use!!\n    - Go to [API and Services](https://console.cloud.google.com/apis/dashboard)\n    - \"Dashboard\"\n        - Click  `+ Enable APIS AND SERVICES`\n        - Enable: Cloud Function API, Vision API, Cloud Build API, AutoML Tables, App Script API, Text-to-Speech API\n    - \"OAuth consent screen\"\n        - User Type: Make External\n        - Scope: https://cloud.googleapis.com/auth/devstorage.read_write\n        - Test User: your google email\n    - \"Credentials\": Prepare authorization for App Script to access Cloud Storage\n        - Click `Create credentials`: Choose \"OAuth Cliend ID\", and then \"Web application\"\n        - Copy \"Client ID\" and \"Client Secret\"\n\n### 2. Create a Bucket\n\n- Create bucket which will be used to store your uploaded pdf and generated audio.\n    - Go to [Cloud Storage](https://console.cloud.google.com/storage), click\"CREATE BUCKET\".\n\n- Configs\n    - Location: us-central1 (Be same with the following setting of cloud function, or it could go wrong when you perform AutoML.)\n    - Storage class: \"Standard\"\n    - Access control: \"Fine-grained\"! We need to manipulate objects' permissions in this project.\n\n### 3. Create a Cloud Funtion\n\n- Go to [Cloud Function](https://console.cloud.google.com/functions), create a function and config as the following.\n\n- Setting part:\n\n    - Region: us-central1\n    - Trigger type: Cloud Storage\n    - Event type: Finalise/Create\n    - Bucket: my_temp_bucket\n    - Memory > 2GiB (to avoid \"out of memory\" issues)\n    - Timeout: 540 seconds (It's time-consuming to merge mp3 fragments.)\n\n- Codes part:\n    - Copy the code of \"[main.py](https://github.com/Konfido/pdf2audiobook/blob/master/functions/app/main.py)\" and \"requirement.txt\" to corresponding places.\n    - Runtime: \"Python 3.7\", Entry point: \"p2a_gcs_trigger\"\n    - Modify some settings in \"main.py\"\n        ```python\n        ANOTATION_MODE = True\n        model_display_name = \"\" \t# Leave it blank for now\n        ```\n\n### 4. Create an Apps Script project\n\n- Go to [Apps Script](https://script.google.com/home), create a new project.\n\n- As Kazunori has created such a great [notation](https://github.com/kazunori279/pdf2audiobook/tree/master/functions/app) App, we can use it from the beginning, helping us to finish the initial training dataset labeling.\n\n- I modified Kazunori's code of Cloud Function so that once the Vision API complete the OCR procedure and generate a \"xxx-features.csv\" file, another function will be triggered to forge a \"xxx-labels.csv\" file by duplicating \"xxx-features.csv\" and automatically adding a \"label\" column to it. By default, any area with more 100 characters in its \"text\" will be pre-labelled as \"body\", and all other areas will be pre-labelled as \"other\".\n\n- Make API request to Google Cloud Storage\n  - Kazunori's [code](https://github.com/kazunori279/pdf2audiobook/blob/b21ccc1bd6e78a472bb01a353d5aa18c0dd1c405/apps-script/do_get.gs#L77) skips the credential part, but at the same time, it took me a lot effort into figuring out how to pass the credential, modifying the code and even writing another [blog](https://konfido.github.io/Request-to-Cloud-Storage-API-in-Apps-Script-with-OAuth2/) to elaborate on it. I doubt that I missed out something that complicated the whole process. (My assumption is that I only modify and deploy the Script in the web editor, but instead, he set up the environment of credential in shell session and used the command line tool [clasp](https://github.com/google/clasp) to create Script's deployment.) If you've tries the other method or know the right way to do it, please leave a comment below.\n  - From [what](https://cloud.google.com/storage/docs/authentication#oauth-flows) I know, the Cloud Storage uses OAuth2 protocol for API authentication and authorization. The access token can be found in [OAuth Playground](https://developers.google.com/oauthplayground/) which can be directly added to the Kazunori's code. Or you can modify the code, like I did, which will help you simplify the authentication process by providing a clickable \"Consent Screen\".\n  - If you want to use my [code](https://github.com/Konfido/pdf2audiobook/tree/master/apps-script), checkout my other [blog](https://konfido.github.io/Request-to-Cloud-Storage-API-in-Apps-Script-with-OAuth2/) on setting details. But if you want to use Kazunori's code, it just need a little modification to the \"fetch\" request in \"downloadLabels()\" function, which should looks like this:\n      ```javascript\n      // Code.gs\n      function downloadLabels() {\n          ...\n          var resp = UrlFetchApp.fetch(url, {\n              method: \"GET\",\n              headers: {\n                  Authorization: 'Bearer '+ YOUR_TOKEN,\n              }\n              'muteHttpExceptions': true,\n          });\n          ...\n      }\n      ```\n  - And this token will expire in 1h, so remember to refresh it when you encounter some 401 issues.\n\n\n### 5. Create a Spread Sheet\n\n- We need to create a [Spread Sheet](https://docs.google.com/spreadsheets) to store all labelled training data.\n- Take note of its ID in browser's address bar.\n\n### 6. Label the training dataset\n\n- Once you've done the previous step and copied the code into corresponding places,  you can select out one PDF file as our first labelling target and upload it to the bucket. It will generate a \"xxx-features.csv\" file.\n-  Paste the name and other configs of the file to \"Code.gs\" in Script.\n    ```js\n    var PDF_NAME = '<YOUR PDF FILE NAME>';\n    var BUCKET_NAME = '<YOUR BUCKET NAME>';\n    var SHEET_ID = '<YOUR SHEET ID>';\n    ```\n\n- Go the test web app we already created, refresh the webpage. And finally we can see the fabulous labelling webpage. Hooray!\n\n- Click the element with wrong labels on the webpage,  loop through four colors until presenting the right one. Note the spreadsheet, on which the corresponding label part will change.\n    - Others: gray\n    - Body: Yellow\n    - Header: red\n    - Caption: blue\n\n- Once the labelling is done, switch to another PDF file and start labelling again. (There exists one issue, that I don't why the webpage always fails on the first refresh after modifying the PDF_NAME. So remember to refresh the webpage when you encounter some unreasonable problem.)\n\n- After we've labeled all the PDF, copy all Spreed Sheet (tab) into one and download the it as a CSV file.\n\n### 7. Create an AutoML Table\n\n- Go to [AutoML Table](https://console.cloud.google.com/automl-tables/introduction)\n\n    - Click `NEW DATA SET` > `Upload files from your computer`: select our just downloaded \"all_labels.csv\" file.\n    - Select \"label\" as target\n    - Click `Train`, uncheck \"id\" in features, train 2h\n    - Model name: \"label_predict\"\n\n- The training will automatically stop once the model start overfitting. (My training dataset has 3500 entries and the training early stops after about 40 minutes.)\n\n- And the evaluate result seems not bad, and now our model can predict the right labels (body, caption, header, other) from the feature files generated by Vision API.\n\n    <img src=\"../images/20210508171525893.png\" width=\"90%\" />\n\n### 8. Select an audio voice\n\n- Go to the page of [Cloud Text-to-Speech](https://cloud.google.com/text-to-speech)\n    - Adjust the options to get your preferred voice.\n    - Click `Show JSON`, note the config values.\n\n- Inspired by [Markowitz](https://daleonai.com/pdf-to-audiobook), I also modified the Kazunori's code to synthesize different voices for \"header\", \"caption\" and \"body\".\n\n### 9. Edit the Cloud Function\n\n- Go to the [Cloud Function](https://console.cloud.google.com/functions)\n\n    - Now we should disable the ANNOTATION_MODE, switching to \"Speech Mode\".\n    - Add the name of your AutoML (prediction) model and adjust the configuration of your preferred voice.\n        ```python\n        ANOTATION_MODE = False\n        model_display_name = \"<you-predict-model>\"\n        LANGUAGE_CODE = \"en-GB\"\n        PITCH = {...}\n        SPEAKING_RATE = {...}\n        NAME = {...}\n        ```\n\n- Deploy the Function again.\n\n### 10. Generate the audio\n\n- Upload a new PDF file to your bucket\n\n- Navigate to \"LOGS\" tab of the Cloud Function, check out how the process goes, or just wait for a few minutes.\n\n- And finally, enjoy your audio. Hooray!\n\n\n\n## Deploy and Debug with command line\n\nI list some general steps when you deploy and debug functions with command line. Please refer to the [document](https://cloud.google.com/vision/docs/setup) for details.\n\n- Set up the environment\n    - Create service account\n    - Create a service account key\n    - Set environment\n    - Download and install Google Cloud SDK\n    - Install Vision Client Libraries\n\n- Register a trigger function to Google Cloud Function\n\n    ```bash\n    cd ./functions/app\n    gcloud functions deploy p2a_gcs_trigger --runtime python37 --trigger-bucket <bucket> --memory=2048MB --timeout=540\n    ```\n\n- Wait a few minutes till the Cloud Function is running.\n\n- **NOTE**\n\n    - After you modify the of Cloud Function, the new version of deployment may not update at all! Referring to this [QA](https://stackoverflow.com/questions/65674730/google-cloud-function-doesnt-update-on-change-when-using-deployment-manager), I decide to add an extra parameter \"version\" in the setting, and deliberately change its value on every deployment.\n\n\n\n## References\n\nThese blogs also helped me a lot finishing this project.\n\n- [Authenticating with Google services](https://docs.microsoft.com/en-us/advertising/scripts/examples/authenticating-with-google-services)\n\n- [Getting started with Google Cloud Datastore for Google Apps Script](http://blog.warehouseman.com/2014/10/getting-started-with-google-cloud.html)\n\n- [Upload Files to Google Cloud Storage with Google Scripts](https://www.labnol.org/code/20074-upload-files-to-google-cloud-storage)\n\n\n\n","source":"_posts/pdf2audio.md","raw":"---\ntitle: PDF2Audio - Convert PDFs to Audiobooks with Machine Learning\nalias: []\ntags: [project, ML]\ntypora-copy-images-to: ../images\ndate: 2021-04-15 09:51:56\nupdated: 2021-05-18 03:04:07\nblogged: true\nurlname: Convert-PDFs-to-Audiobooks-with-Machine-Learning\n---\n\n\n\n## What & Why?\n\n- The other day, while I was wondering and searching if it's possible to convert research papers (PDF file) into audiobooks, which then could be well utilized on my way to the Lab or canteen, the following two articles caught my attention.\n    - Dale Markowitz: [Convert PDFs to Audiobooks with Machine Learning](https://daleonai.com/pdf-to-audiobook)\n    - 佐藤一憲 Kazunori Sato：[〜AutoMLで実践する〜 ビジネスユーザーのための機械学習入門シリーズ 【第 3 回】 「積ん読」と「体重増」の悩みを AutoML で解決しよう](https://cloud.google.com/blog/ja/products/ai-machine-learning/practical-machine-learning-with-automl-series-3)\n\n- Here is an example clip of the generated audio:\n\n    <audio style=\"height: 40px;\" src=\"../images/20210518030009000.mp3\" controls=\"\" preload=\"metadata\"></audio>\n\n- The main converting process (from [Kazunori](https://cloud.google.com/blog/ja/products/ai-machine-learning/practical-machine-learning-with-automl-series-3))\n\n    <img src=\"../images/20210430113414677.png\" width=90%/>\n\n- The [article](https://cloud.google.com/blog/ja/products/ai-machine-learning/practical-machine-learning-with-automl-series-3) and [code](https://github.com/kazunori279/pdf2audiobook) of Kazunori Sato are great and helped me a lot in understanding the general method and process, but they unfortunately didn't provide much information on what exactly procedures I should perform on each step. After working on it for a few days, I managed to accomplish this project and archive my initial purpose. I wrote this blog as a guide to elaborate the required operations, hoping it could help you well.\n\n- And check out my code on [GitHub](https://github.com/Konfido/pdf2audiobook).\n\n## What Google services/APIs are we gonna use?\n\n- [Cloud Storage](https://console.cloud.google.com/storage/browser): We will create a bucket to retain uploaded PDF and generated MP3 files.\n- [Cloud Functions](https://cloud.google.com/functions): Function-as-a-Service, used to describe the whole procedures.\n- [Vision API](https://cloud.google.com/vision): Cloud OCR which extract features (text, positions, size ...) of PDF\n- [AutoML Tables](https://cloud.google.com/automl)：Layout classification (detect and delete unnecessary strings)\n- [Text to Speech](https://cloud.google.com/text-to-speech): Speech synthesis\n- [Apps Script](https://developers.google.com/apps-script)：Annotation tool, easing the process of labelling dataset.\n\n## What can we finally achieve?\n\n- Once we upload a PDF file to the bucket, all functions will be triggered sequentially and a  MP3 file will be generated in the end.\n\n- We can also preset different voices for header, caption and the body of a paper, determining their accent, speed and pitch. And all parts will be naturally synthesized and merged together.\n\n## How to evaluate the final result?\n\n- It's awesome to see that AI can actually help in my routine life.\n\n- But the Google Vision API definitely has room for improvement. Specifically, the most significant problem is the usability for two-column papers. It only performs well for single-column ones, relatively.\n\n- And I overlooked a big issue that there are a lot of formulas in the papers. It usually take me a long time to understand them, let alone just hear some jumbled characters and symbols of them. So I lowered my expectations, only sought to understand general idea of the paper. And it works.\n\n\n\n## Step-by-step guide\n\n### 1. Create a Google Cloud project\n\n- Create a new project in [Cloud Platform console](https://console.cloud.google.com/)\n\n- Enable billing\n\n- Enable all APIs we intend to use!!\n    - Go to [API and Services](https://console.cloud.google.com/apis/dashboard)\n    - \"Dashboard\"\n        - Click  `+ Enable APIS AND SERVICES`\n        - Enable: Cloud Function API, Vision API, Cloud Build API, AutoML Tables, App Script API, Text-to-Speech API\n    - \"OAuth consent screen\"\n        - User Type: Make External\n        - Scope: https://cloud.googleapis.com/auth/devstorage.read_write\n        - Test User: your google email\n    - \"Credentials\": Prepare authorization for App Script to access Cloud Storage\n        - Click `Create credentials`: Choose \"OAuth Cliend ID\", and then \"Web application\"\n        - Copy \"Client ID\" and \"Client Secret\"\n\n### 2. Create a Bucket\n\n- Create bucket which will be used to store your uploaded pdf and generated audio.\n    - Go to [Cloud Storage](https://console.cloud.google.com/storage), click\"CREATE BUCKET\".\n\n- Configs\n    - Location: us-central1 (Be same with the following setting of cloud function, or it could go wrong when you perform AutoML.)\n    - Storage class: \"Standard\"\n    - Access control: \"Fine-grained\"! We need to manipulate objects' permissions in this project.\n\n### 3. Create a Cloud Funtion\n\n- Go to [Cloud Function](https://console.cloud.google.com/functions), create a function and config as the following.\n\n- Setting part:\n\n    - Region: us-central1\n    - Trigger type: Cloud Storage\n    - Event type: Finalise/Create\n    - Bucket: my_temp_bucket\n    - Memory > 2GiB (to avoid \"out of memory\" issues)\n    - Timeout: 540 seconds (It's time-consuming to merge mp3 fragments.)\n\n- Codes part:\n    - Copy the code of \"[main.py](https://github.com/Konfido/pdf2audiobook/blob/master/functions/app/main.py)\" and \"requirement.txt\" to corresponding places.\n    - Runtime: \"Python 3.7\", Entry point: \"p2a_gcs_trigger\"\n    - Modify some settings in \"main.py\"\n        ```python\n        ANOTATION_MODE = True\n        model_display_name = \"\" \t# Leave it blank for now\n        ```\n\n### 4. Create an Apps Script project\n\n- Go to [Apps Script](https://script.google.com/home), create a new project.\n\n- As Kazunori has created such a great [notation](https://github.com/kazunori279/pdf2audiobook/tree/master/functions/app) App, we can use it from the beginning, helping us to finish the initial training dataset labeling.\n\n- I modified Kazunori's code of Cloud Function so that once the Vision API complete the OCR procedure and generate a \"xxx-features.csv\" file, another function will be triggered to forge a \"xxx-labels.csv\" file by duplicating \"xxx-features.csv\" and automatically adding a \"label\" column to it. By default, any area with more 100 characters in its \"text\" will be pre-labelled as \"body\", and all other areas will be pre-labelled as \"other\".\n\n- Make API request to Google Cloud Storage\n  - Kazunori's [code](https://github.com/kazunori279/pdf2audiobook/blob/b21ccc1bd6e78a472bb01a353d5aa18c0dd1c405/apps-script/do_get.gs#L77) skips the credential part, but at the same time, it took me a lot effort into figuring out how to pass the credential, modifying the code and even writing another [blog](https://konfido.github.io/Request-to-Cloud-Storage-API-in-Apps-Script-with-OAuth2/) to elaborate on it. I doubt that I missed out something that complicated the whole process. (My assumption is that I only modify and deploy the Script in the web editor, but instead, he set up the environment of credential in shell session and used the command line tool [clasp](https://github.com/google/clasp) to create Script's deployment.) If you've tries the other method or know the right way to do it, please leave a comment below.\n  - From [what](https://cloud.google.com/storage/docs/authentication#oauth-flows) I know, the Cloud Storage uses OAuth2 protocol for API authentication and authorization. The access token can be found in [OAuth Playground](https://developers.google.com/oauthplayground/) which can be directly added to the Kazunori's code. Or you can modify the code, like I did, which will help you simplify the authentication process by providing a clickable \"Consent Screen\".\n  - If you want to use my [code](https://github.com/Konfido/pdf2audiobook/tree/master/apps-script), checkout my other [blog](https://konfido.github.io/Request-to-Cloud-Storage-API-in-Apps-Script-with-OAuth2/) on setting details. But if you want to use Kazunori's code, it just need a little modification to the \"fetch\" request in \"downloadLabels()\" function, which should looks like this:\n      ```javascript\n      // Code.gs\n      function downloadLabels() {\n          ...\n          var resp = UrlFetchApp.fetch(url, {\n              method: \"GET\",\n              headers: {\n                  Authorization: 'Bearer '+ YOUR_TOKEN,\n              }\n              'muteHttpExceptions': true,\n          });\n          ...\n      }\n      ```\n  - And this token will expire in 1h, so remember to refresh it when you encounter some 401 issues.\n\n\n### 5. Create a Spread Sheet\n\n- We need to create a [Spread Sheet](https://docs.google.com/spreadsheets) to store all labelled training data.\n- Take note of its ID in browser's address bar.\n\n### 6. Label the training dataset\n\n- Once you've done the previous step and copied the code into corresponding places,  you can select out one PDF file as our first labelling target and upload it to the bucket. It will generate a \"xxx-features.csv\" file.\n-  Paste the name and other configs of the file to \"Code.gs\" in Script.\n    ```js\n    var PDF_NAME = '<YOUR PDF FILE NAME>';\n    var BUCKET_NAME = '<YOUR BUCKET NAME>';\n    var SHEET_ID = '<YOUR SHEET ID>';\n    ```\n\n- Go the test web app we already created, refresh the webpage. And finally we can see the fabulous labelling webpage. Hooray!\n\n- Click the element with wrong labels on the webpage,  loop through four colors until presenting the right one. Note the spreadsheet, on which the corresponding label part will change.\n    - Others: gray\n    - Body: Yellow\n    - Header: red\n    - Caption: blue\n\n- Once the labelling is done, switch to another PDF file and start labelling again. (There exists one issue, that I don't why the webpage always fails on the first refresh after modifying the PDF_NAME. So remember to refresh the webpage when you encounter some unreasonable problem.)\n\n- After we've labeled all the PDF, copy all Spreed Sheet (tab) into one and download the it as a CSV file.\n\n### 7. Create an AutoML Table\n\n- Go to [AutoML Table](https://console.cloud.google.com/automl-tables/introduction)\n\n    - Click `NEW DATA SET` > `Upload files from your computer`: select our just downloaded \"all_labels.csv\" file.\n    - Select \"label\" as target\n    - Click `Train`, uncheck \"id\" in features, train 2h\n    - Model name: \"label_predict\"\n\n- The training will automatically stop once the model start overfitting. (My training dataset has 3500 entries and the training early stops after about 40 minutes.)\n\n- And the evaluate result seems not bad, and now our model can predict the right labels (body, caption, header, other) from the feature files generated by Vision API.\n\n    <img src=\"../images/20210508171525893.png\" width=\"90%\" />\n\n### 8. Select an audio voice\n\n- Go to the page of [Cloud Text-to-Speech](https://cloud.google.com/text-to-speech)\n    - Adjust the options to get your preferred voice.\n    - Click `Show JSON`, note the config values.\n\n- Inspired by [Markowitz](https://daleonai.com/pdf-to-audiobook), I also modified the Kazunori's code to synthesize different voices for \"header\", \"caption\" and \"body\".\n\n### 9. Edit the Cloud Function\n\n- Go to the [Cloud Function](https://console.cloud.google.com/functions)\n\n    - Now we should disable the ANNOTATION_MODE, switching to \"Speech Mode\".\n    - Add the name of your AutoML (prediction) model and adjust the configuration of your preferred voice.\n        ```python\n        ANOTATION_MODE = False\n        model_display_name = \"<you-predict-model>\"\n        LANGUAGE_CODE = \"en-GB\"\n        PITCH = {...}\n        SPEAKING_RATE = {...}\n        NAME = {...}\n        ```\n\n- Deploy the Function again.\n\n### 10. Generate the audio\n\n- Upload a new PDF file to your bucket\n\n- Navigate to \"LOGS\" tab of the Cloud Function, check out how the process goes, or just wait for a few minutes.\n\n- And finally, enjoy your audio. Hooray!\n\n\n\n## Deploy and Debug with command line\n\nI list some general steps when you deploy and debug functions with command line. Please refer to the [document](https://cloud.google.com/vision/docs/setup) for details.\n\n- Set up the environment\n    - Create service account\n    - Create a service account key\n    - Set environment\n    - Download and install Google Cloud SDK\n    - Install Vision Client Libraries\n\n- Register a trigger function to Google Cloud Function\n\n    ```bash\n    cd ./functions/app\n    gcloud functions deploy p2a_gcs_trigger --runtime python37 --trigger-bucket <bucket> --memory=2048MB --timeout=540\n    ```\n\n- Wait a few minutes till the Cloud Function is running.\n\n- **NOTE**\n\n    - After you modify the of Cloud Function, the new version of deployment may not update at all! Referring to this [QA](https://stackoverflow.com/questions/65674730/google-cloud-function-doesnt-update-on-change-when-using-deployment-manager), I decide to add an extra parameter \"version\" in the setting, and deliberately change its value on every deployment.\n\n\n\n## References\n\nThese blogs also helped me a lot finishing this project.\n\n- [Authenticating with Google services](https://docs.microsoft.com/en-us/advertising/scripts/examples/authenticating-with-google-services)\n\n- [Getting started with Google Cloud Datastore for Google Apps Script](http://blog.warehouseman.com/2014/10/getting-started-with-google-cloud.html)\n\n- [Upload Files to Google Cloud Storage with Google Scripts](https://www.labnol.org/code/20074-upload-files-to-google-cloud-storage)\n\n\n\n","slug":"pdf2audio","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckozvuosu000jdbsg0ta2bx5s","content":"<h2 id=\"what-why\">What &amp; Why?</h2>\n<ul>\n<li><p>The other day, while I was wondering and searching if it's possible to convert research papers (PDF file) into audiobooks, which then could be well utilized on my way to the Lab or canteen, the following two articles caught my attention.</p>\n<ul>\n<li>Dale Markowitz: <a href=\"https://daleonai.com/pdf-to-audiobook\">Convert PDFs to Audiobooks with Machine Learning</a></li>\n<li>佐藤一憲 Kazunori Sato：<a href=\"https://cloud.google.com/blog/ja/products/ai-machine-learning/practical-machine-learning-with-automl-series-3\">〜AutoMLで実践する〜 ビジネスユーザーのための機械学習入門シリーズ 【第 3 回】 「積ん読」と「体重増」の悩みを AutoML で解決しよう</a></li>\n</ul></li>\n<li><p>Here is an example clip of the generated audio:</p>\n<p><audio style=\"height: 40px;\" src=\"../images/20210518030009000.mp3\" controls=\"\" preload=\"metadata\"></audio></p></li>\n<li><p>The main converting process (from <a href=\"https://cloud.google.com/blog/ja/products/ai-machine-learning/practical-machine-learning-with-automl-series-3\">Kazunori</a>)</p>\n<p><img src=\"../images/20210430113414677.png\" width=90%/></p></li>\n<li><p>The <a href=\"https://cloud.google.com/blog/ja/products/ai-machine-learning/practical-machine-learning-with-automl-series-3\">article</a> and <a href=\"https://github.com/kazunori279/pdf2audiobook\">code</a> of Kazunori Sato are great and helped me a lot in understanding the general method and process, but they unfortunately didn't provide much information on what exactly procedures I should perform on each step. After working on it for a few days, I managed to accomplish this project and archive my initial purpose. I wrote this blog as a guide to elaborate the required operations, hoping it could help you well.</p></li>\n<li><p>And check out my code on <a href=\"https://github.com/Konfido/pdf2audiobook\">GitHub</a>.</p></li>\n</ul>\n<h2 id=\"what-google-servicesapis-are-we-gonna-use\">What Google services/APIs are we gonna use?</h2>\n<ul>\n<li><a href=\"https://console.cloud.google.com/storage/browser\">Cloud Storage</a>: We will create a bucket to retain uploaded PDF and generated MP3 files.</li>\n<li><a href=\"https://cloud.google.com/functions\">Cloud Functions</a>: Function-as-a-Service, used to describe the whole procedures.</li>\n<li><a href=\"https://cloud.google.com/vision\">Vision API</a>: Cloud OCR which extract features (text, positions, size ...) of PDF</li>\n<li><a href=\"https://cloud.google.com/automl\">AutoML Tables</a>：Layout classification (detect and delete unnecessary strings)</li>\n<li><a href=\"https://cloud.google.com/text-to-speech\">Text to Speech</a>: Speech synthesis</li>\n<li><a href=\"https://developers.google.com/apps-script\">Apps Script</a>：Annotation tool, easing the process of labelling dataset.</li>\n</ul>\n<h2 id=\"what-can-we-finally-achieve\">What can we finally achieve?</h2>\n<ul>\n<li><p>Once we upload a PDF file to the bucket, all functions will be triggered sequentially and a MP3 file will be generated in the end.</p></li>\n<li><p>We can also preset different voices for header, caption and the body of a paper, determining their accent, speed and pitch. And all parts will be naturally synthesized and merged together.</p></li>\n</ul>\n<h2 id=\"how-to-evaluate-the-final-result\">How to evaluate the final result?</h2>\n<ul>\n<li><p>It's awesome to see that AI can actually help in my routine life.</p></li>\n<li><p>But the Google Vision API definitely has room for improvement. Specifically, the most significant problem is the usability for two-column papers. It only performs well for single-column ones, relatively.</p></li>\n<li><p>And I overlooked a big issue that there are a lot of formulas in the papers. It usually take me a long time to understand them, let alone just hear some jumbled characters and symbols of them. So I lowered my expectations, only sought to understand general idea of the paper. And it works.</p></li>\n</ul>\n<h2 id=\"step-by-step-guide\">Step-by-step guide</h2>\n<h3 id=\"create-a-google-cloud-project\">1. Create a Google Cloud project</h3>\n<ul>\n<li><p>Create a new project in <a href=\"https://console.cloud.google.com/\">Cloud Platform console</a></p></li>\n<li><p>Enable billing</p></li>\n<li><p>Enable all APIs we intend to use!!</p>\n<ul>\n<li>Go to <a href=\"https://console.cloud.google.com/apis/dashboard\">API and Services</a></li>\n<li>\"Dashboard\"\n<ul>\n<li>Click <code>+ Enable APIS AND SERVICES</code></li>\n<li>Enable: Cloud Function API, Vision API, Cloud Build API, AutoML Tables, App Script API, Text-to-Speech API</li>\n</ul></li>\n<li>\"OAuth consent screen\"\n<ul>\n<li>User Type: Make External</li>\n<li>Scope: https://cloud.googleapis.com/auth/devstorage.read_write</li>\n<li>Test User: your google email</li>\n</ul></li>\n<li>\"Credentials\": Prepare authorization for App Script to access Cloud Storage\n<ul>\n<li>Click <code>Create credentials</code>: Choose \"OAuth Cliend ID\", and then \"Web application\"</li>\n<li>Copy \"Client ID\" and \"Client Secret\"</li>\n</ul></li>\n</ul></li>\n</ul>\n<h3 id=\"create-a-bucket\">2. Create a Bucket</h3>\n<ul>\n<li>Create bucket which will be used to store your uploaded pdf and generated audio.\n<ul>\n<li>Go to <a href=\"https://console.cloud.google.com/storage\">Cloud Storage</a>, click\"CREATE BUCKET\".</li>\n</ul></li>\n<li>Configs\n<ul>\n<li>Location: us-central1 (Be same with the following setting of cloud function, or it could go wrong when you perform AutoML.)</li>\n<li>Storage class: \"Standard\"</li>\n<li>Access control: \"Fine-grained\"! We need to manipulate objects' permissions in this project.</li>\n</ul></li>\n</ul>\n<h3 id=\"create-a-cloud-funtion\">3. Create a Cloud Funtion</h3>\n<ul>\n<li><p>Go to <a href=\"https://console.cloud.google.com/functions\">Cloud Function</a>, create a function and config as the following.</p></li>\n<li><p>Setting part:</p>\n<ul>\n<li>Region: us-central1</li>\n<li>Trigger type: Cloud Storage</li>\n<li>Event type: Finalise/Create</li>\n<li>Bucket: my_temp_bucket</li>\n<li>Memory &gt; 2GiB (to avoid \"out of memory\" issues)</li>\n<li>Timeout: 540 seconds (It's time-consuming to merge mp3 fragments.)</li>\n</ul></li>\n<li><p>Codes part:</p>\n<ul>\n<li>Copy the code of \"<a href=\"https://github.com/Konfido/pdf2audiobook/blob/master/functions/app/main.py\">main.py</a>\" and \"requirement.txt\" to corresponding places.</li>\n<li>Runtime: \"Python 3.7\", Entry point: \"p2a_gcs_trigger\"</li>\n<li>Modify some settings in \"main.py\" <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ANOTATION_MODE = <span class=\"literal\">True</span></span><br><span class=\"line\">model_display_name = <span class=\"string\">&quot;&quot;</span> \t<span class=\"comment\"># Leave it blank for now</span></span><br></pre></td></tr></table></figure></li>\n</ul></li>\n</ul>\n<h3 id=\"create-an-apps-script-project\">4. Create an Apps Script project</h3>\n<ul>\n<li><p>Go to <a href=\"https://script.google.com/home\">Apps Script</a>, create a new project.</p></li>\n<li><p>As Kazunori has created such a great <a href=\"https://github.com/kazunori279/pdf2audiobook/tree/master/functions/app\">notation</a> App, we can use it from the beginning, helping us to finish the initial training dataset labeling.</p></li>\n<li><p>I modified Kazunori's code of Cloud Function so that once the Vision API complete the OCR procedure and generate a \"xxx-features.csv\" file, another function will be triggered to forge a \"xxx-labels.csv\" file by duplicating \"xxx-features.csv\" and automatically adding a \"label\" column to it. By default, any area with more 100 characters in its \"text\" will be pre-labelled as \"body\", and all other areas will be pre-labelled as \"other\".</p></li>\n<li><p>Make API request to Google Cloud Storage</p>\n<ul>\n<li>Kazunori's <a href=\"https://github.com/kazunori279/pdf2audiobook/blob/b21ccc1bd6e78a472bb01a353d5aa18c0dd1c405/apps-script/do_get.gs#L77\">code</a> skips the credential part, but at the same time, it took me a lot effort into figuring out how to pass the credential, modifying the code and even writing another <a href=\"https://konfido.github.io/Request-to-Cloud-Storage-API-in-Apps-Script-with-OAuth2/\">blog</a> to elaborate on it. I doubt that I missed out something that complicated the whole process. (My assumption is that I only modify and deploy the Script in the web editor, but instead, he set up the environment of credential in shell session and used the command line tool <a href=\"https://github.com/google/clasp\">clasp</a> to create Script's deployment.) If you've tries the other method or know the right way to do it, please leave a comment below.</li>\n<li>From <a href=\"https://cloud.google.com/storage/docs/authentication#oauth-flows\">what</a> I know, the Cloud Storage uses OAuth2 protocol for API authentication and authorization. The access token can be found in <a href=\"https://developers.google.com/oauthplayground/\">OAuth Playground</a> which can be directly added to the Kazunori's code. Or you can modify the code, like I did, which will help you simplify the authentication process by providing a clickable \"Consent Screen\".</li>\n<li>If you want to use my <a href=\"https://github.com/Konfido/pdf2audiobook/tree/master/apps-script\">code</a>, checkout my other <a href=\"https://konfido.github.io/Request-to-Cloud-Storage-API-in-Apps-Script-with-OAuth2/\">blog</a> on setting details. But if you want to use Kazunori's code, it just need a little modification to the \"fetch\" request in \"downloadLabels()\" function, which should looks like this: <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Code.gs</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">downloadLabels</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">var</span> resp = UrlFetchApp.fetch(url, &#123;</span><br><span class=\"line\">        <span class=\"attr\">method</span>: <span class=\"string\">&quot;GET&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">Authorization</span>: <span class=\"string\">&#x27;Bearer &#x27;</span>+ YOUR_TOKEN,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"string\">&#x27;muteHttpExceptions&#x27;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>And this token will expire in 1h, so remember to refresh it when you encounter some 401 issues.</li>\n</ul></li>\n</ul>\n<h3 id=\"create-a-spread-sheet\">5. Create a Spread Sheet</h3>\n<ul>\n<li>We need to create a <a href=\"https://docs.google.com/spreadsheets\">Spread Sheet</a> to store all labelled training data.</li>\n<li>Take note of its ID in browser's address bar.</li>\n</ul>\n<h3 id=\"label-the-training-dataset\">6. Label the training dataset</h3>\n<ul>\n<li><p>Once you've done the previous step and copied the code into corresponding places, you can select out one PDF file as our first labelling target and upload it to the bucket. It will generate a \"xxx-features.csv\" file.</p></li>\n<li><p>Paste the name and other configs of the file to \"Code.gs\" in Script. <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> PDF_NAME = <span class=\"string\">&#x27;&lt;YOUR PDF FILE NAME&gt;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> BUCKET_NAME = <span class=\"string\">&#x27;&lt;YOUR BUCKET NAME&gt;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> SHEET_ID = <span class=\"string\">&#x27;&lt;YOUR SHEET ID&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure></p></li>\n<li><p>Go the test web app we already created, refresh the webpage. And finally we can see the fabulous labelling webpage. Hooray!</p></li>\n<li><p>Click the element with wrong labels on the webpage, loop through four colors until presenting the right one. Note the spreadsheet, on which the corresponding label part will change.</p>\n<ul>\n<li>Others: gray</li>\n<li>Body: Yellow</li>\n<li>Header: red</li>\n<li>Caption: blue</li>\n</ul></li>\n<li><p>Once the labelling is done, switch to another PDF file and start labelling again. (There exists one issue, that I don't why the webpage always fails on the first refresh after modifying the PDF_NAME. So remember to refresh the webpage when you encounter some unreasonable problem.)</p></li>\n<li><p>After we've labeled all the PDF, copy all Spreed Sheet (tab) into one and download the it as a CSV file.</p></li>\n</ul>\n<h3 id=\"create-an-automl-table\">7. Create an AutoML Table</h3>\n<ul>\n<li><p>Go to <a href=\"https://console.cloud.google.com/automl-tables/introduction\">AutoML Table</a></p>\n<ul>\n<li>Click <code>NEW DATA SET</code> &gt; <code>Upload files from your computer</code>: select our just downloaded \"all_labels.csv\" file.</li>\n<li>Select \"label\" as target</li>\n<li>Click <code>Train</code>, uncheck \"id\" in features, train 2h</li>\n<li>Model name: \"label_predict\"</li>\n</ul></li>\n<li><p>The training will automatically stop once the model start overfitting. (My training dataset has 3500 entries and the training early stops after about 40 minutes.)</p></li>\n<li><p>And the evaluate result seems not bad, and now our model can predict the right labels (body, caption, header, other) from the feature files generated by Vision API.</p>\n<p><img src=\"../images/20210508171525893.png\" width=\"90%\" /></p></li>\n</ul>\n<h3 id=\"select-an-audio-voice\">8. Select an audio voice</h3>\n<ul>\n<li>Go to the page of <a href=\"https://cloud.google.com/text-to-speech\">Cloud Text-to-Speech</a>\n<ul>\n<li>Adjust the options to get your preferred voice.</li>\n<li>Click <code>Show JSON</code>, note the config values.</li>\n</ul></li>\n<li>Inspired by <a href=\"https://daleonai.com/pdf-to-audiobook\">Markowitz</a>, I also modified the Kazunori's code to synthesize different voices for \"header\", \"caption\" and \"body\".</li>\n</ul>\n<h3 id=\"edit-the-cloud-function\">9. Edit the Cloud Function</h3>\n<ul>\n<li><p>Go to the <a href=\"https://console.cloud.google.com/functions\">Cloud Function</a></p>\n<ul>\n<li>Now we should disable the ANNOTATION_MODE, switching to \"Speech Mode\".</li>\n<li>Add the name of your AutoML (prediction) model and adjust the configuration of your preferred voice. <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ANOTATION_MODE = <span class=\"literal\">False</span></span><br><span class=\"line\">model_display_name = <span class=\"string\">&quot;&lt;you-predict-model&gt;&quot;</span></span><br><span class=\"line\">LANGUAGE_CODE = <span class=\"string\">&quot;en-GB&quot;</span></span><br><span class=\"line\">PITCH = &#123;...&#125;</span><br><span class=\"line\">SPEAKING_RATE = &#123;...&#125;</span><br><span class=\"line\">NAME = &#123;...&#125;</span><br></pre></td></tr></table></figure></li>\n</ul></li>\n<li><p>Deploy the Function again.</p></li>\n</ul>\n<h3 id=\"generate-the-audio\">10. Generate the audio</h3>\n<ul>\n<li><p>Upload a new PDF file to your bucket</p></li>\n<li><p>Navigate to \"LOGS\" tab of the Cloud Function, check out how the process goes, or just wait for a few minutes.</p></li>\n<li><p>And finally, enjoy your audio. Hooray!</p></li>\n</ul>\n<h2 id=\"deploy-and-debug-with-command-line\">Deploy and Debug with command line</h2>\n<p>I list some general steps when you deploy and debug functions with command line. Please refer to the <a href=\"https://cloud.google.com/vision/docs/setup\">document</a> for details.</p>\n<ul>\n<li><p>Set up the environment</p>\n<ul>\n<li>Create service account</li>\n<li>Create a service account key</li>\n<li>Set environment</li>\n<li>Download and install Google Cloud SDK</li>\n<li>Install Vision Client Libraries</li>\n</ul></li>\n<li><p>Register a trigger function to Google Cloud Function</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ./<span class=\"built_in\">functions</span>/app</span><br><span class=\"line\">gcloud <span class=\"built_in\">functions</span> deploy p2a_gcs_trigger --runtime python37 --trigger-bucket &lt;bucket&gt; --memory=2048MB --timeout=540</span><br></pre></td></tr></table></figure></p></li>\n<li><p>Wait a few minutes till the Cloud Function is running.</p></li>\n<li><p><strong>NOTE</strong></p>\n<ul>\n<li>After you modify the of Cloud Function, the new version of deployment may not update at all! Referring to this <a href=\"https://stackoverflow.com/questions/65674730/google-cloud-function-doesnt-update-on-change-when-using-deployment-manager\">QA</a>, I decide to add an extra parameter \"version\" in the setting, and deliberately change its value on every deployment.</li>\n</ul></li>\n</ul>\n<h2 id=\"references\">References</h2>\n<p>These blogs also helped me a lot finishing this project.</p>\n<ul>\n<li><p><a href=\"https://docs.microsoft.com/en-us/advertising/scripts/examples/authenticating-with-google-services\">Authenticating with Google services</a></p></li>\n<li><p><a href=\"http://blog.warehouseman.com/2014/10/getting-started-with-google-cloud.html\">Getting started with Google Cloud Datastore for Google Apps Script</a></p></li>\n<li><p><a href=\"https://www.labnol.org/code/20074-upload-files-to-google-cloud-storage\">Upload Files to Google Cloud Storage with Google Scripts</a></p></li>\n</ul>\n","site":{"data":{"projects":[{"name":"PDF2Audio","url":"Convert PDFs to Audiobooks with Machine Learning","desc":"Convert PDFs to Audiobooks with Machine Learning"},{"name":"Alfred PKManager","url":"https://github.com/Konfido/alfred-pkmanager","desc":"A handful Alfred Workflow which helps searching and managing your Personal Knowledge Markdown notes."}]}},"excerpt":"","more":"<h2 id=\"what-why\">What &amp; Why?</h2>\n<ul>\n<li><p>The other day, while I was wondering and searching if it's possible to convert research papers (PDF file) into audiobooks, which then could be well utilized on my way to the Lab or canteen, the following two articles caught my attention.</p>\n<ul>\n<li>Dale Markowitz: <a href=\"https://daleonai.com/pdf-to-audiobook\">Convert PDFs to Audiobooks with Machine Learning</a></li>\n<li>佐藤一憲 Kazunori Sato：<a href=\"https://cloud.google.com/blog/ja/products/ai-machine-learning/practical-machine-learning-with-automl-series-3\">〜AutoMLで実践する〜 ビジネスユーザーのための機械学習入門シリーズ 【第 3 回】 「積ん読」と「体重増」の悩みを AutoML で解決しよう</a></li>\n</ul></li>\n<li><p>Here is an example clip of the generated audio:</p>\n<p><audio style=\"height: 40px;\" src=\"../images/20210518030009000.mp3\" controls=\"\" preload=\"metadata\"></audio></p></li>\n<li><p>The main converting process (from <a href=\"https://cloud.google.com/blog/ja/products/ai-machine-learning/practical-machine-learning-with-automl-series-3\">Kazunori</a>)</p>\n<p><img src=\"../images/20210430113414677.png\" width=90%/></p></li>\n<li><p>The <a href=\"https://cloud.google.com/blog/ja/products/ai-machine-learning/practical-machine-learning-with-automl-series-3\">article</a> and <a href=\"https://github.com/kazunori279/pdf2audiobook\">code</a> of Kazunori Sato are great and helped me a lot in understanding the general method and process, but they unfortunately didn't provide much information on what exactly procedures I should perform on each step. After working on it for a few days, I managed to accomplish this project and archive my initial purpose. I wrote this blog as a guide to elaborate the required operations, hoping it could help you well.</p></li>\n<li><p>And check out my code on <a href=\"https://github.com/Konfido/pdf2audiobook\">GitHub</a>.</p></li>\n</ul>\n<h2 id=\"what-google-servicesapis-are-we-gonna-use\">What Google services/APIs are we gonna use?</h2>\n<ul>\n<li><a href=\"https://console.cloud.google.com/storage/browser\">Cloud Storage</a>: We will create a bucket to retain uploaded PDF and generated MP3 files.</li>\n<li><a href=\"https://cloud.google.com/functions\">Cloud Functions</a>: Function-as-a-Service, used to describe the whole procedures.</li>\n<li><a href=\"https://cloud.google.com/vision\">Vision API</a>: Cloud OCR which extract features (text, positions, size ...) of PDF</li>\n<li><a href=\"https://cloud.google.com/automl\">AutoML Tables</a>：Layout classification (detect and delete unnecessary strings)</li>\n<li><a href=\"https://cloud.google.com/text-to-speech\">Text to Speech</a>: Speech synthesis</li>\n<li><a href=\"https://developers.google.com/apps-script\">Apps Script</a>：Annotation tool, easing the process of labelling dataset.</li>\n</ul>\n<h2 id=\"what-can-we-finally-achieve\">What can we finally achieve?</h2>\n<ul>\n<li><p>Once we upload a PDF file to the bucket, all functions will be triggered sequentially and a MP3 file will be generated in the end.</p></li>\n<li><p>We can also preset different voices for header, caption and the body of a paper, determining their accent, speed and pitch. And all parts will be naturally synthesized and merged together.</p></li>\n</ul>\n<h2 id=\"how-to-evaluate-the-final-result\">How to evaluate the final result?</h2>\n<ul>\n<li><p>It's awesome to see that AI can actually help in my routine life.</p></li>\n<li><p>But the Google Vision API definitely has room for improvement. Specifically, the most significant problem is the usability for two-column papers. It only performs well for single-column ones, relatively.</p></li>\n<li><p>And I overlooked a big issue that there are a lot of formulas in the papers. It usually take me a long time to understand them, let alone just hear some jumbled characters and symbols of them. So I lowered my expectations, only sought to understand general idea of the paper. And it works.</p></li>\n</ul>\n<h2 id=\"step-by-step-guide\">Step-by-step guide</h2>\n<h3 id=\"create-a-google-cloud-project\">1. Create a Google Cloud project</h3>\n<ul>\n<li><p>Create a new project in <a href=\"https://console.cloud.google.com/\">Cloud Platform console</a></p></li>\n<li><p>Enable billing</p></li>\n<li><p>Enable all APIs we intend to use!!</p>\n<ul>\n<li>Go to <a href=\"https://console.cloud.google.com/apis/dashboard\">API and Services</a></li>\n<li>\"Dashboard\"\n<ul>\n<li>Click <code>+ Enable APIS AND SERVICES</code></li>\n<li>Enable: Cloud Function API, Vision API, Cloud Build API, AutoML Tables, App Script API, Text-to-Speech API</li>\n</ul></li>\n<li>\"OAuth consent screen\"\n<ul>\n<li>User Type: Make External</li>\n<li>Scope: https://cloud.googleapis.com/auth/devstorage.read_write</li>\n<li>Test User: your google email</li>\n</ul></li>\n<li>\"Credentials\": Prepare authorization for App Script to access Cloud Storage\n<ul>\n<li>Click <code>Create credentials</code>: Choose \"OAuth Cliend ID\", and then \"Web application\"</li>\n<li>Copy \"Client ID\" and \"Client Secret\"</li>\n</ul></li>\n</ul></li>\n</ul>\n<h3 id=\"create-a-bucket\">2. Create a Bucket</h3>\n<ul>\n<li>Create bucket which will be used to store your uploaded pdf and generated audio.\n<ul>\n<li>Go to <a href=\"https://console.cloud.google.com/storage\">Cloud Storage</a>, click\"CREATE BUCKET\".</li>\n</ul></li>\n<li>Configs\n<ul>\n<li>Location: us-central1 (Be same with the following setting of cloud function, or it could go wrong when you perform AutoML.)</li>\n<li>Storage class: \"Standard\"</li>\n<li>Access control: \"Fine-grained\"! We need to manipulate objects' permissions in this project.</li>\n</ul></li>\n</ul>\n<h3 id=\"create-a-cloud-funtion\">3. Create a Cloud Funtion</h3>\n<ul>\n<li><p>Go to <a href=\"https://console.cloud.google.com/functions\">Cloud Function</a>, create a function and config as the following.</p></li>\n<li><p>Setting part:</p>\n<ul>\n<li>Region: us-central1</li>\n<li>Trigger type: Cloud Storage</li>\n<li>Event type: Finalise/Create</li>\n<li>Bucket: my_temp_bucket</li>\n<li>Memory &gt; 2GiB (to avoid \"out of memory\" issues)</li>\n<li>Timeout: 540 seconds (It's time-consuming to merge mp3 fragments.)</li>\n</ul></li>\n<li><p>Codes part:</p>\n<ul>\n<li>Copy the code of \"<a href=\"https://github.com/Konfido/pdf2audiobook/blob/master/functions/app/main.py\">main.py</a>\" and \"requirement.txt\" to corresponding places.</li>\n<li>Runtime: \"Python 3.7\", Entry point: \"p2a_gcs_trigger\"</li>\n<li>Modify some settings in \"main.py\" <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ANOTATION_MODE = <span class=\"literal\">True</span></span><br><span class=\"line\">model_display_name = <span class=\"string\">&quot;&quot;</span> \t<span class=\"comment\"># Leave it blank for now</span></span><br></pre></td></tr></table></figure></li>\n</ul></li>\n</ul>\n<h3 id=\"create-an-apps-script-project\">4. Create an Apps Script project</h3>\n<ul>\n<li><p>Go to <a href=\"https://script.google.com/home\">Apps Script</a>, create a new project.</p></li>\n<li><p>As Kazunori has created such a great <a href=\"https://github.com/kazunori279/pdf2audiobook/tree/master/functions/app\">notation</a> App, we can use it from the beginning, helping us to finish the initial training dataset labeling.</p></li>\n<li><p>I modified Kazunori's code of Cloud Function so that once the Vision API complete the OCR procedure and generate a \"xxx-features.csv\" file, another function will be triggered to forge a \"xxx-labels.csv\" file by duplicating \"xxx-features.csv\" and automatically adding a \"label\" column to it. By default, any area with more 100 characters in its \"text\" will be pre-labelled as \"body\", and all other areas will be pre-labelled as \"other\".</p></li>\n<li><p>Make API request to Google Cloud Storage</p>\n<ul>\n<li>Kazunori's <a href=\"https://github.com/kazunori279/pdf2audiobook/blob/b21ccc1bd6e78a472bb01a353d5aa18c0dd1c405/apps-script/do_get.gs#L77\">code</a> skips the credential part, but at the same time, it took me a lot effort into figuring out how to pass the credential, modifying the code and even writing another <a href=\"https://konfido.github.io/Request-to-Cloud-Storage-API-in-Apps-Script-with-OAuth2/\">blog</a> to elaborate on it. I doubt that I missed out something that complicated the whole process. (My assumption is that I only modify and deploy the Script in the web editor, but instead, he set up the environment of credential in shell session and used the command line tool <a href=\"https://github.com/google/clasp\">clasp</a> to create Script's deployment.) If you've tries the other method or know the right way to do it, please leave a comment below.</li>\n<li>From <a href=\"https://cloud.google.com/storage/docs/authentication#oauth-flows\">what</a> I know, the Cloud Storage uses OAuth2 protocol for API authentication and authorization. The access token can be found in <a href=\"https://developers.google.com/oauthplayground/\">OAuth Playground</a> which can be directly added to the Kazunori's code. Or you can modify the code, like I did, which will help you simplify the authentication process by providing a clickable \"Consent Screen\".</li>\n<li>If you want to use my <a href=\"https://github.com/Konfido/pdf2audiobook/tree/master/apps-script\">code</a>, checkout my other <a href=\"https://konfido.github.io/Request-to-Cloud-Storage-API-in-Apps-Script-with-OAuth2/\">blog</a> on setting details. But if you want to use Kazunori's code, it just need a little modification to the \"fetch\" request in \"downloadLabels()\" function, which should looks like this: <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Code.gs</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">downloadLabels</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">var</span> resp = UrlFetchApp.fetch(url, &#123;</span><br><span class=\"line\">        <span class=\"attr\">method</span>: <span class=\"string\">&quot;GET&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">Authorization</span>: <span class=\"string\">&#x27;Bearer &#x27;</span>+ YOUR_TOKEN,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"string\">&#x27;muteHttpExceptions&#x27;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>And this token will expire in 1h, so remember to refresh it when you encounter some 401 issues.</li>\n</ul></li>\n</ul>\n<h3 id=\"create-a-spread-sheet\">5. Create a Spread Sheet</h3>\n<ul>\n<li>We need to create a <a href=\"https://docs.google.com/spreadsheets\">Spread Sheet</a> to store all labelled training data.</li>\n<li>Take note of its ID in browser's address bar.</li>\n</ul>\n<h3 id=\"label-the-training-dataset\">6. Label the training dataset</h3>\n<ul>\n<li><p>Once you've done the previous step and copied the code into corresponding places, you can select out one PDF file as our first labelling target and upload it to the bucket. It will generate a \"xxx-features.csv\" file.</p></li>\n<li><p>Paste the name and other configs of the file to \"Code.gs\" in Script. <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> PDF_NAME = <span class=\"string\">&#x27;&lt;YOUR PDF FILE NAME&gt;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> BUCKET_NAME = <span class=\"string\">&#x27;&lt;YOUR BUCKET NAME&gt;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> SHEET_ID = <span class=\"string\">&#x27;&lt;YOUR SHEET ID&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure></p></li>\n<li><p>Go the test web app we already created, refresh the webpage. And finally we can see the fabulous labelling webpage. Hooray!</p></li>\n<li><p>Click the element with wrong labels on the webpage, loop through four colors until presenting the right one. Note the spreadsheet, on which the corresponding label part will change.</p>\n<ul>\n<li>Others: gray</li>\n<li>Body: Yellow</li>\n<li>Header: red</li>\n<li>Caption: blue</li>\n</ul></li>\n<li><p>Once the labelling is done, switch to another PDF file and start labelling again. (There exists one issue, that I don't why the webpage always fails on the first refresh after modifying the PDF_NAME. So remember to refresh the webpage when you encounter some unreasonable problem.)</p></li>\n<li><p>After we've labeled all the PDF, copy all Spreed Sheet (tab) into one and download the it as a CSV file.</p></li>\n</ul>\n<h3 id=\"create-an-automl-table\">7. Create an AutoML Table</h3>\n<ul>\n<li><p>Go to <a href=\"https://console.cloud.google.com/automl-tables/introduction\">AutoML Table</a></p>\n<ul>\n<li>Click <code>NEW DATA SET</code> &gt; <code>Upload files from your computer</code>: select our just downloaded \"all_labels.csv\" file.</li>\n<li>Select \"label\" as target</li>\n<li>Click <code>Train</code>, uncheck \"id\" in features, train 2h</li>\n<li>Model name: \"label_predict\"</li>\n</ul></li>\n<li><p>The training will automatically stop once the model start overfitting. (My training dataset has 3500 entries and the training early stops after about 40 minutes.)</p></li>\n<li><p>And the evaluate result seems not bad, and now our model can predict the right labels (body, caption, header, other) from the feature files generated by Vision API.</p>\n<p><img src=\"../images/20210508171525893.png\" width=\"90%\" /></p></li>\n</ul>\n<h3 id=\"select-an-audio-voice\">8. Select an audio voice</h3>\n<ul>\n<li>Go to the page of <a href=\"https://cloud.google.com/text-to-speech\">Cloud Text-to-Speech</a>\n<ul>\n<li>Adjust the options to get your preferred voice.</li>\n<li>Click <code>Show JSON</code>, note the config values.</li>\n</ul></li>\n<li>Inspired by <a href=\"https://daleonai.com/pdf-to-audiobook\">Markowitz</a>, I also modified the Kazunori's code to synthesize different voices for \"header\", \"caption\" and \"body\".</li>\n</ul>\n<h3 id=\"edit-the-cloud-function\">9. Edit the Cloud Function</h3>\n<ul>\n<li><p>Go to the <a href=\"https://console.cloud.google.com/functions\">Cloud Function</a></p>\n<ul>\n<li>Now we should disable the ANNOTATION_MODE, switching to \"Speech Mode\".</li>\n<li>Add the name of your AutoML (prediction) model and adjust the configuration of your preferred voice. <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ANOTATION_MODE = <span class=\"literal\">False</span></span><br><span class=\"line\">model_display_name = <span class=\"string\">&quot;&lt;you-predict-model&gt;&quot;</span></span><br><span class=\"line\">LANGUAGE_CODE = <span class=\"string\">&quot;en-GB&quot;</span></span><br><span class=\"line\">PITCH = &#123;...&#125;</span><br><span class=\"line\">SPEAKING_RATE = &#123;...&#125;</span><br><span class=\"line\">NAME = &#123;...&#125;</span><br></pre></td></tr></table></figure></li>\n</ul></li>\n<li><p>Deploy the Function again.</p></li>\n</ul>\n<h3 id=\"generate-the-audio\">10. Generate the audio</h3>\n<ul>\n<li><p>Upload a new PDF file to your bucket</p></li>\n<li><p>Navigate to \"LOGS\" tab of the Cloud Function, check out how the process goes, or just wait for a few minutes.</p></li>\n<li><p>And finally, enjoy your audio. Hooray!</p></li>\n</ul>\n<h2 id=\"deploy-and-debug-with-command-line\">Deploy and Debug with command line</h2>\n<p>I list some general steps when you deploy and debug functions with command line. Please refer to the <a href=\"https://cloud.google.com/vision/docs/setup\">document</a> for details.</p>\n<ul>\n<li><p>Set up the environment</p>\n<ul>\n<li>Create service account</li>\n<li>Create a service account key</li>\n<li>Set environment</li>\n<li>Download and install Google Cloud SDK</li>\n<li>Install Vision Client Libraries</li>\n</ul></li>\n<li><p>Register a trigger function to Google Cloud Function</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ./<span class=\"built_in\">functions</span>/app</span><br><span class=\"line\">gcloud <span class=\"built_in\">functions</span> deploy p2a_gcs_trigger --runtime python37 --trigger-bucket &lt;bucket&gt; --memory=2048MB --timeout=540</span><br></pre></td></tr></table></figure></p></li>\n<li><p>Wait a few minutes till the Cloud Function is running.</p></li>\n<li><p><strong>NOTE</strong></p>\n<ul>\n<li>After you modify the of Cloud Function, the new version of deployment may not update at all! Referring to this <a href=\"https://stackoverflow.com/questions/65674730/google-cloud-function-doesnt-update-on-change-when-using-deployment-manager\">QA</a>, I decide to add an extra parameter \"version\" in the setting, and deliberately change its value on every deployment.</li>\n</ul></li>\n</ul>\n<h2 id=\"references\">References</h2>\n<p>These blogs also helped me a lot finishing this project.</p>\n<ul>\n<li><p><a href=\"https://docs.microsoft.com/en-us/advertising/scripts/examples/authenticating-with-google-services\">Authenticating with Google services</a></p></li>\n<li><p><a href=\"http://blog.warehouseman.com/2014/10/getting-started-with-google-cloud.html\">Getting started with Google Cloud Datastore for Google Apps Script</a></p></li>\n<li><p><a href=\"https://www.labnol.org/code/20074-upload-files-to-google-cloud-storage\">Upload Files to Google Cloud Storage with Google Scripts</a></p></li>\n</ul>\n"},{"title":"非root用户安装MongoDB","urlname":"Install-MongoDB","date":"2018-07-31T02:59:21.000Z","updated":"2018-07-31T02:59:21.000Z","_content":"在实验室的服务器上安装MongoDB，然而没有sudo权限，只能安装已编译的程序了。\n步骤如下：\n\n1. 去[官网](https://www.mongodb.com/download-center#community)查看下载并解压最新版4.0.0的MongoDB包\n<!--more-->\n```bash\n$ wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1404-4.0.0.tgz\n$ tar -zxvf mongodb-linux-x86_64-ubuntu1404-4.0.0.tgz\n```\n\n2. 官网说需要安装OpenSSL\n>The binary of this version has been compiled with SSL enabled and dynamically linked. This requires that SSL libraries be installed separately. See here for more information on installing OpenSSL.\n安装方法参考：[这个](https://skynineblog.wordpress.com/2016/04/08/linux%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85-openssl%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/)\n\n3. 将路径添加到PATH\n```bash\n$ export PATH=\"/path/to/dir/:$PATH\"\n$ source ~/.bashrc\n```\n\n4. 在合适位置新建`mongod.conf`配置文件，主要是设置db和log文件夹，以及`fork`（后台运行），参考配置：\n```text\n# mongod.conf\n\n# for documentation of all options, see:\n#   http://docs.mongodb.org/manual/reference/configuration-options/\n\n# Where and how to store data.\nstorage:\n  dbPath: /home/duhaihua/mongo/db\n  journal:\n    enabled: true\n\n# where to write logging data.\nsystemLog:\n  destination: file\n  logAppend: true\n  path: /home/duhaihua/mongo/mongod.log\n\n# network interfaces\nnet:\n  port: 27017\n  bindIp: 0.0.0.0\n\n# how the process runs\nprocessManagement:\n  timeZoneInfo: /usr/share/zoneinfo\n  fork: true\n\n# security.\nsecurity:\n  authorization: enabled\n```\n\n5. 启动mongod服务\n```bash\nmongod --config ~/mongo/mongod.conf\n```\n可以用以下命令查看mongod是否已启动：\n```shell\n$ ps -ef|grep mogod\n```\n\n6. 打开mongo shell，使用mongoDB\n```shell\nmongo\n```","source":"_posts/非root用户安装MongoDB.md","raw":"---\ntitle: 非root用户安装MongoDB\nurlname: Install-MongoDB\ntags: [dev, intro]\ndate: 2018-07-31 10:59:21\nupdated: 2018-07-31 10:59:21\n---\n在实验室的服务器上安装MongoDB，然而没有sudo权限，只能安装已编译的程序了。\n步骤如下：\n\n1. 去[官网](https://www.mongodb.com/download-center#community)查看下载并解压最新版4.0.0的MongoDB包\n<!--more-->\n```bash\n$ wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1404-4.0.0.tgz\n$ tar -zxvf mongodb-linux-x86_64-ubuntu1404-4.0.0.tgz\n```\n\n2. 官网说需要安装OpenSSL\n>The binary of this version has been compiled with SSL enabled and dynamically linked. This requires that SSL libraries be installed separately. See here for more information on installing OpenSSL.\n安装方法参考：[这个](https://skynineblog.wordpress.com/2016/04/08/linux%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85-openssl%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/)\n\n3. 将路径添加到PATH\n```bash\n$ export PATH=\"/path/to/dir/:$PATH\"\n$ source ~/.bashrc\n```\n\n4. 在合适位置新建`mongod.conf`配置文件，主要是设置db和log文件夹，以及`fork`（后台运行），参考配置：\n```text\n# mongod.conf\n\n# for documentation of all options, see:\n#   http://docs.mongodb.org/manual/reference/configuration-options/\n\n# Where and how to store data.\nstorage:\n  dbPath: /home/duhaihua/mongo/db\n  journal:\n    enabled: true\n\n# where to write logging data.\nsystemLog:\n  destination: file\n  logAppend: true\n  path: /home/duhaihua/mongo/mongod.log\n\n# network interfaces\nnet:\n  port: 27017\n  bindIp: 0.0.0.0\n\n# how the process runs\nprocessManagement:\n  timeZoneInfo: /usr/share/zoneinfo\n  fork: true\n\n# security.\nsecurity:\n  authorization: enabled\n```\n\n5. 启动mongod服务\n```bash\nmongod --config ~/mongo/mongod.conf\n```\n可以用以下命令查看mongod是否已启动：\n```shell\n$ ps -ef|grep mogod\n```\n\n6. 打开mongo shell，使用mongoDB\n```shell\nmongo\n```","slug":"非root用户安装MongoDB","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckozvuosv000ldbsgenlk523g","content":"<p>在实验室的服务器上安装MongoDB，然而没有sudo权限，只能安装已编译的程序了。 步骤如下：</p>\n<ol type=\"1\">\n<li><p>去<a href=\"https://www.mongodb.com/download-center#community\">官网</a>查看下载并解压最新版4.0.0的MongoDB包 <span id=\"more\"></span> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1404-4.0.0.tgz</span><br><span class=\"line\">$ tar -zxvf mongodb-linux-x86_64-ubuntu1404-4.0.0.tgz</span><br></pre></td></tr></table></figure></p></li>\n<li><p>官网说需要安装OpenSSL &gt;The binary of this version has been compiled with SSL enabled and dynamically linked. This requires that SSL libraries be installed separately. See here for more information on installing OpenSSL. 安装方法参考：<a href=\"https://skynineblog.wordpress.com/2016/04/08/linux%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85-openssl%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/\">这个</a></p></li>\n<li><p>将路径添加到PATH <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">export</span> PATH=<span class=\"string\">&quot;/path/to/dir/:<span class=\"variable\">$PATH</span>&quot;</span></span><br><span class=\"line\">$ <span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></p></li>\n<li><p>在合适位置新建<code>mongod.conf</code>配置文件，主要是设置db和log文件夹，以及<code>fork</code>（后台运行），参考配置： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mongod.conf</span><br><span class=\"line\"></span><br><span class=\"line\"># for documentation of all options, see:</span><br><span class=\"line\">#   http://docs.mongodb.org/manual/reference/configuration-options/</span><br><span class=\"line\"></span><br><span class=\"line\"># Where and how to store data.</span><br><span class=\"line\">storage:</span><br><span class=\"line\">  dbPath: /home/duhaihua/mongo/db</span><br><span class=\"line\">  journal:</span><br><span class=\"line\">    enabled: true</span><br><span class=\"line\"></span><br><span class=\"line\"># where to write logging data.</span><br><span class=\"line\">systemLog:</span><br><span class=\"line\">  destination: file</span><br><span class=\"line\">  logAppend: true</span><br><span class=\"line\">  path: /home/duhaihua/mongo/mongod.log</span><br><span class=\"line\"></span><br><span class=\"line\"># network interfaces</span><br><span class=\"line\">net:</span><br><span class=\"line\">  port: 27017</span><br><span class=\"line\">  bindIp: 0.0.0.0</span><br><span class=\"line\"></span><br><span class=\"line\"># how the process runs</span><br><span class=\"line\">processManagement:</span><br><span class=\"line\">  timeZoneInfo: /usr/share/zoneinfo</span><br><span class=\"line\">  fork: true</span><br><span class=\"line\"></span><br><span class=\"line\"># security.</span><br><span class=\"line\">security:</span><br><span class=\"line\">  authorization: enabled</span><br></pre></td></tr></table></figure></p></li>\n<li><p>启动mongod服务 <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod --config ~/mongo/mongod.conf</span><br></pre></td></tr></table></figure> 可以用以下命令查看mongod是否已启动： <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ps -ef|grep mogod</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>打开mongo shell，使用mongoDB <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongo</span><br></pre></td></tr></table></figure></p></li>\n</ol>\n","site":{"data":{"projects":[{"name":"PDF2Audio","url":"Convert PDFs to Audiobooks with Machine Learning","desc":"Convert PDFs to Audiobooks with Machine Learning"},{"name":"Alfred PKManager","url":"https://github.com/Konfido/alfred-pkmanager","desc":"A handful Alfred Workflow which helps searching and managing your Personal Knowledge Markdown notes."}]}},"excerpt":"<p>在实验室的服务器上安装MongoDB，然而没有sudo权限，只能安装已编译的程序了。 步骤如下：</p>\n<ol type=\"1\">\n<li><p>去<a href=\"https://www.mongodb.com/download-center#community\">官网</a>查看下载并解压最新版4.0.0的MongoDB包","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1404-4.0.0.tgz</span><br><span class=\"line\">$ tar -zxvf mongodb-linux-x86_64-ubuntu1404-4.0.0.tgz</span><br></pre></td></tr></table></figure></p></li>\n<li><p>官网说需要安装OpenSSL &gt;The binary of this version has been compiled with SSL enabled and dynamically linked. This requires that SSL libraries be installed separately. See here for more information on installing OpenSSL. 安装方法参考：<a href=\"https://skynineblog.wordpress.com/2016/04/08/linux%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85-openssl%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/\">这个</a></p></li>\n<li><p>将路径添加到PATH <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">export</span> PATH=<span class=\"string\">&quot;/path/to/dir/:<span class=\"variable\">$PATH</span>&quot;</span></span><br><span class=\"line\">$ <span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></p></li>\n<li><p>在合适位置新建<code>mongod.conf</code>配置文件，主要是设置db和log文件夹，以及<code>fork</code>（后台运行），参考配置： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mongod.conf</span><br><span class=\"line\"></span><br><span class=\"line\"># for documentation of all options, see:</span><br><span class=\"line\">#   http://docs.mongodb.org/manual/reference/configuration-options/</span><br><span class=\"line\"></span><br><span class=\"line\"># Where and how to store data.</span><br><span class=\"line\">storage:</span><br><span class=\"line\">  dbPath: /home/duhaihua/mongo/db</span><br><span class=\"line\">  journal:</span><br><span class=\"line\">    enabled: true</span><br><span class=\"line\"></span><br><span class=\"line\"># where to write logging data.</span><br><span class=\"line\">systemLog:</span><br><span class=\"line\">  destination: file</span><br><span class=\"line\">  logAppend: true</span><br><span class=\"line\">  path: /home/duhaihua/mongo/mongod.log</span><br><span class=\"line\"></span><br><span class=\"line\"># network interfaces</span><br><span class=\"line\">net:</span><br><span class=\"line\">  port: 27017</span><br><span class=\"line\">  bindIp: 0.0.0.0</span><br><span class=\"line\"></span><br><span class=\"line\"># how the process runs</span><br><span class=\"line\">processManagement:</span><br><span class=\"line\">  timeZoneInfo: /usr/share/zoneinfo</span><br><span class=\"line\">  fork: true</span><br><span class=\"line\"></span><br><span class=\"line\"># security.</span><br><span class=\"line\">security:</span><br><span class=\"line\">  authorization: enabled</span><br></pre></td></tr></table></figure></p></li>\n<li><p>启动mongod服务 <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod --config ~/mongo/mongod.conf</span><br></pre></td></tr></table></figure> 可以用以下命令查看mongod是否已启动： <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ps -ef|grep mogod</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>打开mongo shell，使用mongoDB <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongo</span><br></pre></td></tr></table></figure></p></li>\n</ol>"},{"title":"压缩已存数据的NTFS硬盘，创建 Mac TimeMachine","urlname":"Use-NTFS-hard-drive-to-create-Mac-TimeMachine","alias":[],"hidden":true,"typora-root-url":"..","typora-copy-images-to":"../images","date":"2019-09-30T05:23:13.000Z","updated":"2019-09-30T05:23:13.000Z","_content":"\n\n\n## 背景\n\n- 硬盘：西数1T硬盘，NTFS格式，已经存储200G数据\n- 目标：想从硬盘中划出300G空间作为Mac的TimeMachine备份分区，但并没有其他硬盘可以备份已储数据，因此无法全盘格式化后再重新分区。\n- 查找各种方法后，终于通过以下步骤实现上述目标。\n\n\n\n## 方法步骤\n\n本文操作环境：MBP 256G Mojave，Parallel Win10虚拟机\n\n1. 压缩硬盘分区\n\n    - 使用Windows自带磁盘管理工具\n\n    - 在硬盘主分区上右键，选“压缩卷”，[压缩空间量](https://www.iplaysoft.com/tools/partition-calculator/)300G（307204 MB）\n    - 右键“未分配”的300G，新建简单卷（此时默认为NTFS格式）\n\n2. 创建EFI（ESP）分区\n\n    - 用于保存系统引导文件，如果略过此步骤直接进行下一步抹除，可能会失败报错：“Mediakit 报告设备上空间不足以执行此操作”\n\n    - Windows自带磁盘管理工具+[DiskGenius](http://www.diskgenius.cn/)\n\n    - 使用Windows磁盘管理工具磁盘压缩出额外300M（大于200M即可）空间\n\n    - 使用DiskGenius，点选该300M未分配空间，右键“建立ESP/MSR分区”\n\n        <img src=\"../images/20190930140443835.png\" alt=\"20190930140443835\" style=\"zoom: 50%;\" />\n\n    - 硬盘预分区完成\n\n3. 格式化为MacOSX分区\n\n    - 使用Mac自带磁盘工具\n    - 选择300G的用于TimeMachine分区，选择抹除，格式为“Mac OS 扩展（日志式）”\n    - 打开Time Machine，成功开始备份！","source":"_posts/压缩已存数据的NTFS硬盘用于TimeMachine.md","raw":"---\ntitle: 压缩已存数据的NTFS硬盘，创建 Mac TimeMachine\nurlname: Use-NTFS-hard-drive-to-create-Mac-TimeMachine\nalias: []\ntags: [Mac]\nhidden: True\ntypora-root-url: ..\ntypora-copy-images-to: ../images\ndate: 2019-09-30 13:23:13\nupdated: 2019-09-30 13:23:13\n---\n\n\n\n## 背景\n\n- 硬盘：西数1T硬盘，NTFS格式，已经存储200G数据\n- 目标：想从硬盘中划出300G空间作为Mac的TimeMachine备份分区，但并没有其他硬盘可以备份已储数据，因此无法全盘格式化后再重新分区。\n- 查找各种方法后，终于通过以下步骤实现上述目标。\n\n\n\n## 方法步骤\n\n本文操作环境：MBP 256G Mojave，Parallel Win10虚拟机\n\n1. 压缩硬盘分区\n\n    - 使用Windows自带磁盘管理工具\n\n    - 在硬盘主分区上右键，选“压缩卷”，[压缩空间量](https://www.iplaysoft.com/tools/partition-calculator/)300G（307204 MB）\n    - 右键“未分配”的300G，新建简单卷（此时默认为NTFS格式）\n\n2. 创建EFI（ESP）分区\n\n    - 用于保存系统引导文件，如果略过此步骤直接进行下一步抹除，可能会失败报错：“Mediakit 报告设备上空间不足以执行此操作”\n\n    - Windows自带磁盘管理工具+[DiskGenius](http://www.diskgenius.cn/)\n\n    - 使用Windows磁盘管理工具磁盘压缩出额外300M（大于200M即可）空间\n\n    - 使用DiskGenius，点选该300M未分配空间，右键“建立ESP/MSR分区”\n\n        <img src=\"../images/20190930140443835.png\" alt=\"20190930140443835\" style=\"zoom: 50%;\" />\n\n    - 硬盘预分区完成\n\n3. 格式化为MacOSX分区\n\n    - 使用Mac自带磁盘工具\n    - 选择300G的用于TimeMachine分区，选择抹除，格式为“Mac OS 扩展（日志式）”\n    - 打开Time Machine，成功开始备份！","slug":"压缩已存数据的NTFS硬盘用于TimeMachine","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckozvuosw000ndbsggx4v91lr","content":"<h2 id=\"背景\">背景</h2>\n<ul>\n<li>硬盘：西数1T硬盘，NTFS格式，已经存储200G数据</li>\n<li>目标：想从硬盘中划出300G空间作为Mac的TimeMachine备份分区，但并没有其他硬盘可以备份已储数据，因此无法全盘格式化后再重新分区。</li>\n<li>查找各种方法后，终于通过以下步骤实现上述目标。</li>\n</ul>\n<h2 id=\"方法步骤\">方法步骤</h2>\n<p>本文操作环境：MBP 256G Mojave，Parallel Win10虚拟机</p>\n<ol type=\"1\">\n<li><p>压缩硬盘分区</p>\n<ul>\n<li><p>使用Windows自带磁盘管理工具</p></li>\n<li><p>在硬盘主分区上右键，选“压缩卷”，<a href=\"https://www.iplaysoft.com/tools/partition-calculator/\">压缩空间量</a>300G（307204 MB）</p></li>\n<li><p>右键“未分配”的300G，新建简单卷（此时默认为NTFS格式）</p></li>\n</ul></li>\n<li><p>创建EFI（ESP）分区</p>\n<ul>\n<li><p>用于保存系统引导文件，如果略过此步骤直接进行下一步抹除，可能会失败报错：“Mediakit 报告设备上空间不足以执行此操作”</p></li>\n<li><p>Windows自带磁盘管理工具+<a href=\"http://www.diskgenius.cn/\">DiskGenius</a></p></li>\n<li><p>使用Windows磁盘管理工具磁盘压缩出额外300M（大于200M即可）空间</p></li>\n<li><p>使用DiskGenius，点选该300M未分配空间，右键“建立ESP/MSR分区”</p>\n<p><img src=\"../images/20190930140443835.png\" alt=\"20190930140443835\" style=\"zoom: 50%;\" /></p></li>\n<li><p>硬盘预分区完成</p></li>\n</ul></li>\n<li><p>格式化为MacOSX分区</p>\n<ul>\n<li>使用Mac自带磁盘工具</li>\n<li>选择300G的用于TimeMachine分区，选择抹除，格式为“Mac OS 扩展（日志式）”</li>\n<li>打开Time Machine，成功开始备份！</li>\n</ul></li>\n</ol>\n","site":{"data":{"projects":[{"name":"PDF2Audio","url":"Convert PDFs to Audiobooks with Machine Learning","desc":"Convert PDFs to Audiobooks with Machine Learning"},{"name":"Alfred PKManager","url":"https://github.com/Konfido/alfred-pkmanager","desc":"A handful Alfred Workflow which helps searching and managing your Personal Knowledge Markdown notes."}]}},"excerpt":"","more":"<h2 id=\"背景\">背景</h2>\n<ul>\n<li>硬盘：西数1T硬盘，NTFS格式，已经存储200G数据</li>\n<li>目标：想从硬盘中划出300G空间作为Mac的TimeMachine备份分区，但并没有其他硬盘可以备份已储数据，因此无法全盘格式化后再重新分区。</li>\n<li>查找各种方法后，终于通过以下步骤实现上述目标。</li>\n</ul>\n<h2 id=\"方法步骤\">方法步骤</h2>\n<p>本文操作环境：MBP 256G Mojave，Parallel Win10虚拟机</p>\n<ol type=\"1\">\n<li><p>压缩硬盘分区</p>\n<ul>\n<li><p>使用Windows自带磁盘管理工具</p></li>\n<li><p>在硬盘主分区上右键，选“压缩卷”，<a href=\"https://www.iplaysoft.com/tools/partition-calculator/\">压缩空间量</a>300G（307204 MB）</p></li>\n<li><p>右键“未分配”的300G，新建简单卷（此时默认为NTFS格式）</p></li>\n</ul></li>\n<li><p>创建EFI（ESP）分区</p>\n<ul>\n<li><p>用于保存系统引导文件，如果略过此步骤直接进行下一步抹除，可能会失败报错：“Mediakit 报告设备上空间不足以执行此操作”</p></li>\n<li><p>Windows自带磁盘管理工具+<a href=\"http://www.diskgenius.cn/\">DiskGenius</a></p></li>\n<li><p>使用Windows磁盘管理工具磁盘压缩出额外300M（大于200M即可）空间</p></li>\n<li><p>使用DiskGenius，点选该300M未分配空间，右键“建立ESP/MSR分区”</p>\n<p><img src=\"../images/20190930140443835.png\" alt=\"20190930140443835\" style=\"zoom: 50%;\" /></p></li>\n<li><p>硬盘预分区完成</p></li>\n</ul></li>\n<li><p>格式化为MacOSX分区</p>\n<ul>\n<li>使用Mac自带磁盘工具</li>\n<li>选择300G的用于TimeMachine分区，选择抹除，格式为“Mac OS 扩展（日志式）”</li>\n<li>打开Time Machine，成功开始备份！</li>\n</ul></li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckozvuosd0001dbsg9mhtebi5","tag_id":"ckozvuosi0004dbsgeazv39v5","_id":"ckozvuosp000cdbsg0nl4aa8s"},{"post_id":"ckozvuosh0003dbsghkvjc456","tag_id":"ckozvuoso000bdbsg9lirbljn","_id":"ckozvuosu000idbsgd9sa8y03"},{"post_id":"ckozvuosk0006dbsg4gwz2kch","tag_id":"ckozvuost000gdbsg0hrdfx7s","_id":"ckozvuosw000mdbsghg0d86iv"},{"post_id":"ckozvuosm0008dbsgcbqp9qbt","tag_id":"ckozvuosv000kdbsg3iqe73it","_id":"ckozvuosz000pdbsg7ubp5nxw"},{"post_id":"ckozvuosn000adbsghsl61me1","tag_id":"ckozvuosv000kdbsg3iqe73it","_id":"ckozvuot0000rdbsg4kkd8tkg"},{"post_id":"ckozvuosn000adbsghsl61me1","tag_id":"ckozvuosi0004dbsgeazv39v5","_id":"ckozvuot0000sdbsg8dkh9iuo"},{"post_id":"ckozvuosq000edbsg2cmk71gk","tag_id":"ckozvuosz000qdbsg0p28hv9x","_id":"ckozvuot1000udbsghu43c3cn"},{"post_id":"ckozvuosr000fdbsg1j6cgc7n","tag_id":"ckozvuot0000tdbsg0s6q70li","_id":"ckozvuot2000xdbsge4yn9699"},{"post_id":"ckozvuosr000fdbsg1j6cgc7n","tag_id":"ckozvuost000gdbsg0hrdfx7s","_id":"ckozvuot2000ydbsg8mzcb56w"},{"post_id":"ckozvuost000hdbsg46qccir0","tag_id":"ckozvuosz000qdbsg0p28hv9x","_id":"ckozvuot20010dbsg586jehzd"},{"post_id":"ckozvuosu000jdbsg0ta2bx5s","tag_id":"ckozvuot2000zdbsg4pryfkb3","_id":"ckozvuot30013dbsg33x24jbd"},{"post_id":"ckozvuosu000jdbsg0ta2bx5s","tag_id":"ckozvuot30011dbsg9c1w23b1","_id":"ckozvuot40014dbsg8b2b074d"},{"post_id":"ckozvuosv000ldbsgenlk523g","tag_id":"ckozvuosv000kdbsg3iqe73it","_id":"ckozvuot40016dbsg4w8leffx"},{"post_id":"ckozvuosv000ldbsgenlk523g","tag_id":"ckozvuot30012dbsg9dxofso4","_id":"ckozvuot40017dbsggtmh9bo3"},{"post_id":"ckozvuosw000ndbsggx4v91lr","tag_id":"ckozvuot40015dbsg91xifnmk","_id":"ckozvuot40018dbsgbcp9dll0"}],"Tag":[{"name":"Handbook","_id":"ckozvuosi0004dbsgeazv39v5"},{"name":"hexo","_id":"ckozvuoso000bdbsg9lirbljn"},{"name":"Productivity","_id":"ckozvuost000gdbsg0hrdfx7s"},{"name":"dev","_id":"ckozvuosv000kdbsg3iqe73it"},{"name":"python","_id":"ckozvuosz000qdbsg0p28hv9x"},{"name":"Windows","_id":"ckozvuot0000tdbsg0s6q70li"},{"name":"project","_id":"ckozvuot2000zdbsg4pryfkb3"},{"name":"ML","_id":"ckozvuot30011dbsg9c1w23b1"},{"name":"intro","_id":"ckozvuot30012dbsg9dxofso4"},{"name":"Mac","_id":"ckozvuot40015dbsg91xifnmk"}]}}